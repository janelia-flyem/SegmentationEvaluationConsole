{"version":3,"sources":["webpack:///webpack/bootstrap fa3fc30a98bccaaaa7bc","webpack:///./src/neuroglancer/worker_rpc_context.ts","webpack:///./src/neuroglancer/worker_rpc.ts","webpack:///./src/neuroglancer/util/disposable.ts","webpack:///./src/neuroglancer/chunk_manager/backend.ts","webpack:///./src/neuroglancer/chunk_manager/base.ts","webpack:///./~/signals/dist/signals.js","webpack:///./src/neuroglancer/util/pairing_heap.0.ts","webpack:///./src/neuroglancer/util/pairing_heap.1.ts","webpack:///./src/neuroglancer/util/linked_list.0.ts","webpack:///./src/neuroglancer/util/linked_list.1.ts","webpack:///./src/neuroglancer/sliceview/backend.ts","webpack:///./src/neuroglancer/sliceview/base.ts","webpack:///./src/neuroglancer/sliceview/chunk_layout.ts","webpack:///./src/neuroglancer/util/geom.ts","webpack:///./~/gl-matrix/src/gl-matrix.js","webpack:///./~/gl-matrix/src/gl-matrix/common.js","webpack:///./~/gl-matrix/src/gl-matrix/mat2.js","webpack:///./~/gl-matrix/src/gl-matrix/mat2d.js","webpack:///./~/gl-matrix/src/gl-matrix/mat3.js","webpack:///./~/gl-matrix/src/gl-matrix/mat4.js","webpack:///./~/gl-matrix/src/gl-matrix/quat.js","webpack:///./~/gl-matrix/src/gl-matrix/vec3.js","webpack:///./~/gl-matrix/src/gl-matrix/vec4.js","webpack:///./~/gl-matrix/src/gl-matrix/vec2.js","webpack:///./src/neuroglancer/util/compare.ts","webpack:///./src/neuroglancer/util/array.ts","webpack:///./src/neuroglancer/datasource/brainmaps/backend.ts","webpack:///./src/neuroglancer/datasource/brainmaps/api_backend.ts","webpack:///./src/neuroglancer/datasource/brainmaps/api_implementation.ts","webpack:///./src/neuroglancer/datasource/brainmaps/api.ts","webpack:///./src/neuroglancer/util/http_request.ts","webpack:///./src/neuroglancer/util/hash.ts","webpack:///./src/neuroglancer/util/promise.ts","webpack:///./src/neuroglancer/datasource/brainmaps/base.ts","webpack:///./src/neuroglancer/mesh/backend.ts","webpack:///./src/neuroglancer/uint64_set.ts","webpack:///./src/neuroglancer/gpu_hash/hash_table.ts","webpack:///./src/neuroglancer/gpu_hash/hash_function.ts","webpack:///./src/neuroglancer/util/uint64.ts","webpack:///./src/neuroglancer/util/json.ts","webpack:///./src/neuroglancer/util/endian.ts","webpack:///./src/neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation.ts","webpack:///./src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts","webpack:///./src/neuroglancer/sliceview/decode_jpeg_stack.ts","webpack:///./third_party/jpgjs/jpg.js","webpack:///./src/neuroglancer/sliceview/backend_chunk_decoders/postprocess.ts","webpack:///./src/neuroglancer/util/uint32array_builder.ts","webpack:///./src/neuroglancer/sliceview/compressed_segmentation/encode_uint32.ts","webpack:///./src/neuroglancer/sliceview/compressed_segmentation/encode_common.ts","webpack:///./src/neuroglancer/sliceview/compressed_segmentation/encode_uint64.ts","webpack:///./src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts","webpack:///./~/pako/index.js","webpack:///./~/pako/lib/utils/common.js","webpack:///./~/pako/lib/deflate.js","webpack:///./~/pako/lib/zlib/deflate.js","webpack:///./~/pako/lib/zlib/trees.js","webpack:///./~/pako/lib/zlib/adler32.js","webpack:///./~/pako/lib/zlib/crc32.js","webpack:///./~/pako/lib/zlib/messages.js","webpack:///./~/pako/lib/utils/strings.js","webpack:///./~/pako/lib/zlib/zstream.js","webpack:///./~/pako/lib/inflate.js","webpack:///./~/pako/lib/zlib/inflate.js","webpack:///./~/pako/lib/zlib/inffast.js","webpack:///./~/pako/lib/zlib/inftrees.js","webpack:///./~/pako/lib/zlib/constants.js","webpack:///./~/pako/lib/zlib/gzheader.js","webpack:///./src/neuroglancer/datasource/ndstore/backend.ts","webpack:///./src/neuroglancer/sliceview/backend_chunk_decoders/ndstoreNpz.ts","webpack:///./src/neuroglancer/util/npy.ts","webpack:///./src/neuroglancer/datasource/dvid/backend.ts","webpack:///./src/neuroglancer/datasource/dvid/base.ts","webpack:///./src/neuroglancer/datasource/openconnectome/backend.ts","webpack:///./src/neuroglancer/datasource/precomputed/backend.ts","webpack:///./src/neuroglancer/datasource/precomputed/base.ts"],"names":[],"mappings":"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AET;AACA,oBAAoB,SAAS;AAC7B;AACA;AACA;AACA,SAAS;;AAET;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA,+DAA+D,GAAG,wCAAwC,GAAG;AAC7G;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,QAAQ;AAC3B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA,gBAAgB,KAAK,EAAE;AACvB;AACA,SAAS;;AAET;AACA,mBAAmB,SAAS;AAC5B,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,OAAO;AAC1B,oBAAoB,QAAQ;AAC5B;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,mBAAmB,SAAS;AAC5B,mBAAmB,OAAO;AAC1B,mBAAmB,OAAO;AAC1B,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AA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ChC;AAAC;AAFe,QAAO,UAEtB,Q;;;;;;ACvDD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;ACpCA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;;;;;;;ACrEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;;AAEA,kC;AACA,qB;AACA,gB;AACA,gB;AACA,8B;AACA,qB;AACA,E;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACnbA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,OAAO;AACpB;AACA,2B;AACA;AACA,E;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,MAAM;AACjB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpdA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,e;AACA,oB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,UAAU,KAAK;AACf,UAAU,KAAK;AACf;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,e;AACA,oB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;ACzuBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ,UAAU;AACV;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,WAAW,WAAW;AACpC;AACA;AACA;AACA;;AAEA,cAAc,WAAW,YAAY;AACrC;AACA;AACA;AACA;;AAEA,eAAe,YAAY,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,mBAAmB,YAAY,YAAY;AAC3C,mBAAmB,YAAY,YAAY;AAC3C,mBAAmB,YAAY,aAAa;;AAE5C,qBAAqB,cAAc,cAAc;AACjD,qBAAqB,cAAc,cAAc;AACjD,qBAAqB,cAAc,eAAe;;AAElD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,eAAe,eAAe;AACpD,sBAAsB,eAAe,eAAe;AACpD,sBAAsB,eAAe,iBAAiB;AACtD;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,aAAa;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,YAAY;AACvC,eAAe,YAAY,aAAa;;AAExC;AACA,wBAAwB,yBAAyB;AACjD,4BAA4B,qBAAqB;AACjD,4BAA4B,yBAAyB;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA,2CAA2C,aAAa;;AAExD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;;AAEA,kB;AACA;AACA;AACA;AACA,mC;AACA,mC;AACA,GAAG,iD;AACH;AACA;AACA;AACA,mC;AACA,mC;AACA,GAAG,6B;AACH;AACA;AACA,mC;AACA;AACA,mC;AACA,GAAG,O;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;;;;;;;ACvlEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,KAAK;AACjB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA,e;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA,e;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA,e;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,O;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,wCAAwC;AACxC;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;;AAEA;;;;;;;ACvlBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,OAAO;AAC9B,0BAA0B,iBAAiB;AAC3C;AACA,0BAA0B,iBAAiB;AAC3C;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA,K;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACxwBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,OAAO;AAC9B,0BAA0B,iBAAiB,iBAAiB;AAC5D;AACA,0BAA0B,iBAAiB,iBAAiB;AAC5D;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AChmBA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA,uBAAuB,OAAO;AAC9B,0BAA0B;AAC1B;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,KAAK;AAChB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;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GAAE;AAC/B,cAAM,IAAS,MACjB;AAEsE;;AACnE,QAAO,OAAM,QAAS,OAAO,WAAkB,cAAG,KAAgB,cAAG,KAAgB,cAAI,IAAE;AAC5F,cAAM,IAAU,iEAAgE,OAAM,mBAAkB,OAAO,2BAAmB,OAAI,KAAI,IAAe,cAC3J;AAAC;AACK,WAAO,OAAQ,QAAO,OAAM,OAAQ,OAA4B,2BACxE;AAAC;AAZe,QAAe,kBAY9B,gB;;;;;;AC/BD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,QAAQ;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,oBAAoB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,uBAAuB,YAAY;AACnC,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACryBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB;AAClD;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,mBAAmB;AAClD,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA,uCAAuC,OAAO;AAC9C,2CAA2C,OAAO;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,4BAA4B;AAC9D,sCAAsC,0BAA0B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,6BAA6B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA,6BAA6B;AAC7B,2CAA2C,QAAQ;AACnD;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mCAAmC,mBAAmB;AACtD;AACA;AACA;AACA,uCAAuC,QAAQ;AAC/C;AACA;AACA;AACA,uCAAuC,mBAAmB;AAC1D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,gBAAgB;AAC/C,0CAA0C,mBAAmB;AAC7D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA,qDAAqD,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,qDAAqD,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,qDAAqD,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qDAAqD,YAAY;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C,+BAA+B,eAAe;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA,kDAAkD,QAAQ;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,UAAU;AACpC,8BAA8B,UAAU;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA,uDAAuD,QAAQ;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB;AACtC,0BAA0B,iCAAiC;AAC3D,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA,sBAAsB,iCAAiC;AACvD,0BAA0B,gBAAgB;AAC1C,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA,uBAAuB,kCAAkC;AACzD;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,iCAAiC;AACvD,0BAA0B,8BAA8B;AACxD,8BAA8B,oBAAoB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gBAAgB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wCAAwC;AAC9D,0BAA0B,wCAAwC;AAClE,8BAA8B,oBAAoB;AAClD;AACA;AACA,kCAAkC,8BAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,oBAAoB;AAC1C;AACA;AACA;AACA,0BAA0B,wCAAwC;AAClE,8BAA8B,wCAAwC;AACtE,kCAAkC,8BAA8B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,gBAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,QAAQ;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA,+BAA+B,+BAA+B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,QAAQ;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,QAAQ;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA,+BAA+B,gBAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA,gEAAgE,QAAQ;AACxE;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,QAAQ;AAC9D;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,mCAAmC,QAAQ;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA,+DAA+D,QAAQ;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA,sDAAsD,QAAQ;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sBAAsB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,aAAa;AACjD,uCAAuC,WAAW;AAClD;AACA,4CAA4C,QAAQ;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB;AACpE;AACA,uCAAuC,WAAW;AAClD,wDAAwD,mBAAmB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,aAAa;AACjD;AACA;AACA;AACA,uCAAuC,WAAW;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA,6CAA6C,WAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,YAAY;AACtD;AACA;AACA;AACA,iBAAiB;AACjB,sCAAsC,YAAY;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA,iBAAiB;AACjB,+BAA+B,WAAW;AAC1C;AACA;AACA,0DAA0D,QAAQ;AAClE,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,QAAQ;AAC3D,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,KAAK;AAClD;AACA;AACA,6CAA6C,KAAK;AAClD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,2BAA2B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,0BAA0B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,YAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA,+BAA+B,0BAA0B;AACzD;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA;AACA,2BAA2B,wBAAwB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,eAAe;AAC3D;AACA;AACA;;AAEA;AACA,4CAA4C,eAAe;AAC3D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,kBAAkB;AAC9D;AACA;AACA;;AAEA;AACA,4CAA4C,kBAAkB;AAC9D;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,QAAQ;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,QAAQ;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,OAAO;AACtC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,QAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,QAAQ;AAC/D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA,mCAAmC,WAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,QAAQ;AACrE;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,6DAA6D,QAAQ;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sBAAsB;;AAEvB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACrqIG;;;;;AAEH,iCAAqD;AAErD,mDAA4E;AAC5E,0CAAkH;AAClH,0CAAkH;AAElH,IAAgB,aAAG,IAAI,yBAAkB,mBAAQ;AAEjD,4BAAqD,OAAuB;AACpE,QAAM,OAAQ,MAAQ;;AACzB,QAAK,KAAiC;AACjC,YAAU,WAAQ;;AACd,mBAAS;AACZ,gBAAY;AACnB,iBAAK,OAAQ,SAAO;AAClB,gCAAmB,cAAW,YAAM,KAAgC,iCAAmB,MAAO,MAAgB;AACxG;AACR,iBAAK,OAAQ,SAAO;AAClB,gCAAmB,cAAW,YAAM,KAAgC,iCAAmB,MAAO,MAAgB;AACxG;AACR;AACE,sBAAM,IAAU,6DAAsD,OAAQ,SAAU,SACzF;;AACI,cAAK,OAAG,IAAe,YAAW,WACzC;AAAM,WAAE;AACD,cAAK,OACZ;AACF;AAAC;AAnBe,QAAkB,qBAmBjC,mB;;;;;;;;;;;;;;;;;;;;;;AC9BD;;;;;;;AAIE;YAA4B,wEAAa;;;;AAHzC,aAAM,SAAK;AAIL,aAAK,OAAG,IAAe,YAC7B;AAEM;;;;+BAAkB;AAClB,gBAAM,OA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CA;AACA,4BAA4B,YAAY;AACxC,qBAAqB,8BAA8B;AACnD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;;AAEA;AACA;AACA;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACrGA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA,8BAA8B;AAC9B;AACA,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG,eAAe;;AAElB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kBAAkB;AAClB,mBAAmB;AACnB,sBAAsB;AACtB,mBAAmB;;AAEnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,cAAc;;AAEjC;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB,oBAAoB;;AAEzC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;AC/YA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gCAAgC;AAChC;;;AAGA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;AAC1B,0BAA0B;;AAE1B,mBAAmB;;AAEnB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB,sBAAsB,qBAAqB,cAAc,EAAE;;;AAG/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,YAAY;AAC/B,kBAAkB,UAAU;;AAE5B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,wBAAwB;AACxB,YAAY;AACZ,UAAU;AACV,+BAA+B;AAC/B,gCAAgC;AAChC;AACA;;AAEA,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0BAA0B;;AAE3D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA,kEAAkE;AAClE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;;AAEb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;;AAEnE;AACA,yDAAyD;AACzD;;AAEA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0DAA0D;AAC1D;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,aAAa;;AAEb;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO,EAAE;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,WAAW;AACX,mBAAmB;;AAEnB;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO,EAAE;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oEAAoE;AACpE;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0DAA0D;AAC1D;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,mBAAmB;AACnB,kBAAkB;AAClB,0BAA0B;AAC1B,4BAA4B;AAC5B,uBAAuB;AACvB,mBAAmB;AACnB,gBAAgB;AAChB,qBAAqB;AACrB,mBAAmB;AACnB,2BAA2B;AAC3B,uBAAuB;;AAEvB,kBAAkB;AAClB,kBAAkB;AAClB,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;;AAEnB,iBAAiB;AACjB,qBAAqB;AACrB,qBAAqB;AACrB,qBAAqB;;AAErB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB,sBAAsB;AACtB,2BAA2B;AAC3B,oBAAoB;AACpB,uBAAuB;AACvB,qBAAqB;;AAErB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB,oBAAoB;;AAEpB;AACA;;AAEA,sBAAsB;;AAEtB;;AAEA;;AAEA,2CAA2C;AAC3C,6CAA6C;AAC7C,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB,uBAAuB;AACvB,uBAAuB;;AAEvB;AACA;AACA;;AAEA,0BAA0B;AAC1B,+CAA+C;AAC/C;;AAEA,oBAAoB;AACpB,oBAAoB;AACpB;AACA;AACA;;AAEA,gDAAgD;AAChD;AACA;AACA;;AAEA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB,sBAAsB;AACtB,mBAAmB;AACnB,kBAAkB;;;AAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,6BAA6B,uBAAuB;AACpD,8BAA8B,uBAAuB;AACrD;AACA;AACA;;;AAGA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB;AACvB;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB;;AAErB,sCAAsC;;AAEtC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;;AAEA;AACA;;AAEA,uBAAuB;AACvB,qBAAqB;AACrB;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA,6BAA6B,uBAAuB;AACpD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,uBAAuB;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,8BAA8B;;AAE9B,2BAA2B,aAAa;AACxC,oBAAoB,qBAAqB;;AAEzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,kBAAkB;AACrC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,oDAAoD;AACpD;AACA;;AAEA,aAAa;;AAEb;AACA;AACA,qBAAqB;AACrB,yBAAyB;AACzB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvzDA;;;AAGA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8BAA8B;AAC9B;;AAEA;;;AAGA,oBAAoB,sBAAsB,qBAAqB,cAAc,EAAE;;AAE/E;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA,kCAAkC;AAClC,iCAAiC;AACjC,iCAAiC;AACjC,4BAA4B;AAC5B,iCAAiC;;AAEjC;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA,2BAA2B;AAC3B,oBAAoB;AACpB,6BAA6B;AAC7B;;;;AAIA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR,WAAW;AACX,WAAW;AACX,YAAY;AACZ,QAAQ;AACR,mBAAmB;;AAEnB,gBAAgB,kBAAkB;AAClC;AACA;;AAEA;AACA;AACA;AACA,+CAA+C;;AAE/C,0BAA0B,eAAe;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,UAAU,EAAE;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;;AAE/B;AACA;;AAEA;AACA;AACA;AACA,oCAAoC,QAAQ;AAC5C,uBAAuB;AACvB,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA;AACA;AACA,yBAAyB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,mBAAmB;AACnB,qBAAqB;AACrB;AACA,0CAA0C;AAC1C,eAAe;AACf,WAAW;AACX,QAAQ;;AAER;AACA;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,gBAAgB;AAC7B;AACA,oBAAoB,UAAU;AAC9B;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,QAAQ;AACR,WAAW;AACX,aAAa;AACb,WAAW;AACX,WAAW;AACX;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,yBAAyB;AACzC;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gBAAgB,WAAW;AAC3B;AACA,eAAe,8BAA8B;AAC7C;AACA;AACA;AACA;AACA,aAAa;AACb,QAAQ,gBAAgB;AACxB;AACA,eAAe,oCAAoC;AACnD;AACA;AACA;AACA;;AAEA;AACA,gBAAgB,kBAAkB;AAClC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,QAAQ;;AAER;AACA,aAAa,aAAa,QAAQ,iCAAiC;AACnE,aAAa,aAAa,QAAQ,iCAAiC;AACnE,aAAa,cAAc,OAAO,+BAA+B;;AAEjE;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,eAAe;AACf,kBAAkB;AAClB;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,YAAY;AACZ;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,OAAO;;AAEtD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,2BAA2B;AAC3B;AACA,WAAW;AACX,SAAS;AACT,aAAa;AACb,WAAW;AACX,YAAY;;AAEZ;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC;AAChC;AACA,OAAO;AACP;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA,kCAAkC;AAClC;AACA,eAAe;AACf;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA,oCAAoC;AACpC;AACA,OAAO;;AAEP;AACA;AACA;;AAEA,KAAK;AACL;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,oBAAoB;AACpB,WAAW;;AAEX;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAa,WAAW;AACxB;AACA;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC,QAAQ,OAAO,wBAAwB;;AAE9E;AACA;AACA;AACA,eAAe;AACf;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;;AAEA,8BAA8B;;AAE9B,6BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,mBAAmB;AACnB;AACA,QAAQ;AACR,mBAAmB;AACnB,aAAa;;AAEb,wCAAwC;;AAExC,gBAAgB;AAChB,oBAAoB;AACpB,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA,gDAAgD;;AAEhD,aAAa,eAAe;AAC5B;AACA;;AAEA;AACA;;AAEA,KAAK;AACL;;AAEA,KAAK;;AAEL,+BAA+B,kCAAkC;AACjE;;AAEA,KAAK;AACL;;AAEA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,mBAAmB;AACnB;AACA,QAAQ;AACR,mBAAmB;AACnB,aAAa;;AAEb,wCAAwC;;AAExC,gBAAgB;AAChB,oBAAoB;AACpB,oBAAoB;;AAEpB,+BAA+B;AAC/B;AACA;AACA;AACA;;AAEA,aAAa,eAAe;AAC5B;AACA;;AAEA;AACA;;AAEA,KAAK;AACL,UAAU,iCAAiC,EAAE;;AAE7C,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,KAAK;AACL;AACA;;AAEA,KAAK;AACL;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,kCAAkC,kBAAkB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,WAAW;;AAEX;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,gCAAgC;AAChC,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;;AAEA,wCAAwC;AACxC;;AAEA,wCAAwC;AACxC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,IAAI,MAAM,GAAG,MAAM,GAAG;AAChD;AACA;AACA;AACA,SAAS,IAAI,KAAK,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,IAAI,MAAM,IAAI;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,cAAc,cAAc;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,iBAAiB;AACjB,WAAW;AACX;AACA,wDAAwD;AACxD,uCAAuC;AACvC;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,iBAAiB;AACjB,WAAW;AACX;AACA,4BAA4B;AAC5B,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC,wBAAwB;;AAE1D,GAAG;AACH;AACA,4CAA4C;AAC5C;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,kBAAkB;AAClB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACjrCA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;;AAGA;;;;;;;AC/BA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA,iBAAiB,SAAS;AAC1B;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA,mBAAmB,SAAS;AAC5B;AACA;;AAEA,sBAAsB;AACtB;;;AAGA;;;;;;;ACxCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACZA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK,wCAAwC,EAAE,aAAa,sBAAsB;AAClF,KAAK,oDAAoD,EAAE,aAAa,0BAA0B;;;AAGlG;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA,kCAAkC;;;AAGlC;AACA;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,mCAAmC,SAAS;AAC5C;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,sBAAsB,SAAS;AAC/B;AACA;AACA,mBAAmB,qBAAqB,UAAU;;AAElD;AACA;AACA,oBAAoB,0BAA0B,gBAAgB,UAAU;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,0BAA0B,UAAU;;AAExD;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,kBAAkB;;AAE3C;AACA;AACA,kDAAkD,OAAO;;AAEzD;AACA;AACA,gBAAgB,YAAY;;AAE5B;AACA;AACA,kBAAkB,YAAY;;AAE9B;AACA;;;;;;;ACxLA;;;AAGA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AC5BA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU;AAC7C;AACA;AACA,8BAA8B;AAC9B;AACA,qBAAqB,8BAA8B;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG,eAAe;;AAElB;;AAEA;AACA;AACA;AACA;AACA,+BAA+B,sBAAsB;AACrD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;AAClB,mBAAmB;AACnB,sBAAsB;AACtB,mBAAmB;;AAEnB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,cAAc;AACjC;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,sDAAsD;;AAEtD;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,kEAAkE;;AAEvF;;AAEA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB,oBAAoB;;AAEzC;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;ACjaA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;;;AAGA,gBAAgB;AAChB,iBAAiB;AACjB,gBAAgB;AAChB,cAAc;AACd,iBAAiB;AACjB,iBAAiB;AACjB,gBAAgB;AAChB,mBAAmB;AACnB,gBAAgB;AAChB,mBAAmB;AACnB,iBAAiB;AACjB,qBAAqB;AACrB,uBAAuB;AACvB,uBAAuB;AACvB,sBAAsB;AACtB,qBAAqB;AACrB,sBAAsB;AACtB,wBAAwB;AACxB,yBAAyB;AACzB,yBAAyB;AACzB,wBAAwB;AACxB,2BAA2B;AAC3B,yBAAyB;AACzB,4BAA4B;AAC5B,0BAA0B;AAC1B,wBAAwB;AACxB,kBAAkB;AAClB,mBAAmB;AACnB,iBAAiB;AACjB,gBAAgB;AAChB,gBAAgB;AAChB,iBAAiB;;AAEjB;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,gBAAgB;AAChB,oBAAoB;AACpB,gBAAgB;AAChB,wBAAwB;AACxB,iBAAiB;AACjB,gBAAgB;AAChB,iBAAiB;AACjB,iBAAiB;AACjB;AACA,mBAAmB;;AAEnB;AACA,iBAAiB;AACjB,iBAAiB;AACjB,iBAAiB;AACjB,iBAAiB;AACjB,qBAAqB;;AAErB;AACA,gBAAgB;AAChB,gBAAgB;;AAEhB;AACA,kBAAkB;AAClB,kBAAkB;;AAElB;AACA,iBAAiB;;AAEjB;AACA,sBAAsB;AACtB,uBAAuB;AACvB,mBAAmB;AACnB,oBAAoB;;AAEpB;AACA,iBAAiB;AACjB,gBAAgB;AAChB,iBAAiB;AACjB,gBAAgB;AAChB,mBAAmB;;AAEnB,mCAAmC;AACnC,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA,yCAAyC;AACzC,qBAAqB;AACrB,sBAAsB;AACtB,gBAAgB;AAChB,gBAAgB;AAChB,eAAe;AACf;;AAEA;AACA;;AAEA,6BAA6B,uBAAuB;AACpD;AACA;AACA,gBAAgB;AAChB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,6BAA6B,uBAAuB;AACpD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,6BAA6B,uBAAuB;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,cAAc,uBAAuB;AACrC,sBAAsB;;AAEtB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB;;AAEpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAuB,uBAAuB;AAC9C,uBAAuB,uBAAuB;AAC9C,uBAAuB,uBAAuB;AAC9C,uBAAuB,uBAAuB;;AAE9C,uEAAuE,UAAU;;AAEjF;AACA;AACA,sBAAsB,uBAAuB;;AAE7C,uEAAuE,UAAU;;AAEjF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,iBAAiB;AACzD,sCAAsC,qBAAqB;AAC3D;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB;AACpB,WAAW;AACX,UAAU;AACV,iBAAiB;AACjB,WAAW;AACX,WAAW;AACX,gBAAgB;AAChB,WAAW;AACX,WAAW;AACX;AACA,eAAe;AACf,mCAAmC;AACnC,aAAa;AACb,mCAAmC;AACnC,UAAU;AACV,UAAU;AACV,+BAA+B;AAC/B;;AAEA,QAAQ;;AAER;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,qBAAqB,EAAE;;;AAGnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC,0BAA0B,aAAa;AACvC,yBAAyB,iBAAiB;AAC1C,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,kEAAkE;AAClE;AACA;AACA;;AAEA,oCAAoC,OAAO;AAC3C;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,iBAAiB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA+B,OAAO;;AAEtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,gEAAgE;AAChE;AACA;AACA;;AAEA,gCAAgC,OAAO;AACvC;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,OAAO;AACvD;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,kEAAkE;AAClE;AACA;AACA;;AAEA,kCAAkC,OAAO;AACzC;AACA,yBAAyB,iBAAiB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA,gDAAgD,OAAO;AACvD;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,qBAAqB;AAC3D,8BAA8B,aAAa;AAC3C;AACA;AACA;AACA;AACA,aAAa;AACb,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qBAAqB;AACvD;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,wBAAwB,aAAa;AACrC;AACA;AACA;AACA;AACA,OAAO;AACP,+BAA+B,kBAAkB;AACjD;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,6BAA6B,uBAAuB;AACpD;AACA,+BAA+B,uBAAuB;;AAEtD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,6DAA6D,uBAAuB;AACpF;;AAEA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACjgDA;;AAEA;AACA,aAAa;AACb,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV,WAAW;AACX,WAAW;AACX,UAAU;AACV,UAAU;AACV;AACA,WAAW;AACX;AACA,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ;AACA,eAAe;AACf,WAAW;AACX,WAAW;AACX,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ,WAAW;AACX,SAAS;AACT;AACA,UAAU;AACV,WAAW;AACX,WAAW;AACX;;;AAGA,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,WAAW,GAAG;AACd;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA;;AAEA,wBAAwB;AACxB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,4BAA4B;AAC5B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,uBAAuB;AACvB;AACA,gCAAgC;AAChC;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,mBAAmB;AACnB,qCAAqC;AACrC;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,mBAAmB;AACnB;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,qBAAqB;AACrB,uCAAuC;AACvC;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,mBAAmB;AACnB,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC,kBAAkB;AAClB;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;AACZ;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrUA;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;;AAEzB,cAAc;AACd,cAAc;AACd,uBAAuB;AACvB,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,eAAe;AACf,WAAW;AACX,WAAW;AACX,UAAU;AACV,WAAW;AACX,WAAW;AACX,kBAAkB;AAClB;AACA,iBAAiB;AACjB,UAAU;AACV,2CAA2C,eAAe;AAC1D,0CAA0C,eAAe;AACzD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA,eAAe,aAAa;AAC5B;AACA;;AAEA;AACA;AACA,qBAAqB,UAAU;AAC/B,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;AACA,kBAAkB;AAClB,sCAAsC,2BAA2B;AACjE,uCAAuC;AACvC,wCAAwC;AACxC;;;AAGA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;AACA,eAAe,WAAW;AAC1B,2BAA2B,OAAO;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,cAAc;AACd;;AAEA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;;AAEA;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA,GAAG,OAAO;AACV;AACA;AACA;AACA;;AAEA;AACA,WAAW;AACX,UAAU;AACV,YAAY;AACZ,qBAAqB;AACrB,cAAc;AACd,WAAW;AACX,WAAW;AACX,mBAAmB;AACnB,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;;AAEA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;ACtUA;;;AAGA;;AAEA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;ACjDA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBA,oCAA8E;AAC9E,oCAA0G;AAE1G,gCAAiF;AACjF,iCAAmF;AACnF,uCAA+F;AAC/F,yCAAuF;AACvF,uCAAkE;AAElE,IAAiB,gBAAG,IAAgC;AACvC,cAAI,IAAM,OAAE,aAAuB;AACnC,cAAI,IAAO,Q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","file":"chunk_worker.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap fa3fc30a98bccaaaa7bc\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RPC } from 'neuroglancer/worker_rpc';\n\nexport var rpc = new RPC(self);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/worker_rpc_context.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RefCounted} from 'neuroglancer/util/disposable';\n\nexport type RPCHandler = (this: RPC, x: any) => void;\n\nexport type RpcId = number;\n\nconst IS_WORKER = WORKER;\n\nconst DEBUG = false;\n\nconst DEBUG_MESSAGES = false;\n\nvar handlers = new Map<string, RPCHandler>();\n\nexport function registerRPC (key: string, handler: RPCHandler) {\n  handlers.set(key, handler);\n};\n\ninterface RPCTarget {\n  postMessage(message?: any, ports?: any): void;\n  onmessage: (ev: MessageEvent) => any;\n}\n\nexport class RPC {\n  private objects = new Map<RpcId, any>();\n  private nextId: RpcId = IS_WORKER ? -1 : 0;\n  constructor (public target: RPCTarget) {\n    target.onmessage = (e) => {\n      let data = e.data;\n      if (DEBUG_MESSAGES) {\n        console.log('Received message', data);\n      }\n      handlers.get(data.functionName).call(this, data);\n    };\n  }\n\n  get numObjects() { return this.objects.size; }\n\n  set(id: RpcId, value: any) {\n    this.objects.set(id, value);\n  }\n\n  delete(id: RpcId) {\n    this.objects.delete(id);\n  }\n  get (id: RpcId) {\n    return this.objects.get(id);\n  }\n  getRef<T extends SharedObject> (x: {'id': RpcId, 'gen': number}) {\n    let rpcId = x['id'];\n    let obj = <T>this.get(rpcId);\n    obj.referencedGeneration = x['gen'];\n    obj.addRef();\n    return obj;\n  }\n  invoke (name: string, x: any, transfers?: any[]) {\n    x.functionName = name;\n    if (DEBUG_MESSAGES) {\n      console.trace('Sending message', x);\n    }\n    this.target.postMessage(x, transfers);\n  }\n  newId () {\n    return IS_WORKER ? this.nextId-- : this.nextId++;\n  }\n};\n\nexport class SharedObject extends RefCounted {\n  rpc: RPC = null;\n  rpcId: RpcId = null;\n  isOwner: boolean|undefined;\n  unreferencedGeneration: number|undefined;\n  referencedGeneration: number|undefined;\n\n  initializeSharedObject (rpc: RPC, rpcId = rpc.newId()) {\n    this.rpc = rpc;\n    this.rpcId = rpcId;\n    this.isOwner = false;\n    rpc.set(rpcId, this);\n  }\n\n  initializeCounterpart (rpc: RPC, options: any = {}) {\n    this.initializeSharedObject(rpc);\n    this.unreferencedGeneration = 0;\n    this.referencedGeneration = 0;\n    this.isOwner = true;\n    options['id'] = this.rpcId;\n    rpc.invoke('SharedObject.new', options);\n  }\n\n  dispose () {\n    super.dispose();\n  }\n\n  /**\n   * Precondition: this.isOwner === true.\n   */\n  addCounterpartRef () {\n    return {'id': this.rpcId, 'gen': ++this.referencedGeneration};\n  }\n\n  protected refCountReachedZero () {\n    if (this.isOwner === true) {\n      if (this.referencedGeneration === this.unreferencedGeneration) {\n        this.ownerDispose();\n      }\n    } else if (this.isOwner === false) {\n      this.rpc.invoke('SharedObject.refCountReachedZero', {'id': this.rpcId, 'gen': this.referencedGeneration});\n    } else {\n      super.refCountReachedZero();\n    }\n  }\n\n  /**\n   * Precondition: this.isOwner === true.\n   */\n  protected ownerDispose () {\n    if (DEBUG) {\n      console.log(`[${IS_WORKER}] #rpc object = ${this.rpc.numObjects}`);\n    }\n    let {rpc, rpcId} = this;\n    super.refCountReachedZero();\n    rpc.delete(rpcId);\n    rpc.invoke('SharedObject.dispose', {'id': rpcId});\n  }\n\n  /**\n   * Precondition: this.isOwner === true.\n   *\n   * This should be called when the counterpart's refCount is decremented and reaches zero.\n   */\n  counterpartRefCountReachedZero (generation: number) {\n    this.unreferencedGeneration = generation;\n    if (this.refCount === 0 && generation === this.referencedGeneration) {\n      this.ownerDispose();\n    }\n  }\n};\n\n/**\n * Base class for defining a SharedObject type that will never be owned.\n */\nexport class SharedObjectCounterpart extends SharedObject {\n  constructor(rpc?: RPC, options: any = {}) {\n    super();\n    if (rpc != null) {\n      this.initializeSharedObject(rpc, options['id']);\n    }\n  }\n};\n\n\nexport interface SharedObjectConstructor {\n  new (rpc: RPC, options: any): SharedObjectCounterpart;\n}\n\nregisterRPC('SharedObject.dispose', function(x) {\n  let obj = <SharedObject>this.get(x['id']);\n  if (obj.refCount !== 0) {\n    throw new Error(`Attempted to dispose object with non-zero reference count.`);\n  }\n  if (DEBUG) {\n    console.log(`[${IS_WORKER}] #rpc objects: ${this.numObjects}`);\n  }\n  obj.disposed();\n  this.delete(obj.rpcId);\n  obj.rpcId = null;\n  obj.rpc = null;\n});\n\nregisterRPC('SharedObject.refCountReachedZero', function(x) {\n  let obj = <SharedObject>this.get(x['id']);\n  let generation = <number>x['gen'];\n  obj.counterpartRefCountReachedZero(generation);\n});\n\nconst sharedObjectConstructors = new Map<string, SharedObjectConstructor>();\n\nexport function registerSharedObject(name: string, constructorFunction: SharedObjectConstructor) {\n  sharedObjectConstructors.set(name, constructorFunction);\n}\n\nregisterRPC('SharedObject.new', function(x) {\n  let rpc = <RPC>this;\n  let typeName = <string>x['type'];\n  let constructorFunction = sharedObjectConstructors.get(typeName);\n  let obj = new constructorFunction(rpc, x);\n  // Counterpart objects start with a reference count of zero.\n  --obj.refCount;\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/worker_rpc.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface Disposable { dispose: () => void; }\n\nexport type Disposer = Disposable | (() => void);\n\nexport class RefCounted implements Disposable {\n  public refCount = 1;\n  private disposers: Disposer[];\n  addRef() {\n    ++this.refCount;\n    return this;\n  }\n  dispose() {\n    if (--this.refCount !== 0) {\n      return;\n    }\n    this.refCountReachedZero();\n  }\n\n  protected refCountReachedZero () {\n    this.disposed();\n    let {disposers} = this;\n    if (disposers != null) {\n      let numDisposers = disposers.length;\n      for (let i = numDisposers; i > 0; --i) {\n        let disposer = disposers[i - 1];\n        if (typeof disposer === 'object') {\n          (<Disposable>disposer).dispose();\n        } else {\n          (<() => void>disposer).call(this);\n        }\n      }\n      this.disposers = null;\n    }\n  }\n  disposed() {}\n  registerDisposer<T extends Disposer>(f: T): T {\n    let {disposers} = this;\n    if (disposers == null) {\n      this.disposers = [f];\n    } else {\n      disposers.push(f);\n    }\n    return f;\n  }\n  unregisterDisposer<T extends Disposer>(f: T): T {\n    let {disposers} = this;\n    if (disposers != null) {\n      let index = disposers.indexOf(f);\n      if (index !== -1) {\n        disposers.splice(index, 1);\n      }\n    }\n    return f;\n  }\n  registerSignalBinding(binding: SignalBinding) { this.registerDisposer(() => binding.detach()); }\n  registerEventListener(target: EventTarget, eventType: string, listener: any, arg?: any) {\n    target.addEventListener(eventType, listener, arg);\n    this.registerDisposer(() => target.removeEventListener(eventType, listener, arg));\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/disposable.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ChunkState, ChunkPriorityTier, AvailableCapacity} from 'neuroglancer/chunk_manager/base';\nimport {RPC, SharedObjectCounterpart, registerSharedObject} from 'neuroglancer/worker_rpc';\nimport {Disposable} from 'neuroglancer/util/disposable';\nimport {Signal} from 'signals';\nimport {LinkedListOperations} from 'neuroglancer/util/linked_list';\nimport {PairingHeapOperations, ComparisonFunction} from 'neuroglancer/util/pairing_heap';\nimport PairingHeap0 from 'neuroglancer/util/pairing_heap.0';\nimport PairingHeap1 from 'neuroglancer/util/pairing_heap.1';\nimport LinkedList0 from 'neuroglancer/util/linked_list.0';\nimport LinkedList1 from 'neuroglancer/util/linked_list.1';\nimport {rpc} from 'neuroglancer/worker_rpc_context';\nimport {CancellablePromise} from 'neuroglancer/util/promise';\n\nconst DEBUG_CHUNK_UPDATES = false;\n\nexport class Chunk implements Disposable {\n  // Node properties used for eviction/promotion heaps and LRU linked lists.\n  child0: Chunk | null = null;\n  next0: Chunk | null = null;\n  prev0: Chunk | null = null;\n  child1: Chunk | null = null;\n  next1: Chunk | null = null;\n  prev1: Chunk | null = null;\n\n  source: ChunkSource | null = null;\n\n  key: string | null = null;\n  state = ChunkState.NEW;\n\n  /**\n   * Specifies existing priority within priority tier.  Only meaningful if priorityTier in\n   * CHUNK_ORDERED_PRIORITY_TIERS.\n   */\n  priority = 0;\n\n  /**\n   * Specifies updated priority within priority tier, not yet reflected in priority queue state.\n   * Only meaningful if newPriorityTier in CHUNK_ORDERED_PRIORITY_TIERS.\n   */\n  newPriority = 0;\n\n  priorityTier = ChunkPriorityTier.RECENT;\n\n  /**\n   * Specifies updated priority tier, not yet reflected in priority queue state.\n   */\n  newPriorityTier = ChunkPriorityTier.RECENT;\n\n  systemMemoryBytes: number;\n  gpuMemoryBytes: number;\n  backendOnly = false;\n\n  initialize(key: string) {\n    this.key = key;\n    this.state = ChunkState.NEW;\n    this.priority = Number.NEGATIVE_INFINITY;\n    this.priorityTier = ChunkPriorityTier.RECENT;\n    this.newPriority = Number.NEGATIVE_INFINITY;\n    this.newPriorityTier = ChunkPriorityTier.RECENT;\n  }\n\n  /**\n   * Sets this.priority{Tier,} to this.newPriority{Tier,}, and resets this.newPriorityTier to\n   * ChunkPriorityTier.RECENT.\n   *\n   * This does not actually update any queues to reflect this change.\n   */\n  updatePriorityProperties() {\n    this.priorityTier = this.newPriorityTier;\n    this.priority = this.newPriority;\n    this.newPriorityTier = ChunkPriorityTier.RECENT;\n    this.newPriority = Number.NEGATIVE_INFINITY;\n  }\n\n  dispose() { this.source = null; }\n\n  get chunkManager() { return (<ChunkSource>this.source).chunkManager; }\n\n  get queueManager() { return (<ChunkSource>this.source).chunkManager.queueManager; }\n\n  downloadFailed() { this.queueManager.updateChunkState(this, ChunkState.FAILED); }\n\n  downloadSucceeded() { this.queueManager.updateChunkState(this, ChunkState.SYSTEM_MEMORY_WORKER); }\n\n  freeSystemMemory() {}\n\n  cancelDownload() {}\n\n  serialize(msg: any, transfers: any[]) {\n    msg['id'] = this.key;\n    msg['source'] = (<ChunkSource>this.source).rpcId;\n    msg['new'] = true;\n  }\n\n  toString() { return this.key; }\n\n  static priorityLess(a: Chunk, b: Chunk) { return a.priority < b.priority; };\n\n  static priorityGreater(a: Chunk, b: Chunk) { return a.priority > b.priority; }\n};\n\ninterface ChunkConstructor<T extends Chunk> {\n  new (): T;\n}\n\nexport abstract class ChunkSource extends SharedObjectCounterpart {\n  chunkManager: ChunkManager;\n  chunks: Map<string, Chunk> = new Map<string, Chunk>();\n  freeChunks: Chunk[] = new Array<Chunk>();\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    // No need to add a reference, since the owner counterpart will hold a reference to the owner\n    // counterpart of chunkManager.\n    this.chunkManager = (<ChunkManager>rpc.get(options['chunkManager']));\n  }\n\n  getNewChunk_<T extends Chunk>(chunkType: ChunkConstructor<T>): T {\n    let freeChunks = this.freeChunks;\n    let freeChunksLength = freeChunks.length;\n    if (freeChunksLength > 0) {\n      let chunk = <T>freeChunks[freeChunksLength - 1];\n      freeChunks.length = freeChunksLength - 1;\n      chunk.source = this;\n      return chunk;\n    }\n    let chunk = new chunkType();\n    chunk.source = this;\n    return chunk;\n  }\n\n  download(chunk: Chunk) {}\n\n  /**\n   * Adds the specified chunk to the chunk cache.\n   *\n   * If the chunk cache was previously empty, also call this.addRef() to increment the reference\n   * count.\n   */\n  addChunk(chunk: Chunk) {\n    let {chunks} = this;\n    if (chunks.size === 0) {\n      this.addRef();\n    }\n    chunks.set(chunk.key, chunk);\n  }\n\n  /**\n   * Remove the specified chunk from the chunk cache.\n   *\n   * If the chunk cache becomes empty, also call this.dispose() to decrement the reference count.\n   */\n  removeChunk(chunk: Chunk) {\n    let {chunks, freeChunks} = this;\n    chunks.delete(chunk.key);\n    chunk.dispose();\n    freeChunks[freeChunks.length] = chunk;\n    if (chunks.size === 0) {\n      this.dispose();\n    }\n  }\n};\n\nexport function handleChunkDownloadPromise<ChunkType extends Chunk, Result>(\n    chunk: ChunkType, promise: CancellablePromise<Result>,\n    chunkDecoder: (chunk: ChunkType, result: Result) => void) {\n  chunk.cancelDownload = function() {\n    chunk.cancelDownload = null;\n    promise.cancel();\n  };\n  promise.then(\n      response => {\n        if (chunk.cancelDownload === null) {\n          // Download was cancelled.\n          return;\n        }\n        chunk.cancelDownload = null;\n        try {\n          chunkDecoder.call(undefined, chunk, response);\n          chunk.downloadSucceeded();\n        } catch (e) {\n          console.log(`Failed to decode chunk ${chunk}: ${e}`);\n          chunk.downloadFailed();\n        }\n      },\n      function(xhr) {\n        if (chunk.cancelDownload === null) {\n          // Download was cancelled.\n          return;\n        }\n        chunk.cancelDownload = null;\n        chunk.downloadFailed();\n        console.log(`Download failed for chunk ${chunk}`);\n      });\n}\n\nconst enum ChunkPriorityQueueType {\n  // Queue finds lowest priority chunks.\n  MIN = 0,\n  // Queue finds highest priority chunks.\n  MAX = 1\n}\n\nclass ChunkPriorityQueue {\n  /**\n   * Heap roots for VISIBLE and PREFETCH priority tiers.\n   */\n  private heapRoots: (Chunk | null)[] = [null, null];\n\n  /**\n   * Head node for RECENT linked list.\n   */\n  private recentHead = new Chunk();\n  constructor(\n      private heapOperations: PairingHeapOperations<Chunk>,\n      private linkedListOperations: LinkedListOperations) {\n    linkedListOperations.initializeHead(this.recentHead);\n  }\n\n  add(chunk: Chunk) {\n    let priorityTier = chunk.priorityTier;\n    if (priorityTier === ChunkPriorityTier.RECENT) {\n      this.linkedListOperations.insertAfter(this.recentHead, chunk);\n    } else {\n      let {heapRoots} = this;\n      heapRoots[priorityTier] = this.heapOperations.meld(heapRoots[priorityTier], chunk);\n    }\n  }\n\n  * candidates(): Iterator<Chunk> {\n    if (this.heapOperations.compare === Chunk.priorityLess) {\n      // Start with least-recently used RECENT chunk.\n      let {linkedListOperations, recentHead} = this;\n      while (true) {\n        let chunk = linkedListOperations.back(recentHead);\n        if (chunk == null) {\n          break;\n        } else {\n          yield chunk;\n        }\n      }\n      let {heapRoots} = this;\n      for (let tier = ChunkPriorityTier.LAST_ORDERED_TIER;\n           tier >= ChunkPriorityTier.FIRST_ORDERED_TIER; --tier) {\n        while (true) {\n          let root = heapRoots[tier];\n          if (root == null) {\n            break;\n          } else {\n            yield root;\n          }\n        }\n      }\n    } else {\n      let heapRoots = this.heapRoots;\n      for (let tier = ChunkPriorityTier.FIRST_ORDERED_TIER;\n           tier <= ChunkPriorityTier.LAST_ORDERED_TIER; ++tier) {\n        while (true) {\n          let root = heapRoots[tier];\n          if (root == null) {\n            break;\n          } else {\n            yield root;\n          }\n        }\n      }\n      let {linkedListOperations, recentHead} = this;\n      while (true) {\n        let chunk = linkedListOperations.front(recentHead);\n        if (chunk == null) {\n          break;\n        } else {\n          yield chunk;\n        }\n      }\n    }\n  }\n\n  /**\n   * Deletes a chunk from this priority queue.\n   * @param chunk The chunk to delete from the priority queue.\n   */\n  delete (chunk: Chunk) {\n    let priorityTier = chunk.priorityTier;\n    if (priorityTier === ChunkPriorityTier.RECENT) {\n      this.linkedListOperations.pop(chunk);\n    } else {\n      let heapRoots = this.heapRoots;\n      heapRoots[priorityTier] = this.heapOperations.remove(<Chunk>heapRoots[priorityTier], chunk);\n    }\n  }\n};\n\nfunction makeChunkPriorityQueue0(compare: ComparisonFunction<Chunk>) {\n  return new ChunkPriorityQueue(new PairingHeap0(compare), LinkedList0);\n}\n\nfunction makeChunkPriorityQueue1(compare: ComparisonFunction<Chunk>) {\n  return new ChunkPriorityQueue(new PairingHeap1(compare), LinkedList1);\n}\n\nfunction tryToFreeCapacity(\n    size: number, capacity: AvailableCapacity, priorityTier: ChunkPriorityTier, priority: number,\n    evictionCandidates: Iterator<Chunk>, evict: (chunk: Chunk) => void) {\n  while (capacity.availableItems < 1 || capacity.availableSize < size) {\n    let evictionCandidate = evictionCandidates.next().value;\n    if (evictionCandidate === undefined) {\n      // No eviction candidates available, promotions are done.\n      return false;\n    } else {\n      let evictionTier = evictionCandidate.priorityTier;\n      if (evictionTier < priorityTier ||\n          (evictionTier === priorityTier && evictionCandidate.priority >= priority)) {\n        // Lowest priority eviction candidate has priority >= highest\n        // priority promotion candidate.  No more promotions are\n        // possible.\n        return false;\n      }\n      evict(evictionCandidate);\n    }\n  }\n  return true;\n}\n\n\nexport class ChunkQueueManager extends SharedObjectCounterpart {\n  gpuMemoryCapacity: AvailableCapacity;\n  systemMemoryCapacity: AvailableCapacity;\n  downloadCapacity: AvailableCapacity;\n\n  /**\n   * Contains all chunks in QUEUED state.\n   */\n  private queuedPromotionQueue = makeChunkPriorityQueue1(Chunk.priorityGreater);\n\n  /**\n   * Contains all chunks in DOWNLOADING state.\n   */\n  private downloadEvictionQueue = makeChunkPriorityQueue1(Chunk.priorityLess);\n\n  /**\n   * Contains all chunks that take up memory (DOWNLOADING, SYSTEM_MEMORY,\n   * GPU_MEMORY).\n   */\n  private systemMemoryEvictionQueue = makeChunkPriorityQueue0(Chunk.priorityLess);\n\n  /**\n   * Contains all chunks in SYSTEM_MEMORY state not in RECENT priority tier.\n   */\n  private gpuMemoryPromotionQueue = makeChunkPriorityQueue1(Chunk.priorityGreater);\n\n  /**\n   * Contains all chunks in GPU_MEMORY state.\n   */\n  private gpuMemoryEvictionQueue = makeChunkPriorityQueue1(Chunk.priorityLess);\n\n  private updatePending: number | null = null;\n\n  private numQueued = 0;\n  private numFailed = 0;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.gpuMemoryCapacity = AvailableCapacity.fromObject(options['gpuMemoryCapacity']);\n    this.systemMemoryCapacity = AvailableCapacity.fromObject(options['systemMemoryCapacity']);\n    this.downloadCapacity = AvailableCapacity.fromObject(options['downloadCapacity']);\n  }\n\n  scheduleUpdate() {\n    if (this.updatePending === null) {\n      this.updatePending = setTimeout(this.process.bind(this), 0);\n    }\n  }\n\n  * chunkQueuesForChunk(chunk: Chunk) {\n    switch (chunk.state) {\n      case ChunkState.QUEUED:\n        yield this.queuedPromotionQueue;\n        break;\n\n      case ChunkState.DOWNLOADING:\n        yield this.downloadEvictionQueue;\n        yield this.systemMemoryEvictionQueue;\n        break;\n\n      case ChunkState.SYSTEM_MEMORY_WORKER:\n      case ChunkState.SYSTEM_MEMORY:\n        yield this.systemMemoryEvictionQueue;\n        if (chunk.priorityTier !== ChunkPriorityTier.RECENT && !chunk.backendOnly) {\n          yield this.gpuMemoryPromotionQueue;\n        }\n        break;\n\n      case ChunkState.GPU_MEMORY:\n        yield this.systemMemoryEvictionQueue;\n        yield this.gpuMemoryEvictionQueue;\n        break;\n    }\n  }\n\n  adjustCapacitiesForChunk(chunk: Chunk, add: boolean) {\n    let factor = add ? -1 : 1;\n    switch (chunk.state) {\n      case ChunkState.FAILED:\n        this.numFailed -= factor;\n        break;\n\n      case ChunkState.QUEUED:\n        this.numQueued -= factor;\n        break;\n\n      case ChunkState.DOWNLOADING:\n        this.downloadCapacity.adjust(factor, 0);\n        this.systemMemoryCapacity.adjust(factor, 0);\n        break;\n\n      case ChunkState.SYSTEM_MEMORY:\n      case ChunkState.SYSTEM_MEMORY_WORKER:\n        this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);\n        break;\n\n      case ChunkState.GPU_MEMORY:\n        this.systemMemoryCapacity.adjust(factor, factor * chunk.systemMemoryBytes);\n        this.gpuMemoryCapacity.adjust(factor, factor * chunk.gpuMemoryBytes);\n        break;\n    }\n  }\n\n  private removeChunkFromQueues_(chunk: Chunk) {\n    for (let queue of this.chunkQueuesForChunk(chunk)) {\n      queue.delete(chunk);\n    }\n  }\n\n  // var freedChunks = 0;\n  private addChunkToQueues_(chunk: Chunk) {\n    if (chunk.state === ChunkState.QUEUED && chunk.priorityTier === ChunkPriorityTier.RECENT) {\n      // Delete this chunk.\n      let source = chunk.source;\n      source.removeChunk(chunk);\n      this.adjustCapacitiesForChunk(chunk, false);\n      return false;\n    } else {\n      for (let queue of this.chunkQueuesForChunk(chunk)) {\n        queue.add(chunk);\n      }\n      return true;\n    }\n  }\n\n  performChunkPriorityUpdate(chunk: Chunk) {\n    if (chunk.priorityTier === chunk.newPriorityTier && chunk.priority === chunk.newPriority) {\n      chunk.newPriorityTier = ChunkPriorityTier.RECENT;\n      chunk.newPriority = Number.NEGATIVE_INFINITY;\n      return;\n    }\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(`${chunk}: changed priority ${chunk.priorityTier}:${chunk.priority} -> ${chunk.newPriorityTier}:${chunk.newPriority}`);\n    }\n    this.removeChunkFromQueues_(chunk);\n    chunk.updatePriorityProperties();\n    if (chunk.state === ChunkState.NEW) {\n      chunk.state = ChunkState.QUEUED;\n      this.adjustCapacitiesForChunk(chunk, true);\n    }\n    this.addChunkToQueues_(chunk);\n  }\n\n  updateChunkState(chunk: Chunk, newState: ChunkState) {\n    if (newState === chunk.state) {\n      return;\n    }\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(`${chunk}: changed state ${chunk.state} -> ${newState}`);\n    }\n    this.adjustCapacitiesForChunk(chunk, false);\n    this.removeChunkFromQueues_(chunk);\n    chunk.state = newState;\n    this.adjustCapacitiesForChunk(chunk, true);\n    this.addChunkToQueues_(chunk);\n    this.scheduleUpdate();\n  }\n\n  private processGPUPromotions_() {\n    let queueManager = this;\n    function evictFromGPUMemory(chunk: Chunk) {\n      queueManager.freeChunkGPUMemory(chunk);\n      chunk.source.chunkManager.queueManager.updateChunkState(chunk, ChunkState.SYSTEM_MEMORY);\n    }\n    let promotionCandidates = this.gpuMemoryPromotionQueue.candidates();\n    let evictionCandidates = this.gpuMemoryEvictionQueue.candidates();\n    let capacity = this.gpuMemoryCapacity;\n    let visibleChunksChanged = false;\n    while (true) {\n      let promotionCandidate = promotionCandidates.next().value;\n      if (promotionCandidate === undefined) {\n        break;\n      } else {\n        let priorityTier = promotionCandidate.priorityTier;\n        let priority = promotionCandidate.priority;\n        if (!tryToFreeCapacity(\n                promotionCandidate.gpuMemoryBytes, capacity, priorityTier, priority,\n                evictionCandidates, evictFromGPUMemory)) {\n          break;\n        }\n        this.copyChunkToGPU(promotionCandidate);\n        this.updateChunkState(promotionCandidate, ChunkState.GPU_MEMORY);\n        if (priorityTier === ChunkPriorityTier.VISIBLE) {\n          visibleChunksChanged = true;\n        }\n      }\n    }\n  }\n\n  freeChunkGPUMemory(chunk: Chunk) {\n    rpc.invoke(\n        'Chunk.update',\n        {'id': chunk.key, 'state': ChunkState.SYSTEM_MEMORY, 'source': chunk.source.rpcId});\n  }\n\n  freeChunkSystemMemory(chunk: Chunk) {\n    if (chunk.state === ChunkState.SYSTEM_MEMORY_WORKER) {\n      rpc.invoke(\n          'Chunk.update',\n          {'id': chunk.key, 'state': ChunkState.EXPIRED, 'source': chunk.source.rpcId});\n    } else {\n      chunk.freeSystemMemory();\n    }\n  }\n\n  copyChunkToGPU(chunk: Chunk) {\n    if (chunk.state === ChunkState.SYSTEM_MEMORY) {\n      rpc.invoke(\n          'Chunk.update',\n          {'id': chunk.key, 'source': chunk.source.rpcId, 'state': ChunkState.GPU_MEMORY});\n    } else {\n      let msg: any = {};\n      let transfers: any[] = [];\n      chunk.serialize(msg, transfers);\n      msg['state'] = ChunkState.GPU_MEMORY;\n      rpc.invoke('Chunk.update', msg, transfers);\n    }\n  }\n\n  private processQueuePromotions_() {\n    let queueManager = this;\n    function evict(chunk: Chunk) {\n      switch (chunk.state) {\n        case ChunkState.DOWNLOADING:\n          chunk.cancelDownload();\n          break;\n        case ChunkState.GPU_MEMORY:\n          queueManager.freeChunkGPUMemory(chunk);\n        case ChunkState.SYSTEM_MEMORY_WORKER:\n        case ChunkState.SYSTEM_MEMORY:\n          queueManager.freeChunkSystemMemory(chunk);\n          break;\n      }\n      // Note: After calling this, chunk may no longer be valid.\n      chunk.source.chunkManager.queueManager.updateChunkState(chunk, ChunkState.QUEUED);\n    }\n    let promotionCandidates = this.queuedPromotionQueue.candidates();\n    let downloadEvictionCandidates = this.downloadEvictionQueue.candidates();\n    let systemMemoryEvictionCandidates = this.systemMemoryEvictionQueue.candidates();\n    let downloadCapacity = this.downloadCapacity;\n    let systemMemoryCapacity = this.systemMemoryCapacity;\n    while (true) {\n      let promotionCandidateResult = promotionCandidates.next();\n      if (promotionCandidateResult.done) {\n        return;\n      }\n      let promotionCandidate = promotionCandidateResult.value;\n      const size = 0; /* unknown size, since it hasn't been downloaded yet. */\n      let priorityTier = promotionCandidate.priorityTier;\n      let priority = promotionCandidate.priority;\n      // console.log(\"Download capacity: \" + downloadCapacity);\n      if (!tryToFreeCapacity(\n              size, downloadCapacity, priorityTier, priority, downloadEvictionCandidates, evict)) {\n        return;\n      }\n      if (!tryToFreeCapacity(\n              size, systemMemoryCapacity, priorityTier, priority, systemMemoryEvictionCandidates,\n              evict)) {\n        return;\n      }\n      this.updateChunkState(promotionCandidate, ChunkState.DOWNLOADING);\n      promotionCandidate.source.download(promotionCandidate);\n    }\n  }\n\n  process() {\n    if (!this.updatePending) {\n      return;\n    }\n    this.updatePending = null;\n    this.processGPUPromotions_();\n    this.processQueuePromotions_();\n    this.logStatistics();\n  }\n\n  logStatistics() {\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(\n          `[Chunk status] QUEUED: ${this.numQueued}, FAILED: ${this.numFailed}, DOWNLOAD: ${this.downloadCapacity}, MEM: ${this.systemMemoryCapacity}, GPU: ${this.gpuMemoryCapacity}`);\n    }\n  }\n};\nregisterSharedObject('ChunkQueueManager', ChunkQueueManager);\n\n\nexport class ChunkManager extends SharedObjectCounterpart {\n  queueManager: ChunkQueueManager;\n\n  /**\n   * Array of chunks within each existing priority tier.\n   */\n  private existingTierChunks: Chunk[][] = [];\n\n  /**\n   * Array of chunks whose new priorities have not yet been reflected in the\n   * queue states.\n   */\n  private newTierChunks: Chunk[] = [];\n\n  private updatePending: number = null;\n\n  recomputeChunkPriorities = new Signal();\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.queueManager = (<ChunkQueueManager>rpc.get(options['chunkQueueManager'])).addRef();\n\n    for (let tier = ChunkPriorityTier.FIRST_TIER; tier <= ChunkPriorityTier.LAST_TIER; ++tier) {\n      if (tier === ChunkPriorityTier.RECENT) {\n        continue;\n      }\n      this.existingTierChunks[tier] = [];\n    }\n  }\n\n  scheduleUpdateChunkPriorities() {\n    if (this.updatePending === null) {\n      this.updatePending = setTimeout(this.recomputeChunkPriorities_.bind(this), 0);\n    }\n  }\n\n  private recomputeChunkPriorities_() {\n    this.updatePending = null;\n    this.recomputeChunkPriorities.dispatch();\n    this.updateQueueState([ChunkPriorityTier.VISIBLE]);\n  };\n\n  /**\n   * @param chunk\n   * @param tier New priority tier.  Must not equal ChunkPriorityTier.RECENT.\n   * @param priority Priority within tier.\n   */\n  requestChunk(chunk: Chunk, tier: ChunkPriorityTier, priority: number) {\n    if (chunk.newPriorityTier === ChunkPriorityTier.RECENT) {\n      this.newTierChunks.push(chunk);\n    }\n    chunk.newPriorityTier = tier;\n    chunk.newPriority = priority;\n  }\n\n  /**\n   * Update queue state to reflect updated contents of the specified priority tiers.  Existing\n   * chunks within those tiers not present in this.newTierChunks will be moved to the RECENT tier\n   * (and removed if in the QUEUED state).\n   */\n  updateQueueState(tiers: ChunkPriorityTier[]) {\n    let existingTierChunks = this.existingTierChunks;\n    let queueManager = this.queueManager;\n    for (let tier of tiers) {\n      let chunks = existingTierChunks[tier];\n      for (let chunk of chunks) {\n        if (chunk.newPriorityTier === ChunkPriorityTier.RECENT) {\n          // Downgrade the priority of this chunk.\n          queueManager.performChunkPriorityUpdate(chunk);\n        }\n      }\n      chunks.length = 0;\n    }\n    let newTierChunks = this.newTierChunks;\n    for (let chunk of newTierChunks) {\n      queueManager.performChunkPriorityUpdate(chunk);\n      existingTierChunks[chunk.priorityTier].push(chunk);\n    }\n    if (DEBUG_CHUNK_UPDATES) {\n      console.log(`updateQueueState: newTierChunks.length = ${newTierChunks.length}`);\n    }\n    newTierChunks.length = 0;\n    this.queueManager.scheduleUpdate();\n  }\n};\nregisterSharedObject('ChunkManager', ChunkManager);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/chunk_manager/backend.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nexport enum ChunkState {\n  // Chunk is stored in GPU memory in addition to system memory.\n  GPU_MEMORY = 0,\n  // Chunk is stored only in system memory but not in GPU memory.\n  SYSTEM_MEMORY = 1,\n\n  // Chunk is stored in system memory on worker.\n  SYSTEM_MEMORY_WORKER = 2,\n\n  // Chunk is downloading.\n  DOWNLOADING = 3,\n  // Chunk is not yet downloading.\n  QUEUED = 4,\n\n  // Chunk has just been added.\n  NEW = 5,\n\n  // Download failed.\n  FAILED = 6,\n\n  EXPIRED = 7\n};\n\nexport enum ChunkPriorityTier {\n  FIRST_TIER = 0,\n  FIRST_ORDERED_TIER = 0,\n  VISIBLE = 0,\n  PREFETCH = 1,\n  LAST_ORDERED_TIER = 1,\n  RECENT = 2,\n  LAST_TIER = 2\n};\n\nexport class AvailableCapacity {\n  availableItems: number;\n  itemCapacity: number;\n  availableSize: number;\n  sizeCapacity: number;\n\n  constructor(maxItems: number, maxSize: number) {\n    /**\n     * Number of additional items that are available.\n     */\n    this.availableItems = maxItems;\n\n    /**\n     * Total number of items that can be accomodated.\n     */\n    this.itemCapacity = maxItems;\n\n    /**\n     * Aggregate additional size capacity that is available.\n     */\n    this.availableSize = maxSize;\n\n    /**\n     * Total aggregate item size that can be accomodated.\n     */\n    this.sizeCapacity = maxSize;\n  }\n\n  /**\n   * Adjust available capacity by the specified amounts.\n   */\n  adjust(items: number, size: number) {\n    this.availableItems += items;\n    this.availableSize += size;\n  }\n\n  toString() { return `${this.availableItems}/${this.itemCapacity} items, ${this.availableSize}/${this.sizeCapacity} size`; }\n\n  toObject() {\n    return {'itemCapacity': this.itemCapacity, 'sizeCapacity': this.sizeCapacity};\n  }\n\n  static fromObject(x: any) {\n    return new AvailableCapacity(x['itemCapacity'], x['sizeCapacity']);\n  }\n\n  static INFINITE = new AvailableCapacity(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/chunk_manager/base.ts\n **/","/*jslint onevar:true, undef:true, newcap:true, regexp:true, bitwise:true, maxerr:50, indent:4, white:false, nomen:false, plusplus:false */\n/*global define:false, require:false, exports:false, module:false, signals:false */\n\n/** @license\n * JS Signals <http://millermedeiros.github.com/js-signals/>\n * Released under the MIT license\n * Author: Miller Medeiros\n * Version: 1.0.0 - Build: 268 (2012/11/29 05:48 PM)\n */\n\n(function(global){\n\n    // SignalBinding -------------------------------------------------\n    //================================================================\n\n    /**\n     * Object that represents a binding between a Signal and a listener function.\n     * <br />- <strong>This is an internal constructor and shouldn't be called by regular users.</strong>\n     * <br />- inspired by Joa Ebert AS3 SignalBinding and Robert Penner's Slot classes.\n     * @author Miller Medeiros\n     * @constructor\n     * @internal\n     * @name SignalBinding\n     * @param {Signal} signal Reference to Signal object that listener is currently bound to.\n     * @param {Function} listener Handler function bound to the signal.\n     * @param {boolean} isOnce If binding should be executed just once.\n     * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n     * @param {Number} [priority] The priority level of the event listener. (default = 0).\n     */\n    function SignalBinding(signal, listener, isOnce, listenerContext, priority) {\n\n        /**\n         * Handler function bound to the signal.\n         * @type Function\n         * @private\n         */\n        this._listener = listener;\n\n        /**\n         * If binding should be executed just once.\n         * @type boolean\n         * @private\n         */\n        this._isOnce = isOnce;\n\n        /**\n         * Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n         * @memberOf SignalBinding.prototype\n         * @name context\n         * @type Object|undefined|null\n         */\n        this.context = listenerContext;\n\n        /**\n         * Reference to Signal object that listener is currently bound to.\n         * @type Signal\n         * @private\n         */\n        this._signal = signal;\n\n        /**\n         * Listener priority\n         * @type Number\n         * @private\n         */\n        this._priority = priority || 0;\n    }\n\n    SignalBinding.prototype = {\n\n        /**\n         * If binding is active and should be executed.\n         * @type boolean\n         */\n        active : true,\n\n        /**\n         * Default parameters passed to listener during `Signal.dispatch` and `SignalBinding.execute`. (curried parameters)\n         * @type Array|null\n         */\n        params : null,\n\n        /**\n         * Call listener passing arbitrary parameters.\n         * <p>If binding was added using `Signal.addOnce()` it will be automatically removed from signal dispatch queue, this method is used internally for the signal dispatch.</p>\n         * @param {Array} [paramsArr] Array of parameters that should be passed to the listener\n         * @return {*} Value returned by the listener.\n         */\n        execute : function (paramsArr) {\n            var handlerReturn, params;\n            if (this.active && !!this._listener) {\n                params = this.params? this.params.concat(paramsArr) : paramsArr;\n                handlerReturn = this._listener.apply(this.context, params);\n                if (this._isOnce) {\n                    this.detach();\n                }\n            }\n            return handlerReturn;\n        },\n\n        /**\n         * Detach binding from signal.\n         * - alias to: mySignal.remove(myBinding.getListener());\n         * @return {Function|null} Handler function bound to the signal or `null` if binding was previously detached.\n         */\n        detach : function () {\n            return this.isBound()? this._signal.remove(this._listener, this.context) : null;\n        },\n\n        /**\n         * @return {Boolean} `true` if binding is still bound to the signal and have a listener.\n         */\n        isBound : function () {\n            return (!!this._signal && !!this._listener);\n        },\n\n        /**\n         * @return {boolean} If SignalBinding will only be executed once.\n         */\n        isOnce : function () {\n            return this._isOnce;\n        },\n\n        /**\n         * @return {Function} Handler function bound to the signal.\n         */\n        getListener : function () {\n            return this._listener;\n        },\n\n        /**\n         * @return {Signal} Signal that listener is currently bound to.\n         */\n        getSignal : function () {\n            return this._signal;\n        },\n\n        /**\n         * Delete instance properties\n         * @private\n         */\n        _destroy : function () {\n            delete this._signal;\n            delete this._listener;\n            delete this.context;\n        },\n\n        /**\n         * @return {string} String representation of the object.\n         */\n        toString : function () {\n            return '[SignalBinding isOnce:' + this._isOnce +', isBound:'+ this.isBound() +', active:' + this.active + ']';\n        }\n\n    };\n\n\n/*global SignalBinding:false*/\n\n    // Signal --------------------------------------------------------\n    //================================================================\n\n    function validateListener(listener, fnName) {\n        if (typeof listener !== 'function') {\n            throw new Error( 'listener is a required param of {fn}() and should be a Function.'.replace('{fn}', fnName) );\n        }\n    }\n\n    /**\n     * Custom event broadcaster\n     * <br />- inspired by Robert Penner's AS3 Signals.\n     * @name Signal\n     * @author Miller Medeiros\n     * @constructor\n     */\n    function Signal() {\n        /**\n         * @type Array.<SignalBinding>\n         * @private\n         */\n        this._bindings = [];\n        this._prevParams = null;\n\n        // enforce dispatch to aways work on same context (#47)\n        var self = this;\n        this.dispatch = function(){\n            Signal.prototype.dispatch.apply(self, arguments);\n        };\n    }\n\n    Signal.prototype = {\n\n        /**\n         * Signals Version Number\n         * @type String\n         * @const\n         */\n        VERSION : '1.0.0',\n\n        /**\n         * If Signal should keep record of previously dispatched parameters and\n         * automatically execute listener during `add()`/`addOnce()` if Signal was\n         * already dispatched before.\n         * @type boolean\n         */\n        memorize : false,\n\n        /**\n         * @type boolean\n         * @private\n         */\n        _shouldPropagate : true,\n\n        /**\n         * If Signal is active and should broadcast events.\n         * <p><strong>IMPORTANT:</strong> Setting this property during a dispatch will only affect the next dispatch, if you want to stop the propagation of a signal use `halt()` instead.</p>\n         * @type boolean\n         */\n        active : true,\n\n        /**\n         * @param {Function} listener\n         * @param {boolean} isOnce\n         * @param {Object} [listenerContext]\n         * @param {Number} [priority]\n         * @return {SignalBinding}\n         * @private\n         */\n        _registerListener : function (listener, isOnce, listenerContext, priority) {\n\n            var prevIndex = this._indexOfListener(listener, listenerContext),\n                binding;\n\n            if (prevIndex !== -1) {\n                binding = this._bindings[prevIndex];\n                if (binding.isOnce() !== isOnce) {\n                    throw new Error('You cannot add'+ (isOnce? '' : 'Once') +'() then add'+ (!isOnce? '' : 'Once') +'() the same listener without removing the relationship first.');\n                }\n            } else {\n                binding = new SignalBinding(this, listener, isOnce, listenerContext, priority);\n                this._addBinding(binding);\n            }\n\n            if(this.memorize && this._prevParams){\n                binding.execute(this._prevParams);\n            }\n\n            return binding;\n        },\n\n        /**\n         * @param {SignalBinding} binding\n         * @private\n         */\n        _addBinding : function (binding) {\n            //simplified insertion sort\n            var n = this._bindings.length;\n            do { --n; } while (this._bindings[n] && binding._priority <= this._bindings[n]._priority);\n            this._bindings.splice(n + 1, 0, binding);\n        },\n\n        /**\n         * @param {Function} listener\n         * @return {number}\n         * @private\n         */\n        _indexOfListener : function (listener, context) {\n            var n = this._bindings.length,\n                cur;\n            while (n--) {\n                cur = this._bindings[n];\n                if (cur._listener === listener && cur.context === context) {\n                    return n;\n                }\n            }\n            return -1;\n        },\n\n        /**\n         * Check if listener was attached to Signal.\n         * @param {Function} listener\n         * @param {Object} [context]\n         * @return {boolean} if Signal has the specified listener.\n         */\n        has : function (listener, context) {\n            return this._indexOfListener(listener, context) !== -1;\n        },\n\n        /**\n         * Add a listener to the signal.\n         * @param {Function} listener Signal handler function.\n         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)\n         * @return {SignalBinding} An Object representing the binding between the Signal and listener.\n         */\n        add : function (listener, listenerContext, priority) {\n            validateListener(listener, 'add');\n            return this._registerListener(listener, false, listenerContext, priority);\n        },\n\n        /**\n         * Add listener to the signal that should be removed after first execution (will be executed only once).\n         * @param {Function} listener Signal handler function.\n         * @param {Object} [listenerContext] Context on which listener will be executed (object that should represent the `this` variable inside listener function).\n         * @param {Number} [priority] The priority level of the event listener. Listeners with higher priority will be executed before listeners with lower priority. Listeners with same priority level will be executed at the same order as they were added. (default = 0)\n         * @return {SignalBinding} An Object representing the binding between the Signal and listener.\n         */\n        addOnce : function (listener, listenerContext, priority) {\n            validateListener(listener, 'addOnce');\n            return this._registerListener(listener, true, listenerContext, priority);\n        },\n\n        /**\n         * Remove a single listener from the dispatch queue.\n         * @param {Function} listener Handler function that should be removed.\n         * @param {Object} [context] Execution context (since you can add the same handler multiple times if executing in a different context).\n         * @return {Function} Listener handler function.\n         */\n        remove : function (listener, context) {\n            validateListener(listener, 'remove');\n\n            var i = this._indexOfListener(listener, context);\n            if (i !== -1) {\n                this._bindings[i]._destroy(); //no reason to a SignalBinding exist if it isn't attached to a signal\n                this._bindings.splice(i, 1);\n            }\n            return listener;\n        },\n\n        /**\n         * Remove all listeners from the Signal.\n         */\n        removeAll : function () {\n            var n = this._bindings.length;\n            while (n--) {\n                this._bindings[n]._destroy();\n            }\n            this._bindings.length = 0;\n        },\n\n        /**\n         * @return {number} Number of listeners attached to the Signal.\n         */\n        getNumListeners : function () {\n            return this._bindings.length;\n        },\n\n        /**\n         * Stop propagation of the event, blocking the dispatch to next listeners on the queue.\n         * <p><strong>IMPORTANT:</strong> should be called only during signal dispatch, calling it before/after dispatch won't affect signal broadcast.</p>\n         * @see Signal.prototype.disable\n         */\n        halt : function () {\n            this._shouldPropagate = false;\n        },\n\n        /**\n         * Dispatch/Broadcast Signal to all listeners added to the queue.\n         * @param {...*} [params] Parameters that should be passed to each handler.\n         */\n        dispatch : function (params) {\n            if (! this.active) {\n                return;\n            }\n\n            var paramsArr = Array.prototype.slice.call(arguments),\n                n = this._bindings.length,\n                bindings;\n\n            if (this.memorize) {\n                this._prevParams = paramsArr;\n            }\n\n            if (! n) {\n                //should come after memorize\n                return;\n            }\n\n            bindings = this._bindings.slice(); //clone array in case add/remove items during dispatch\n            this._shouldPropagate = true; //in case `halt` was called before dispatch or during the previous dispatch.\n\n            //execute all callbacks until end of the list or until a callback returns `false` or stops propagation\n            //reverse loop since listeners with higher priority will be added at the end of the list\n            do { n--; } while (bindings[n] && this._shouldPropagate && bindings[n].execute(paramsArr) !== false);\n        },\n\n        /**\n         * Forget memorized arguments.\n         * @see Signal.memorize\n         */\n        forget : function(){\n            this._prevParams = null;\n        },\n\n        /**\n         * Remove all bindings from signal and destroy any reference to external objects (destroy Signal object).\n         * <p><strong>IMPORTANT:</strong> calling any method on the signal instance after calling dispose will throw errors.</p>\n         */\n        dispose : function () {\n            this.removeAll();\n            delete this._bindings;\n            delete this._prevParams;\n        },\n\n        /**\n         * @return {string} String representation of the object.\n         */\n        toString : function () {\n            return '[Signal active:'+ this.active +' numListeners:'+ this.getNumListeners() +']';\n        }\n\n    };\n\n\n    // Namespace -----------------------------------------------------\n    //================================================================\n\n    /**\n     * Signals namespace\n     * @namespace\n     * @name signals\n     */\n    var signals = Signal;\n\n    /**\n     * Custom event broadcaster\n     * @see Signal\n     */\n    // alias for backwards compatibility (see #gh-44)\n    signals.Signal = Signal;\n\n\n\n    //exports to multiple environments\n    if(typeof define === 'function' && define.amd){ //AMD\n        define(function () { return signals; });\n    } else if (typeof module !== 'undefined' && module.exports){ //node\n        module.exports = signals;\n    } else { //browser\n        //use string because of Google closure compiler ADVANCED_MODE\n        /*jslint sub:true */\n        global['signals'] = signals;\n    }\n\n}(this));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/signals/dist/signals.js\n ** module id = 6\n ** module chunks = 0\n **/","// DO NOT EDIT.  Generated from templates/neuroglancer/util/pairing_heap.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {PairingHeapOperations} from 'neuroglancer/util/pairing_heap';\n\ninterface Node<T> {\n  child0: T | null;\n  next0: T | null;\n  prev0: T | null;\n}\n\n/**\n * Pairing heap.\n *\n * The root node is the minimum element according to comparator.\n *\n * @final\n */\nexport default class Implementation<T extends Node<T>> implements\n    PairingHeapOperations<T> {\n  /**\n   * @param compare Returns true iff a < b.\n   */\n  constructor(public compare: (a: T, b: T) => boolean) {}\n\n  meld(a: T | null, b: T | null) {\n    if (b === null) {\n      return a;\n    }\n    if (a === null) {\n      return b;\n    }\n    let {compare} = this;\n    if (compare(b, a)) {\n      let temp = a;\n      a = b;\n      b = temp;\n    }\n    var aChild = a.child0;\n    b.next0 = aChild;\n    b.prev0 = a;\n    if (aChild !== null) {\n      aChild.prev0 = b;\n    }\n    a.child0 = b;\n    return a;\n  }\n  private combineChildren(node: T) {\n    var cur = node.child0;\n    if (cur === null) {\n      return null;\n    }\n    // While in this function, we will use the nextProperty to create a\n    // singly-linked list of pairwise-merged nodes that still need to be\n    // merged together.\n    let head: T = null;\n    while (true) {\n      let curNext = cur.next0;\n      let next: T, m: T;\n      if (curNext === null) {\n        next = null;\n        m = cur;\n      } else {\n        next = curNext.next0;\n        m = this.meld(cur, curNext);\n      }\n      m.next0 = head;\n      head = m;\n      if (next === null) {\n        break;\n      }\n      cur = next;\n    }\n\n    var root = head;\n    head = head.next0;\n    while (true) {\n      if (head === null) {\n        break;\n      }\n      let next = head.next0;\n      root = this.meld(root, head);\n      head = next;\n    }\n    root.prev0 = null;\n    root.next0 = null;\n    return root;\n  }\n  removeMin(root: T) {\n    var newRoot = this.combineChildren(root);\n    root.next0 = null;\n    root.prev0 = null;\n    root.child0 = null;\n    return newRoot;\n  }\n\n  remove(root: T, node: T) {\n    if (root === node) {\n      return this.removeMin(root);\n    }\n    var prev = node.prev0;\n    var next = node.next0;\n    if (prev.child0 === node) {\n      prev.child0 = next;\n    } else {\n      prev.next0 = next;\n    }\n    if (next !== null) {\n      next.prev0 = prev;\n    }\n    root = this.meld(root, this.combineChildren(node));\n    node.next0 = null;\n    node.prev0 = null;\n    node.child0 = null;\n    return root;\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.\n   */\n  * entries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child0;\n      yield root;\n      while (child !== null) {\n        let next = child.next0;\n        yield * this.entries(child);\n        child = next;\n      }\n    }\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.  The entries\n   * will be removed as they are iterated.\n   */\n  * removedEntries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child0;\n      root.child0 = null;\n      root.next0 = null;\n      root.prev0 = null;\n      yield root;\n      while (child !== null) {\n        let next = child.next0;\n        child.child0 = null;\n        child.next0 = null;\n        child.prev0 = null;\n        yield * this.entries(child);\n        child = next;\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/pairing_heap.0.ts\n **/","// DO NOT EDIT.  Generated from templates/neuroglancer/util/pairing_heap.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {PairingHeapOperations} from 'neuroglancer/util/pairing_heap';\n\ninterface Node<T> {\n  child1: T | null;\n  next1: T | null;\n  prev1: T | null;\n}\n\n/**\n * Pairing heap.\n *\n * The root node is the minimum element according to comparator.\n *\n * @final\n */\nexport default class Implementation<T extends Node<T>> implements\n    PairingHeapOperations<T> {\n  /**\n   * @param compare Returns true iff a < b.\n   */\n  constructor(public compare: (a: T, b: T) => boolean) {}\n\n  meld(a: T | null, b: T | null) {\n    if (b === null) {\n      return a;\n    }\n    if (a === null) {\n      return b;\n    }\n    let {compare} = this;\n    if (compare(b, a)) {\n      let temp = a;\n      a = b;\n      b = temp;\n    }\n    var aChild = a.child1;\n    b.next1 = aChild;\n    b.prev1 = a;\n    if (aChild !== null) {\n      aChild.prev1 = b;\n    }\n    a.child1 = b;\n    return a;\n  }\n  private combineChildren(node: T) {\n    var cur = node.child1;\n    if (cur === null) {\n      return null;\n    }\n    // While in this function, we will use the nextProperty to create a\n    // singly-linked list of pairwise-merged nodes that still need to be\n    // merged together.\n    let head: T = null;\n    while (true) {\n      let curNext = cur.next1;\n      let next: T, m: T;\n      if (curNext === null) {\n        next = null;\n        m = cur;\n      } else {\n        next = curNext.next1;\n        m = this.meld(cur, curNext);\n      }\n      m.next1 = head;\n      head = m;\n      if (next === null) {\n        break;\n      }\n      cur = next;\n    }\n\n    var root = head;\n    head = head.next1;\n    while (true) {\n      if (head === null) {\n        break;\n      }\n      let next = head.next1;\n      root = this.meld(root, head);\n      head = next;\n    }\n    root.prev1 = null;\n    root.next1 = null;\n    return root;\n  }\n  removeMin(root: T) {\n    var newRoot = this.combineChildren(root);\n    root.next1 = null;\n    root.prev1 = null;\n    root.child1 = null;\n    return newRoot;\n  }\n\n  remove(root: T, node: T) {\n    if (root === node) {\n      return this.removeMin(root);\n    }\n    var prev = node.prev1;\n    var next = node.next1;\n    if (prev.child1 === node) {\n      prev.child1 = next;\n    } else {\n      prev.next1 = next;\n    }\n    if (next !== null) {\n      next.prev1 = prev;\n    }\n    root = this.meld(root, this.combineChildren(node));\n    node.next1 = null;\n    node.prev1 = null;\n    node.child1 = null;\n    return root;\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.\n   */\n  * entries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child1;\n      yield root;\n      while (child !== null) {\n        let next = child.next1;\n        yield * this.entries(child);\n        child = next;\n      }\n    }\n  }\n\n  /**\n   * Returns a new iterator over the entries in the heap.  The entries\n   * will be removed as they are iterated.\n   */\n  * removedEntries(root: T): IterableIterator<T> {\n    if (root !== null) {\n      let child = root.child1;\n      root.child1 = null;\n      root.next1 = null;\n      root.prev1 = null;\n      yield root;\n      while (child !== null) {\n        let next = child.next1;\n        child.child1 = null;\n        child.next1 = null;\n        child.prev1 = null;\n        yield * this.entries(child);\n        child = next;\n      }\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/pairing_heap.1.ts\n **/","// DO NOT EDIT.  Generated from templates/neuroglancer/util/linked_list.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninterface Node<T> {\n  next0: T | null;\n  prev0: T | null;\n}\n\nexport default class {\n  static insertAfter<T extends Node<T>>(head: T, x: T) {\n    let next = <T>head.next0;\n    x.next0 = next;\n    x.prev0 = head;\n    head.next0 = x;\n    next.prev0 = x;\n  }\n  static insertBefore<T extends Node<T>>(head: T, x: T) {\n    let prev = <T>head.prev0;\n    x.prev0 = prev;\n    x.next0 = head;\n    head.prev0 = x;\n    prev.next0 = x;\n  }\n  static front<T extends Node<T>>(head: T) {\n    let next = head.next0;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static back<T extends Node<T>>(head: T) {\n    let next = head.prev0;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static pop<T extends Node<T>>(x: T) {\n    let next = <T>x.next0;\n    let prev = <T>x.prev0;\n    next.prev0 = prev;\n    prev.next0 = next;\n    x.next0 = null;\n    x.prev0 = null;\n    return x;\n  }\n  static * iterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.next0; x !== head; x = <T>x.next0) {\n      yield x;\n    }\n  }\n  static * reverseIterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.prev0; x !== head; x = <T>x.prev0) {\n      yield x;\n    }\n  }\n  static initializeHead<T extends Node<T>>(head: T) {\n    head.next0 = head.prev0 = head;\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/linked_list.0.ts\n **/","// DO NOT EDIT.  Generated from templates/neuroglancer/util/linked_list.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ninterface Node<T> {\n  next1: T | null;\n  prev1: T | null;\n}\n\nexport default class {\n  static insertAfter<T extends Node<T>>(head: T, x: T) {\n    let next = <T>head.next1;\n    x.next1 = next;\n    x.prev1 = head;\n    head.next1 = x;\n    next.prev1 = x;\n  }\n  static insertBefore<T extends Node<T>>(head: T, x: T) {\n    let prev = <T>head.prev1;\n    x.prev1 = prev;\n    x.next1 = head;\n    head.prev1 = x;\n    prev.next1 = x;\n  }\n  static front<T extends Node<T>>(head: T) {\n    let next = head.next1;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static back<T extends Node<T>>(head: T) {\n    let next = head.prev1;\n    if (next === head) {\n      return null;\n    }\n    return next;\n  }\n  static pop<T extends Node<T>>(x: T) {\n    let next = <T>x.next1;\n    let prev = <T>x.prev1;\n    next.prev1 = prev;\n    prev.next1 = next;\n    x.next1 = null;\n    x.prev1 = null;\n    return x;\n  }\n  static * iterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.next1; x !== head; x = <T>x.next1) {\n      yield x;\n    }\n  }\n  static * reverseIterator<T extends Node<T>>(head: T) {\n    for (let x = <T>head.prev1; x !== head; x = <T>x.prev1) {\n      yield x;\n    }\n  }\n  static initializeHead<T extends Node<T>>(head: T) {\n    head.next1 = head.prev1 = head;\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/linked_list.1.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {SliceViewBase, VolumeChunkSource as VolumeChunkSourceInterface, VolumeChunkSpecification, RenderLayer as RenderLayerInterface} from 'neuroglancer/sliceview/base';\nimport {RPC, SharedObjectCounterpart, registerSharedObject, registerRPC} from 'neuroglancer/worker_rpc';\nimport {ChunkManager, ChunkSource, Chunk} from 'neuroglancer/chunk_manager/backend';\nimport {vec3, Vec3, vec3Key} from 'neuroglancer/util/geom';\nimport {ChunkLayout} from 'neuroglancer/sliceview/chunk_layout';\nimport {ChunkPriorityTier} from 'neuroglancer/chunk_manager/base';\nimport {Signal} from 'signals';\nimport {CancellablePromise} from 'neuroglancer/util/promise';\n\nconst SCALE_PRIORITY_MULTIPLIER = 1e5;\n\n// Temporary values used by SliceView.updateVisibleChunk and VolumeChunkSource.computeChunkPosition.\nconst tempChunkPosition = vec3.create();\nconst tempChunkDataSize = vec3.create();\n\nexport class SliceView extends SliceViewBase {\n  chunkManager: ChunkManager;\n\n  visibleLayers: Map<RenderLayer, VolumeChunkSource[]>;\n\n  constructor(rpc: RPC, options: any) {\n    super();\n    this.initializeSharedObject(rpc, options['id']);\n    this.chunkManager = this.registerDisposer((<ChunkManager>rpc.get(options['chunkManager'])).addRef());\n    this.registerSignalBinding(\n      this.chunkManager.recomputeChunkPriorities.add(this.updateVisibleChunks, this));\n  }\n\n  onViewportChanged() { this.chunkManager.scheduleUpdateChunkPriorities(); }\n\n  handleLayerChanged() {\n    if (this.hasValidViewport) {\n      this.chunkManager.scheduleUpdateChunkPriorities();\n    }\n  }\n\n  updateVisibleChunks() {\n    let center = this.centerDataPosition;\n    let chunkManager = this.chunkManager;\n\n    let getLayoutObject =\n        (chunkLayout: ChunkLayout) => { return this.visibleChunkLayouts.get(chunkLayout); };\n\n    function addChunk(\n        chunkLayout: ChunkLayout, sources: Map<VolumeChunkSource, number>, positionInChunks: Vec3,\n        visibleSources: VolumeChunkSource[]) {\n      vec3.multiply(tempChunkPosition, positionInChunks, chunkLayout.size);\n      vec3.add(tempChunkPosition, tempChunkPosition, chunkLayout.offset);\n      let priority = -vec3.distance(center, tempChunkPosition);\n      for (let source of visibleSources) {\n        let priorityIndex = sources.get(source);\n        let chunk = source.getChunk(positionInChunks);\n        chunkManager.requestChunk(\n            chunk, ChunkPriorityTier.VISIBLE, priority - SCALE_PRIORITY_MULTIPLIER * priorityIndex);\n      }\n    }\n    this.computeVisibleChunks(getLayoutObject, addChunk);\n  }\n\n  removeVisibleLayer(layer: RenderLayer) {\n    this.visibleLayers.delete(layer);\n    layer.layerChanged.remove(this.handleLayerChanged, this);\n    this.visibleSourcesStale = true;\n    if (this.hasValidViewport) {\n      this.chunkManager.scheduleUpdateChunkPriorities();\n    }\n  }\n\n  disposed () {\n    for (let layer of this.visibleLayers.keys()) {\n      this.removeVisibleLayer(layer);\n    }\n  }\n};\nregisterSharedObject('SliceView', SliceView);\n\nregisterRPC('SliceView.updateView', function(x) {\n  let obj = this.get(x.id);\n  if (x.width) {\n    obj.setViewportSize(x.width, x.height);\n  }\n  if (x.viewportToData) {\n    obj.setViewportToDataMatrix(x.viewportToData);\n  }\n});\nregisterRPC('SliceView.addVisibleLayer', function(x) {\n  let obj = <SliceView>this.get(x['id']);\n  let layer = <RenderLayer>this.get(x['layerId']);\n  obj.visibleLayers.set(layer, []);\n  layer.layerChanged.add(obj.handleLayerChanged, obj);\n  obj.visibleSourcesStale = true;\n  if (obj.hasValidViewport) {\n    obj.chunkManager.scheduleUpdateChunkPriorities();\n  }\n});\nregisterRPC('SliceView.removeVisibleLayer', function(x) {\n  let obj = <SliceView>this.get(x['id']);\n  let layer = <RenderLayer>this.get(x['layerId']);\n  obj.removeVisibleLayer(layer);\n});\n\nexport class VolumeChunk extends Chunk {\n  chunkGridPosition: Vec3;\n  source: VolumeChunkSource = null;\n  chunkDataSize: Vec3;\n  data: ArrayBufferView;\n  constructor() {\n    super();\n    this.chunkGridPosition = vec3.create();\n  }\n\n  initializeVolumeChunk(key: string, chunkGridPosition: Vec3) {\n    super.initialize(key);\n\n    let source = this.source;\n\n    /**\n     * Grid position within chunk layout (coordinates are in units of chunks).\n     */\n    vec3.copy(this.chunkGridPosition, chunkGridPosition);\n    this.systemMemoryBytes = source.spec.chunkBytes;\n    this.gpuMemoryBytes = source.spec.chunkBytes;\n\n    this.chunkDataSize = null;\n    this.data = null;\n  }\n\n  serialize(msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    let data = msg['data'] = this.data;\n    let chunkDataSize = this.chunkDataSize;\n    if (chunkDataSize !== this.source.spec.chunkDataSize) {\n      msg['chunkDataSize'] = chunkDataSize;\n    }\n    msg['chunkGridPosition'] = this.chunkGridPosition;\n    transfers.push(data.buffer);\n    this.data = null;\n    // console.log(`Serializing chunk ${this.source.rpcId}:${this.key} with\n    // chunkDataSize = ${this.chunkDataSize}`);\n  }\n\n  downloadSucceeded () {\n    this.systemMemoryBytes = this.gpuMemoryBytes = this.data.byteLength;\n    super.downloadSucceeded();\n  }\n\n  freeSystemMemory() { this.data = null; }\n  toString() { return this.source.toString() + ':' + vec3Key(this.chunkGridPosition); }\n};\n\nexport class VolumeChunkSource extends ChunkSource implements VolumeChunkSourceInterface {\n  spec: VolumeChunkSpecification;\n  baseVoxelOffset = vec3.create();\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    let spec = this.spec = VolumeChunkSpecification.fromObject(options['spec']);\n    let {baseVoxelOffset} = this;\n    let chunkOffset = spec.chunkLayout.offset;\n    let {voxelSize} = spec;\n    for (let i = 0; i < 3; ++i) {\n      baseVoxelOffset[i] = Math.round(chunkOffset[i] / voxelSize[i]);\n    }\n  }\n\n  getChunk(chunkGridPosition: Vec3) {\n    let key = vec3Key(chunkGridPosition);\n    let chunk = <VolumeChunk>this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(VolumeChunk);\n      chunk.initializeVolumeChunk(key, chunkGridPosition);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  /**\n   * Helper function for computing the voxel bounds of a chunk based on its chunkGridPosition.\n   *\n   * This assumes that the grid of chunk positions starts at this.baseVoxelOffset.  Chunks are\n   * clipped to lie within upperVoxelBound, but are not clipped to lie within lowerVoxelBound.  (The\n   * frontend code currently cannot handle chunks clipped at their lower corner, and the chunk\n   * layout can generally be chosen so that lowerVoxelBound lies on a chunk boundary.)\n   *\n   * This sets chunk.chunkDataSize to a copy of the returned chunkDataSize if it differs from\n   * this.spec.chunkDataSize; otherwise, it is set to this.spec.chunkDataSize.\n   *\n   * @returns A globally-allocated Vec3 containing the chunk corner position in voxel coordinates.\n   * The returned Vec3 will be invalidated by any subsequent call to this method, even on a\n   * different VolumeChunkSource instance.\n   */\n  computeChunkBounds(chunk: VolumeChunk) {\n    let {spec} = this;\n    let {upperVoxelBound} = spec;\n\n    let origChunkDataSize = spec.chunkDataSize;\n    let newChunkDataSize = tempChunkDataSize;\n\n    // Chunk start position in voxel coordinates.\n    let chunkPosition =\n        vec3.multiply(tempChunkPosition, chunk.chunkGridPosition, origChunkDataSize);\n    vec3.add(chunkPosition, chunkPosition, this.baseVoxelOffset);\n\n    // Specifies whether the chunk only partially fits within the data bounds.\n    let partial = false;\n    for (let i = 0; i < 3; ++i) {\n      let upper = Math.min(upperVoxelBound[i], chunkPosition[i] + origChunkDataSize[i]);\n      let size = newChunkDataSize[i] = upper - chunkPosition[i];\n      if (size !== origChunkDataSize[i]) {\n        partial = true;\n      }\n    }\n\n    if (partial) {\n      chunk.chunkDataSize = vec3.clone(newChunkDataSize);\n    } else {\n      chunk.chunkDataSize = origChunkDataSize;\n    }\n\n    return chunkPosition;\n  }\n};\n\nexport class RenderLayer extends SharedObjectCounterpart implements RenderLayerInterface {\n  rpcId: number;\n  sources: VolumeChunkSource[][];\n  equivalences: string|undefined;\n  layerChanged = new Signal();\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.equivalences = options['equivalences'];\n    let sources = this.sources = new Array<VolumeChunkSource[]>();\n    for (let alternativeIds of options['sources']) {\n      let alternatives = new Array<VolumeChunkSource>();\n      sources.push(alternatives);\n      for (let sourceId of alternativeIds) {\n        let source: VolumeChunkSource = rpc.get(sourceId);\n        this.registerDisposer(source.addRef());\n        alternatives.push(source);\n      }\n    }\n  }\n};\nregisterSharedObject('sliceview/RenderLayer', RenderLayer);\n\nregisterRPC('sliceview/RenderLayer:updateEquivalences', function (x) {\n  let obj = <RenderLayer>this.get(x['id']);\n  let newValue = x['equivalences'];\n  if (newValue !== obj.equivalences) {\n    obj.equivalences = x['equivalences'];\n    obj.layerChanged.dispatch();\n  }\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/backend.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {ChunkLayout} from 'neuroglancer/sliceview/chunk_layout';\nimport {prod3, Vec3, vec3, vec4, mat4, Mat4} from 'neuroglancer/util/geom';\nimport {approxEqual} from 'neuroglancer/util/compare';\nimport {partitionArray} from 'neuroglancer/util/array';\nimport {SharedObject} from 'neuroglancer/worker_rpc';\nimport {kZeroVec, kAxes} from 'neuroglancer/util/geom';\n\nconst DEBUG_CHUNK_INTERSECTIONS = false;\n\n/**\n * Heuristic estimate of the slice area contained within a chunk of the\n * specified size.\n */\nfunction estimateSliceAreaPerChunk(xAxis: Vec3, yAxis: Vec3, chunkSize: Vec3) {\n  let w = 0;\n  let h = w;\n  for (let i = 0; i < 3; ++i) {\n    let chunkSizeValue = chunkSize[i];\n    w = Math.max(w, chunkSizeValue * Math.abs(xAxis[i]));\n    h = Math.max(h, chunkSizeValue * Math.abs(yAxis[i]));\n  }\n  return w * h;\n}\n\n/**\n * All valid chunks are in the range [lowerBound, upperBound).\n *\n * @param lowerBound Output parameter for lowerBound.\n * @param upperBound Output parameter for upperBound.\n * @param sources Sources for which to compute the chunk bounds.\n */\nfunction computeSourcesChunkBounds(\n    lowerBound: Vec3, upperBound: Vec3, sources: Iterable<VolumeChunkSource>) {\n  for (let i = 0; i < 3; ++i) {\n    lowerBound[i] = Number.POSITIVE_INFINITY;\n    upperBound[i] = Number.NEGATIVE_INFINITY;\n  }\n\n  for (let source of sources) {\n    let {spec} = source;\n    let {lowerChunkBound, upperChunkBound} = spec;\n    for (let i = 0; i < 3; ++i) {\n      lowerBound[i] = Math.min(lowerBound[i], lowerChunkBound[i]);\n      upperBound[i] = Math.max(upperBound[i], upperChunkBound[i]);\n    }\n  }\n}\n\nenum BoundsComparisonResult {\n  // Needle is fully outside haystack.\n  FULLY_OUTSIDE,\n  // Needle is fully inside haystack.\n  FULLY_INSIDE,\n  // Needle is partially inside haystack.\n  PARTIALLY_INSIDE\n}\n\nfunction compareBoundsSingleDimension(\n    needleLower: number, needleUpper: number, haystackLower: number,\n    haystackUpper: number) {\n  if (needleLower >= haystackUpper || needleUpper <= haystackLower) {\n    return BoundsComparisonResult.FULLY_OUTSIDE;\n  }\n  if (needleLower >= haystackLower && needleUpper <= haystackUpper) {\n    return BoundsComparisonResult.FULLY_INSIDE;\n  }\n  return BoundsComparisonResult.PARTIALLY_INSIDE;\n}\n\nfunction compareBounds(\n    needleLowerBound: Vec3, needleUpperBound: Vec3, haystackLowerBound: Vec3,\n    haystackUpperBound: Vec3) {\n  let curResult = BoundsComparisonResult.FULLY_INSIDE;\n  for (let i = 0; i < 3; ++i) {\n    let newResult = compareBoundsSingleDimension(\n        needleLowerBound[i], needleUpperBound[i], haystackLowerBound[i],\n        haystackUpperBound[i]);\n    switch (newResult) {\n      case BoundsComparisonResult.FULLY_OUTSIDE:\n        return newResult;\n      case BoundsComparisonResult.PARTIALLY_INSIDE:\n        curResult = newResult;\n        break;\n    }\n  }\n  return curResult;\n}\n\nexport interface RenderLayer {\n  sources: VolumeChunkSource[][];\n};\n\nfunction pickBestAlternativeSource(xAxis: Vec3, yAxis: Vec3, alternatives: VolumeChunkSource[]) {\n  let numAlternatives = alternatives.length;\n  let bestAlternativeIndex = 0;\n  if (numAlternatives > 1) {\n    let bestSliceArea = 0;\n    for (let alternativeIndex = 0; alternativeIndex < numAlternatives; ++alternativeIndex) {\n      let alternative = alternatives[alternativeIndex];\n      let sliceArea = estimateSliceAreaPerChunk(xAxis, yAxis, alternative.spec.chunkLayout.size);\n      // console.log(`scaleIndex = ${scaleIndex}, xAxis = ${xAxis}, yAxis\n      // = ${yAxis}, chunksize = ${alternative.spec.chunkLayout.size},\n      // sliceArea = ${sliceArea}`);\n      if (sliceArea > bestSliceArea) {\n        bestSliceArea = sliceArea;\n        bestAlternativeIndex = alternativeIndex;\n      }\n    }\n  }\n  return alternatives[bestAlternativeIndex];\n}\n\nexport class SliceViewBase extends SharedObject {\n  width: number|null = null;\n  height: number|null = null;\n  hasViewportToData = false;\n  /**\n   * Specifies whether width, height, and viewportToData are valid.\n   */\n  hasValidViewport = false;\n\n  // Transforms (x,y) viewport coordinates in the range:\n  //\n  // x=[left: -width/2, right: width/2] and\n  //\n  // y=[top: -height/2, bottom: height/2],\n  //\n  // to data coordinates.\n  viewportToData = mat4.create();\n\n  // Normalized x, y, and z viewport axes in data coordinate space.\n  viewportAxes = [vec4.create(), vec4.create(), vec4.create()];\n\n  // Viewport axes used for selecting visible sources.\n  previousViewportAxes = [vec3.create(), vec3.create()];\n\n  centerDataPosition = vec3.create();\n\n  viewportPlaneDistanceToOrigin: number = null;\n\n  /**\n   * For each visible ChunkLayout, maps each visible VolumeChunkSource to its priority index.\n   */\n  visibleChunkLayouts = new Map<ChunkLayout, Map<VolumeChunkSource, number>>();\n\n  visibleLayers = new Map<RenderLayer, VolumeChunkSource[]>();\n\n  visibleSourcesStale = true;\n\n  pixelSize: number = null;\n\n  constructor() {\n    super();\n    mat4.identity(this.viewportToData);\n  }\n\n  /**\n   * Called when hasValidViewport == true and the viewport width/height or data transform matrix\n   * changes.\n   */\n  onViewportChanged() {}\n  maybeSetHasValidViewport() {\n    if (!this.hasValidViewport && this.width !== null && this.height !== null &&\n        this.hasViewportToData) {\n      this.hasValidViewport = true;\n      this.onHasValidViewport();\n    }\n    if (this.hasValidViewport) {\n      this.onViewportChanged();\n    }\n  }\n  onHasValidViewport() {}\n  setViewportSize(width: number, height: number) {\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      this.maybeSetHasValidViewport();\n      return true;\n    }\n    return false;\n  }\n  setViewportToDataMatrix(mat: Mat4) {\n    if (this.hasViewportToData && mat4.equals(this.viewportToData, mat)) {\n      return false;\n    }\n\n    this.hasViewportToData = true;\n\n    mat4.copy(this.viewportToData, mat);\n    vec3.transformMat4(this.centerDataPosition, kZeroVec, mat);\n\n    let newPixelSize: number;\n\n    // Swap previousViewportAxes with viewportAxes.\n    let viewportAxes = this.viewportAxes;\n    let previousViewportAxes = this.previousViewportAxes;\n\n    // Compute axes.\n    for (var i = 0; i < 3; ++i) {\n      let a = viewportAxes[i];\n      vec4.transformMat4(a, kAxes[i], mat);\n      // a[3] is guaranteed to be 0.\n      if (i === 0) {\n        newPixelSize = vec3.length(a);\n      }\n      vec4.normalize(a, a);\n    }\n\n    this.viewportAxes = viewportAxes;\n    this.previousViewportAxes = previousViewportAxes;\n\n    if (!approxEqual(newPixelSize, this.pixelSize) ||\n        (vec3.dot(viewportAxes[0], previousViewportAxes[0]) < 0.95) ||\n        (vec3.dot(viewportAxes[1], previousViewportAxes[1]) < 0.95)) {\n      vec3.copy(previousViewportAxes[0], viewportAxes[0]);\n      vec3.copy(previousViewportAxes[1], viewportAxes[1]);\n      this.visibleSourcesStale = true;\n      this.pixelSize = newPixelSize;\n    }\n\n    // Compute viewport plane distance to origin.\n    this.viewportPlaneDistanceToOrigin =\n      vec3.dot(this.centerDataPosition, this.viewportAxes[2]);\n    this.onViewportToDataMatrixChanged();\n    this.maybeSetHasValidViewport();\n    return true;\n  }\n\n  onViewportToDataMatrixChanged() {}\n\n  /**\n   * Computes the list of sources to use for each visible layer, based on the\n   * current pixelSize.\n   */\n  updateVisibleSources() {\n    if (!this.visibleSourcesStale) {\n      return;\n    }\n    this.visibleSourcesStale = false;\n    // Increase pixel size by a small margin.\n    let pixelSize = this.pixelSize * 1.1;\n    // console.log(\"pixelSize\", pixelSize);\n\n    let visibleChunkLayouts = this.visibleChunkLayouts;\n    let [xAxis, yAxis] = this.viewportAxes;\n\n    let visibleLayers = this.visibleLayers;\n    visibleChunkLayouts.clear();\n    for (let [renderLayer, visibleSources] of visibleLayers) {\n      visibleSources.length = 0;\n      let sources = renderLayer.sources;\n      let numSources = sources.length;\n      let scaleIndex: number;\n\n      // At the smallest scale, all alternative sources must have the same voxel size, which is\n      // considered to be the base voxel size.\n      let smallestVoxelSize = sources[0][0].spec.voxelSize;\n\n      /**\n       * Determines whether we should continue to look for a finer-resolution source *after* one\n       * with the specified voxelSize.\n       */\n      const canImproveOnVoxelSize = (voxelSize: Vec3) => {\n        for (let i = 0; i < 3; ++i) {\n          let size = voxelSize[i];\n          // If size <= pixelSize, no need for improvement.\n          // If size === smallestVoxelSize, also no need for improvement.\n          if (size > pixelSize && size > smallestVoxelSize[i]) {\n            return true;\n          }\n        }\n        return false;\n      };\n\n      /**\n       * Registers a source as being visible.  This should be called with consecutively decreasing\n       * values of scaleIndex.\n       */\n      const addVisibleSource = (source: VolumeChunkSource, scaleIndex: number) => {\n        // Add to end of visibleSources list.  We will reverse the list after all sources are added.\n        visibleSources[visibleSources.length++] = source;\n        let chunkLayout = source.spec.chunkLayout;\n        let existingSources = visibleChunkLayouts.get(chunkLayout);\n        if (existingSources === undefined) {\n          existingSources = new Map<VolumeChunkSource, number>();\n          visibleChunkLayouts.set(chunkLayout, existingSources);\n        }\n        existingSources.set(source, numSources - scaleIndex - 1);\n      };\n\n      scaleIndex = numSources - 1;\n      while (true) {\n        let source = pickBestAlternativeSource(xAxis, yAxis, sources[scaleIndex]);\n        addVisibleSource(source, scaleIndex);\n        if (scaleIndex === 0 || !canImproveOnVoxelSize(source.spec.voxelSize)) {\n          break;\n        }\n        --scaleIndex;\n      }\n      // Reverse visibleSources list since we added sources from coarsest to finest resolution, but\n      // we want them ordered from finest to coarsest.\n      visibleSources.reverse();\n    }\n  }\n  computeVisibleChunks<T>(\n      getLayoutObject: (chunkLayout: ChunkLayout) => T,\n      addChunk:\n          (chunkLayout: ChunkLayout, layoutObject: T, lowerBound: Vec3,\n           fullyVisibleSources: VolumeChunkSource[]) => void) {\n    this.updateVisibleSources();\n\n    var center = this.centerDataPosition;\n\n    // Lower and upper bound in global data coordinates.\n    var dataLowerBound = vec3.clone(center);\n    var dataUpperBound = vec3.clone(center);\n    var corner = vec3.create();\n    for (var xScalar of [-this.width / 2, this.width / 2]) {\n      for (var yScalar of [-this.height / 2, this.height / 2]) {\n        vec3.scale(corner, kAxes[0], xScalar);\n        vec3.scaleAndAdd(corner, corner, kAxes[1], yScalar);\n        vec3.transformMat4(corner, corner, this.viewportToData);\n        vec3.min(dataLowerBound, dataLowerBound, corner);\n        vec3.max(dataUpperBound, dataUpperBound, corner);\n      }\n    }\n    // console.log(\"data bounds\", dataLowerBound, dataUpperBound);\n\n    var lowerBound = vec3.create();\n    var upperBound = vec3.create();\n\n    // Vertex with maximal dot product with the positive viewport plane normal.\n    // Implicitly, negativeVertex = 1 - positiveVertex.\n    var positiveVertex = vec3.create();\n\n    var planeNormal = this.viewportAxes[2];\n    for (let i = 0; i < 3; ++i) {\n      if (planeNormal[i] > 0) {\n        positiveVertex[i] = 1;\n      }\n    }\n\n    // Sources whose bounds partially contain the current bounding box.\n    let partiallyVisibleSources = new Array<VolumeChunkSource>();\n\n    // Sources whose bounds fully contain the current bounding box.\n    let fullyVisibleSources = new Array<VolumeChunkSource>();\n\n    this.visibleChunkLayouts.forEach((visibleSources, chunkLayout) => {\n      let layoutObject = getLayoutObject(chunkLayout);\n\n      let chunkSize = chunkLayout.size;\n      let offset = chunkLayout.offset;\n\n      let planeDistanceToOrigin =\n          this.viewportPlaneDistanceToOrigin - vec3.dot(offset, this.viewportAxes[2]);\n\n      computeSourcesChunkBounds(lowerBound, upperBound, visibleSources.keys());\n      if (DEBUG_CHUNK_INTERSECTIONS) {\n        console.log(`Initial sources chunk bounds: ${vec3.str(lowerBound)}, ${vec3.str(upperBound)}, data bounds: ${vec3.str(dataLowerBound)}, ${vec3.str(dataUpperBound)}, offset = ${vec3.str(offset)}, chunkSize = ${vec3.str(chunkSize)}`);\n      }\n\n      for (let i = 0; i < 3; ++i) {\n        lowerBound[i] = Math.max(lowerBound[i], Math.floor((dataLowerBound[i] - offset[i]) / chunkSize[i]));\n        // \n        upperBound[i] = Math.min(upperBound[i], Math.floor((dataUpperBound[i] - offset[i]) / chunkSize[i] + 1));\n      }\n\n      // console.log('chunkBounds', lowerBound, upperBound);\n\n      // Checks whether [lowerBound, upperBound) intersects the viewport plane.\n      //\n      // positiveVertexDistanceToOrigin = dot(planeNormal, lowerBound +\n      // positiveVertex * (upperBound - lowerBound)) - planeDistanceToOrigin;\n      // negativeVertexDistanceToOrigin = dot(planeNormal, lowerBound +\n      // negativeVertex * (upperBound - lowerBound)) - planeDistanceToOrigin;\n      //\n      // positive vertex must have positive distance, and negative vertex must\n      // have negative distance.\n      function intersectsPlane() {\n        var positiveVertexDistanceToOrigin = 0;\n        var negativeVertexDistanceToOrigin = 0;\n        // Check positive vertex.\n        for (let i = 0; i < 3; ++i) {\n          let chunkSizeValue = chunkSize[i];\n          let normalValue = planeNormal[i];\n          let lowerValue = lowerBound[i];\n          let upperValue = upperBound[i];\n          let diff = upperValue - lowerValue;\n          let positiveOffset = positiveVertex[i] * diff;\n          // console.log(\n          //     normalValue, lowerValue, upperValue, diff, positiveOffset,\n          //     positiveVertexDistanceToOrigin, negativeVertexDistanceToOrigin);\n          positiveVertexDistanceToOrigin +=\n              normalValue * chunkSizeValue * (lowerValue + positiveOffset);\n          negativeVertexDistanceToOrigin += normalValue * chunkSizeValue *\n              (lowerValue + diff - positiveOffset);\n        }\n        // console.log(\"{positive,negative}VertexDistanceToOrigin: \",\n        // positiveVertexDistanceToOrigin, negativeVertexDistanceToOrigin,\n        // planeDistanceToOrigin);\n        // console.log(\"intersectsPlane:\", negativeVertexDistanceToOrigin,\n        //             planeDistanceToOrigin, positiveVertexDistanceToOrigin);\n        if (positiveVertexDistanceToOrigin < planeDistanceToOrigin) {\n          return false;\n        }\n\n        return negativeVertexDistanceToOrigin <= planeDistanceToOrigin;\n      }\n\n      fullyVisibleSources.length = 0;\n      partiallyVisibleSources.length = 0;\n      for (let source of visibleSources.keys()) {\n        let spec = source.spec;\n        let result = compareBounds(\n          lowerBound, upperBound, spec.lowerChunkBound, spec.upperChunkBound);\n        if (DEBUG_CHUNK_INTERSECTIONS) {\n          console.log(`Comparing source bounds lowerBound=${vec3.str(lowerBound)}, upperBound=${vec3.str(upperBound)}, lowerChunkBound=${vec3.str(spec.lowerChunkBound)}, upperChunkBound=${vec3.str(spec.upperChunkBound)}, got ${BoundsComparisonResult[result]}`, spec, source);\n        }\n        switch (result) {\n          case BoundsComparisonResult.FULLY_INSIDE:\n            fullyVisibleSources.push(source);\n            break;\n          case BoundsComparisonResult.PARTIALLY_INSIDE:\n            partiallyVisibleSources.push(source);\n            break;\n        }\n      }\n      let partiallyVisibleSourcesLength = partiallyVisibleSources.length;\n\n      // Mutates lowerBound and upperBound while running, but leaves them the\n      // same once finished.\n      function checkBounds (nextSplitDim: number) {\n        if (fullyVisibleSources.length === 0 && partiallyVisibleSourcesLength === 0) {\n          if (DEBUG_CHUNK_INTERSECTIONS) {\n            console.log('  no visible sources');\n          }\n          return;\n        }\n\n        if (DEBUG_CHUNK_INTERSECTIONS) {\n          console.log(`Check bounds: [ ${vec3.str(lowerBound)}, ${vec3.str(upperBound)} ]`);\n        }\n        var volume = 1;\n        for (let i = 0; i < 3; ++i) {\n          volume *= Math.max(0, upperBound[i] - lowerBound[i]);\n        }\n\n        if (volume === 0) {\n          if (DEBUG_CHUNK_INTERSECTIONS) {\n            console.log('  volume == 0');\n          }\n          return;\n        }\n\n        if (!intersectsPlane()) {\n          if (DEBUG_CHUNK_INTERSECTIONS) {\n            console.log('  doesn\\'t intersect plane');\n          }\n          return;\n        }\n\n        if (DEBUG_CHUNK_INTERSECTIONS) {\n          console.log('Within bounds: [' + vec3.str(lowerBound) + \", \" + vec3.str(upperBound) + \"]\");\n        }\n\n        if (volume === 1) {\n          addChunk(chunkLayout, layoutObject, lowerBound, fullyVisibleSources);\n          return;\n        }\n\n        var dimLower: number, dimUpper: number, diff: number;\n        while (true) {\n          dimLower = lowerBound[nextSplitDim];\n          dimUpper = upperBound[nextSplitDim];\n          diff = dimUpper - dimLower;\n          if (diff === 1) {\n            nextSplitDim = (nextSplitDim + 1) % 3;\n          } else {\n            break;\n          }\n        }\n\n        let splitPoint = dimLower + Math.floor(0.5 * diff);\n        let newNextSplitDim = (nextSplitDim + 1) % 3;\n        let fullyVisibleSourcesLength = fullyVisibleSources.length;\n\n        upperBound[nextSplitDim] = splitPoint;\n\n        let oldPartiallyVisibleSourcesLength = partiallyVisibleSourcesLength;\n        function adjustSources() {\n          partiallyVisibleSourcesLength = partitionArray(\n              partiallyVisibleSources, 0, oldPartiallyVisibleSourcesLength,\n              source => {\n                let spec = source.spec;\n                let result = compareBoundsSingleDimension(\n                    lowerBound[nextSplitDim], upperBound[nextSplitDim],\n                    spec.lowerChunkBound[nextSplitDim],\n                    spec.upperChunkBound[nextSplitDim]);\n                switch (result) {\n                  case BoundsComparisonResult.PARTIALLY_INSIDE:\n                    return true;\n                  case BoundsComparisonResult.FULLY_INSIDE:\n                    fullyVisibleSources.push(source);\n                  default:\n                    return false;\n                }\n              });\n        }\n\n        adjustSources();\n        checkBounds(newNextSplitDim);\n\n        upperBound[nextSplitDim] = dimUpper;\n        lowerBound[nextSplitDim] = splitPoint;\n\n        adjustSources();\n        checkBounds(newNextSplitDim);\n\n        lowerBound[nextSplitDim] = dimLower;\n\n        // Truncate list of fully visible sources.\n        fullyVisibleSources.length = fullyVisibleSourcesLength;\n\n        // Restore partiallyVisibleSources.\n        partiallyVisibleSourcesLength = oldPartiallyVisibleSourcesLength;\n      }\n      checkBounds(0);\n    });\n  }\n};\n\n/**\n * If this is updated, DATA_TYPE_BYTES must also be updated.\n */\nexport enum DataType {\n  UINT8 = 0,\n  UINT16 = 1,\n  UINT32 = 2,\n  UINT64 = 3,\n  FLOAT32 = 4,\n}\n\ninterface DataTypeBytes {\n  [index: number]: number;\n}\n\nexport const DATA_TYPE_BYTES: DataTypeBytes = [];\nDATA_TYPE_BYTES[DataType.UINT8] = 1;\nDATA_TYPE_BYTES[DataType.UINT16] = 2;\nDATA_TYPE_BYTES[DataType.UINT32] = 4;\nDATA_TYPE_BYTES[DataType.UINT64] = 8;\nDATA_TYPE_BYTES[DataType.FLOAT32] = 4;\n\n/**\n * Specifies the interpretation of volumetric data.\n */\nexport enum VolumeType {\n  UNKNOWN,\n  IMAGE,\n  SEGMENTATION,\n}\n\n\nexport const DEFAULT_CHUNK_DATA_SIZES  = [\n  vec3.fromValues(64, 64, 64)\n];\n\n/**\n * Specifies a chunk layout and voxel size.\n */\nexport class VolumeChunkSpecification {\n  chunkBytes: number;\n  voxelSize: Vec3;\n\n  // All valid chunks are in the range [lowerChunkBound, upperChunkBound).\n  lowerChunkBound: Vec3;\n  upperChunkBound: Vec3;\n\n  constructor(\n      public chunkLayout: ChunkLayout, public chunkDataSize: Vec3,\n      public numChannels: number, public dataType: DataType,\n      public lowerVoxelBound: Vec3, public upperVoxelBound: Vec3,\n      public compressedSegmentationBlockSize?: Vec3|undefined) {\n    this.chunkBytes =\n        prod3(chunkDataSize) * DATA_TYPE_BYTES[dataType] * numChannels;\n    let voxelSize = this.voxelSize =\n        vec3.divide(vec3.create(), this.chunkLayout.size, this.chunkDataSize);\n    let lowerChunkBound = this.lowerChunkBound = vec3.create();\n    let upperChunkBound = this.upperChunkBound = vec3.create();\n    let chunkSize = chunkLayout.size;\n    let chunkOffset = chunkLayout.offset;\n    for (let i = 0; i < 3; ++i) {\n      lowerChunkBound[i] = Math.floor(\n          (lowerVoxelBound[i] * voxelSize[i] - chunkOffset[i]) / chunkSize[i]);\n      upperChunkBound[i] = Math.floor(\n          ((upperVoxelBound[i] - 1) * voxelSize[i] - chunkOffset[i]) /\n              chunkSize[i] +\n          1);\n    }\n    // console.log(`voxelBound = [${vec3.str(lowerVoxelBound)},${vec3.str(upperVoxelBound)}), chunkBound = [${vec3.str(lowerChunkBound)},${vec3.str(upperChunkBound)}]`);\n    this.compressedSegmentationBlockSize = compressedSegmentationBlockSize;\n  }\n  static fromObject(msg: any) {\n    return new VolumeChunkSpecification(\n        ChunkLayout.fromObject(msg['chunkLayout']), msg['chunkDataSize'],\n        msg['numChannels'], msg['dataType'], msg['lowerVoxelBound'],\n        msg['upperVoxelBound'], msg['compressedSegmentationBlockSize']);\n  }\n  toObject(msg: any) {\n    this.chunkLayout.toObject(msg['chunkLayout'] = {});\n    msg['chunkDataSize'] = this.chunkDataSize;\n    msg['numChannels'] = this.numChannels;\n    msg['dataType'] = this.dataType;\n    msg['lowerVoxelBound'] = this.lowerVoxelBound;\n    msg['upperVoxelBound'] = this.upperVoxelBound;\n    msg['compressedSegmentationBlockSize'] =\n        this.compressedSegmentationBlockSize;\n  }\n\n  static * getDefaults(options: {\n    voxelSize: Vec3,\n    lowerVoxelBound: Vec3,\n    upperVoxelBound: Vec3,\n    volumeType: VolumeType,\n    dataType: DataType, numChannels?: number, chunkDataSizes?: Vec3[],\n    compressedSegmentationBlockSize?: Vec3|null\n  }) {\n    let {voxelSize,       dataType,\n         lowerVoxelBound, chunkDataSizes = DEFAULT_CHUNK_DATA_SIZES,\n         numChannels = 1, compressedSegmentationBlockSize} = options;\n    let chunkOffset = vec3.multiply(vec3.create(), lowerVoxelBound, voxelSize);\n    if (compressedSegmentationBlockSize === undefined &&\n        options.volumeType === VolumeType.SEGMENTATION &&\n        (dataType === DataType.UINT32 || dataType === DataType.UINT64)) {\n      compressedSegmentationBlockSize = vec3.fromValues(8, 8, 8);\n    }\n    for (let chunkDataSize of chunkDataSizes) {\n      let chunkSize = vec3.create();\n      vec3.multiply(chunkSize, voxelSize, chunkDataSize);\n      let chunkLayout = ChunkLayout.get(chunkSize, chunkOffset);\n      yield new VolumeChunkSpecification(\n          chunkLayout, chunkDataSize, numChannels, dataType, lowerVoxelBound,\n          options.upperVoxelBound, compressedSegmentationBlockSize);\n    }\n  }\n};\n\nexport interface VolumeChunkSource { spec: VolumeChunkSpecification; }\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/base.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Vec3, vec3, kZeroVec, vec3Key } from 'neuroglancer/util/geom';\n\n/**\n * @param size Size of each chunk in nanometers.\n * @param offset Offset of chunk boundaries relative to\n *   (0,0,0).  It should be the case that 0 >= offset > size.\n */\nexport class ChunkLayout {\n  size: Vec3;\n  offset: Vec3;\n  constructor(size: Vec3, offset?: Vec3) {\n    this.size = vec3.clone(size);\n    if (offset === undefined) {\n      this.offset = vec3.create();\n    } else {\n      this.offset = vec3.clone(offset);\n    }\n  }\n  static cache = new Map<string, ChunkLayout>();\n  toObject (msg: any) {\n    msg['size'] = this.size;\n    msg['offset'] = this.offset;\n  }\n\n  static get(size: Vec3, offset = kZeroVec) {\n    let cache = ChunkLayout.cache;\n    let key = `${vec3Key(size)}+${vec3Key(offset)}`;\n    let obj = cache.get(key);\n    if (obj === undefined) {\n      obj = new ChunkLayout(size, offset);\n      cache.set(key, obj);\n    }\n    return obj;\n  }\n  static fromObject (msg: any) {\n    return ChunkLayout.get(msg['size'], msg['offset']);\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/chunk_layout.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport {vec2, vec3, vec4, mat2, mat3, mat4, quat} from 'gl-matrix';\nimport {vec3, vec4, mat4} from 'gl-matrix';\n\nexport type Vec2 = Float32Array;\nexport type Vec3 = Float32Array;\nexport type Vec4 = Float32Array;\nexport type Mat3 = Float32Array;\nexport type Mat4 = Float32Array;\nexport type Quat = Float32Array;\n\nexport const identityMat4 = mat4.create();\n\nexport const AXES_NAMES = ['x', 'y', 'z'];\n\nexport class BoundingBox {\n  constructor(public lower: Vec3, public upper: Vec3) {}\n};\n\nexport const kAxes = [\n  vec4.fromValues(1, 0, 0, 0), vec4.fromValues(0, 1, 0, 0),\n  vec4.fromValues(0, 0, 1, 0)\n];\nexport const kZeroVec = vec3.fromValues(0, 0, 0);\n\nexport function prod3(x: ArrayLike<number>) {\n  return x[0] * x[1] * x[2];\n}\n\nexport function prod4(x: ArrayLike<number>) {\n  return x[0] * x[1] * x[2] * x[3];\n}\n\n/**\n * Implements a one-to-one conversion from Vec3 to string, suitable for use a Map key.\n *\n * Specifically, returns the string representation of the 3 values separated by commas.\n */\nexport function vec3Key(x: ArrayLike<number>) {\n  return `${x[0]},${x[1]},${x[2]}`;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/geom.ts\n **/","/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.3.2\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\nexports.glMatrix = require(\"./gl-matrix/common.js\");\nexports.mat2 = require(\"./gl-matrix/mat2.js\");\nexports.mat2d = require(\"./gl-matrix/mat2d.js\");\nexports.mat3 = require(\"./gl-matrix/mat3.js\");\nexports.mat4 = require(\"./gl-matrix/mat4.js\");\nexports.quat = require(\"./gl-matrix/quat.js\");\nexports.vec2 = require(\"./gl-matrix/vec2.js\");\nexports.vec3 = require(\"./gl-matrix/vec3.js\");\nexports.vec4 = require(\"./gl-matrix/vec4.js\");\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix.js\n ** module id = 15\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * @class Common utilities\n * @name glMatrix\n */\nvar glMatrix = {};\n\n// Configuration Constants\nglMatrix.EPSILON = 0.000001;\nglMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nglMatrix.RANDOM = Math.random;\nglMatrix.ENABLE_SIMD = false;\n\n// Capability detection\nglMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === Float32Array) && ('SIMD' in this);\nglMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nglMatrix.setMatrixArrayType = function(type) {\n    glMatrix.ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n* Convert Degree To Radian\n*\n* @param {Number} Angle in Degrees\n*/\nglMatrix.toRadian = function(a){\n     return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less \n * than or equal to 1.0, and a relative tolerance is used for larger values)\n * \n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nglMatrix.equals = function(a, b) {\n\treturn Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nmodule.exports = glMatrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/common.js\n ** module id = 16\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x2 Matrix\n * @name mat2\n */\nvar mat2 = {};\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nmat2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nmat2.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nmat2.fromValues = function(m00, m01, m10, m11) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nmat2.set = function(out, m00, m01, m10, m11) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m10;\n    out[3] = m11;\n    return out;\n};\n\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a1 = a[1];\n        out[1] = a[2];\n        out[2] = a1;\n    } else {\n        out[0] = a[0];\n        out[1] = a[2];\n        out[2] = a[1];\n        out[3] = a[3];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n\n        // Calculate the determinant\n        det = a0 * a3 - a2 * a1;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n    \n    out[0] =  a3 * det;\n    out[1] = -a1 * det;\n    out[2] = -a2 * det;\n    out[3] =  a0 * det;\n\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nmat2.adjoint = function(out, a) {\n    // Caching this value is nessecary if out == a\n    var a0 = a[0];\n    out[0] =  a[3];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] =  a0;\n\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2.determinant = function (a) {\n    return a[0] * a[3] - a[2] * a[1];\n};\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    return out;\n};\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nmat2.mul = mat2.multiply;\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    return out;\n};\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nmat2.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nmat2.fromRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nmat2.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2.str = function (a) {\n    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n};\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix \n * @param {mat2} D the diagonal matrix \n * @param {mat2} U the upper triangular matrix \n * @param {mat2} a the input matrix to factorize\n */\n\nmat2.LDU = function (L, D, U, a) { \n    L[2] = a[2]/a[0]; \n    U[0] = a[0]; \n    U[1] = a[1]; \n    U[3] = a[3] - L[2] * U[1]; \n    return [L, D, U];       \n}; \n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nmat2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nmat2.sub = mat2.subtract;\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nmat2.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nmat2.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\nmodule.exports = mat2;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/mat2.js\n ** module id = 17\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2x3 Matrix\n * @name mat2d\n * \n * @description \n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\nvar mat2d = {};\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nmat2d.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    return out;\n};\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nmat2d.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n};\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nmat2d.fromValues = function(a, b, c, d, tx, ty) {\n    var out = new glMatrix.ARRAY_TYPE(6);\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nmat2d.set = function(out, a, b, c, d, tx, ty) {\n    out[0] = a;\n    out[1] = b;\n    out[2] = c;\n    out[3] = d;\n    out[4] = tx;\n    out[5] = ty;\n    return out;\n};\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nmat2d.invert = function(out, a) {\n    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],\n        atx = a[4], aty = a[5];\n\n    var det = aa * ad - ab * ac;\n    if(!det){\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = ad * det;\n    out[1] = -ab * det;\n    out[2] = -ac * det;\n    out[3] = aa * det;\n    out[4] = (ac * aty - ad * atx) * det;\n    out[5] = (ab * atx - aa * aty) * det;\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nmat2d.determinant = function (a) {\n    return a[0] * a[3] - a[1] * a[2];\n};\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.multiply = function (out, a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    out[0] = a0 * b0 + a2 * b1;\n    out[1] = a1 * b0 + a3 * b1;\n    out[2] = a0 * b2 + a2 * b3;\n    out[3] = a1 * b2 + a3 * b3;\n    out[4] = a0 * b4 + a2 * b5 + a4;\n    out[5] = a1 * b4 + a3 * b5 + a5;\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nmat2d.mul = mat2d.multiply;\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.rotate = function (out, a, rad) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n    out[0] = a0 *  c + a2 * s;\n    out[1] = a1 *  c + a3 * s;\n    out[2] = a0 * -s + a2 * c;\n    out[3] = a1 * -s + a3 * c;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nmat2d.scale = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0 * v0;\n    out[1] = a1 * v0;\n    out[2] = a2 * v1;\n    out[3] = a3 * v1;\n    out[4] = a4;\n    out[5] = a5;\n    return out;\n};\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nmat2d.translate = function(out, a, v) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],\n        v0 = v[0], v1 = v[1];\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = a0 * v0 + a2 * v1 + a4;\n    out[5] = a1 * v0 + a3 * v1 + a5;\n    return out;\n};\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nmat2d.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n    out[0] = c;\n    out[1] = s;\n    out[2] = -s;\n    out[3] = c;\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nmat2d.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = v[1];\n    out[4] = 0;\n    out[5] = 0;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nmat2d.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    out[4] = v[0];\n    out[5] = v[1];\n    return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat2d.str = function (a) {\n    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat2d.frob = function (a) { \n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}; \n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nmat2d.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    return out;\n};\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nmat2d.sub = mat2d.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nmat2d.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    return out;\n};\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nmat2d.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat2d.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n};\n\nmodule.exports = mat2d;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/mat2d.js\n ** module id = 18\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3x3 Matrix\n * @name mat3\n */\nvar mat3 = {};\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nmat3.fromMat4 = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n};\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nmat3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nmat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    var out = new glMatrix.ARRAY_TYPE(9);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nmat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n};\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nmat3.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n    \n    return out;\n};\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b01 = a22 * a11 - a12 * a21,\n        b11 = -a22 * a10 + a12 * a20,\n        b21 = a21 * a10 - a11 * a20,\n\n        // Calculate the determinant\n        det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nmat3.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    out[0] = (a11 * a22 - a12 * a21);\n    out[1] = (a02 * a21 - a01 * a22);\n    out[2] = (a01 * a12 - a02 * a11);\n    out[3] = (a12 * a20 - a10 * a22);\n    out[4] = (a00 * a22 - a02 * a20);\n    out[5] = (a02 * a10 - a00 * a12);\n    out[6] = (a10 * a21 - a11 * a20);\n    out[7] = (a01 * a20 - a00 * a21);\n    out[8] = (a00 * a11 - a01 * a10);\n    return out;\n};\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nmat3.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n};\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        b00 = b[0], b01 = b[1], b02 = b[2],\n        b10 = b[3], b11 = b[4], b12 = b[5],\n        b20 = b[6], b21 = b[7], b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n};\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nmat3.mul = mat3.multiply;\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nmat3.translate = function(out, a, v) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n        x = v[0], y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n};\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.rotate = function (out, a, rad) {\n    var a00 = a[0], a01 = a[1], a02 = a[2],\n        a10 = a[3], a11 = a[4], a12 = a[5],\n        a20 = a[6], a21 = a[7], a22 = a[8],\n\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nmat3.scale = function(out, a, v) {\n    var x = v[0], y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n};\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nmat3.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = v[0];\n    out[7] = v[1];\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nmat3.fromRotation = function(out, rad) {\n    var s = Math.sin(rad), c = Math.cos(rad);\n\n    out[0] = c;\n    out[1] = s;\n    out[2] = 0;\n\n    out[3] = -s;\n    out[4] = c;\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nmat3.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n\n    out[3] = 0;\n    out[4] = v[1];\n    out[5] = 0;\n\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nmat3.fromMat2d = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = 0;\n\n    out[3] = a[2];\n    out[4] = a[3];\n    out[5] = 0;\n\n    out[6] = a[4];\n    out[7] = a[5];\n    out[8] = 1;\n    return out;\n};\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nmat3.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n};\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nmat3.normalFromMat4 = function (out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) { \n        return null; \n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat3.str = function (a) {\n    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + \n                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + \n                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat3.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n};\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nmat3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n};\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nmat3.sub = mat3.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nmat3.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n};\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nmat3.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    return out;\n};\n\n/*\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && \n           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = a[6], b7 = b[7], b8 = b[8];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n};\n\n\nmodule.exports = mat3;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/mat3.js\n ** module id = 19\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4x4 Matrix\n * @name mat4\n */\nvar mat4 = {\n  scalar: {},\n  SIMD: {},\n};\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nmat4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nmat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    var out = new glMatrix.ARRAY_TYPE(16);\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nmat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n};\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nmat4.identity = function(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.transpose = function(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        var a01 = a[1], a02 = a[2], a03 = a[3],\n            a12 = a[6], a13 = a[7],\n            a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n};\n\n/**\n * Transpose the values of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.transpose = function(out, a) {\n    var a0, a1, a2, a3,\n        tmp01, tmp23,\n        out0, out1, out2, out3;\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    a1 = SIMD.Float32x4.load(a, 4);\n    a2 = SIMD.Float32x4.load(a, 8);\n    a3 = SIMD.Float32x4.load(a, 12);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 0,  out0);\n    SIMD.Float32x4.store(out, 4,  out1);\n\n    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);\n    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);\n    SIMD.Float32x4.store(out, 8,  out2);\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Transpse a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;\n\n/**\n * Inverts a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.invert = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32,\n\n        // Calculate the determinant\n        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n};\n\n/**\n * Inverts a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.invert = function(out, a) {\n  var row0, row1, row2, row3,\n      tmp1,\n      minor0, minor1, minor2, minor3,\n      det,\n      a0 = SIMD.Float32x4.load(a, 0),\n      a1 = SIMD.Float32x4.load(a, 4),\n      a2 = SIMD.Float32x4.load(a, 8),\n      a3 = SIMD.Float32x4.load(a, 12);\n\n  // Compute matrix adjugate\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  // Compute matrix determinant\n  det   = SIMD.Float32x4.mul(row0, minor0);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);\n  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);\n  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);\n  det   = SIMD.Float32x4.sub(\n               SIMD.Float32x4.add(tmp1, tmp1),\n               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));\n  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);\n  if (!det) {\n      return null;\n  }\n\n  // Compute matrix inverse\n  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));\n  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));\n  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));\n  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));\n  return out;\n}\n\n/**\n * Inverts a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;\n\n/**\n * Calculates the adjugate of a mat4 not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.scalar.adjoint = function(out, a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n    return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nmat4.SIMD.adjoint = function(out, a) {\n  var a0, a1, a2, a3;\n  var row0, row1, row2, row3;\n  var tmp1;\n  var minor0, minor1, minor2, minor3;\n\n  var a0 = SIMD.Float32x4.load(a, 0);\n  var a1 = SIMD.Float32x4.load(a, 4);\n  var a2 = SIMD.Float32x4.load(a, 8);\n  var a3 = SIMD.Float32x4.load(a, 12);\n\n  // Transpose the source matrix.  Sort of.  Not a true transpose operation\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);\n  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);\n  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);\n  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);\n\n  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);\n  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);\n  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);\n  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);\n\n  tmp1   = SIMD.Float32x4.mul(row2, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.mul(row1, tmp1);\n  minor1 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);\n  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);\n  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row1, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);\n  minor3 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);\n  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);\n  minor2 = SIMD.Float32x4.mul(row0, tmp1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);\n  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);\n\n  tmp1   = SIMD.Float32x4.mul(row0, row1);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row3);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));\n  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);\n  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));\n\n  tmp1   = SIMD.Float32x4.mul(row0, row2);\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);\n  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);\n  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));\n  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);\n  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));\n  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);\n\n  SIMD.Float32x4.store(out, 0,  minor0);\n  SIMD.Float32x4.store(out, 4,  minor1);\n  SIMD.Float32x4.store(out, 8,  minor2);\n  SIMD.Float32x4.store(out, 12, minor3);\n  return out;\n};\n\n/**\n * Calculates the adjugate of a mat4 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\n mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nmat4.determinant = function (a) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],\n\n        b00 = a00 * a11 - a01 * a10,\n        b01 = a00 * a12 - a02 * a10,\n        b02 = a00 * a13 - a03 * a10,\n        b03 = a01 * a12 - a02 * a11,\n        b04 = a01 * a13 - a03 * a11,\n        b05 = a02 * a13 - a03 * a12,\n        b06 = a20 * a31 - a21 * a30,\n        b07 = a20 * a32 - a22 * a30,\n        b08 = a20 * a33 - a23 * a30,\n        b09 = a21 * a32 - a22 * a31,\n        b10 = a21 * a33 - a23 * a31,\n        b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n};\n\n/**\n * Multiplies two mat4's explicitly using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand, must be a Float32Array\n * @param {mat4} b the second operand, must be a Float32Array\n * @returns {mat4} out\n */\nmat4.SIMD.multiply = function (out, a, b) {\n    var a0 = SIMD.Float32x4.load(a, 0);\n    var a1 = SIMD.Float32x4.load(a, 4);\n    var a2 = SIMD.Float32x4.load(a, 8);\n    var a3 = SIMD.Float32x4.load(a, 12);\n\n    var b0 = SIMD.Float32x4.load(b, 0);\n    var out0 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 0, out0);\n\n    var b1 = SIMD.Float32x4.load(b, 4);\n    var out1 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),\n                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 4, out1);\n\n    var b2 = SIMD.Float32x4.load(b, 8);\n    var out2 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),\n                       SIMD.Float32x4.add(\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),\n                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 8, out2);\n\n    var b3 = SIMD.Float32x4.load(b, 12);\n    var out3 = SIMD.Float32x4.add(\n                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),\n                   SIMD.Float32x4.add(\n                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),\n                        SIMD.Float32x4.add(\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),\n                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));\n    SIMD.Float32x4.store(out, 12, out3);\n\n    return out;\n};\n\n/**\n * Multiplies two mat4's explicitly not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.scalar.multiply = function (out, a, b) {\n    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],\n        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],\n        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],\n        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n    return out;\n};\n\n/**\n * Multiplies two mat4's using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nmat4.mul = mat4.multiply;\n\n/**\n * Translate a mat4 by the given vector not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.scalar.translate = function (out, a, v) {\n    var x = v[0], y = v[1], z = v[2],\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.SIMD.translate = function (out, a, v) {\n    var a0 = SIMD.Float32x4.load(a, 0),\n        a1 = SIMD.Float32x4.load(a, 4),\n        a2 = SIMD.Float32x4.load(a, 8),\n        a3 = SIMD.Float32x4.load(a, 12),\n        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);\n\n    if (a !== out) {\n        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];\n        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];\n        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];\n    }\n\n    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));\n    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));\n    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));\n\n    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));\n    SIMD.Float32x4.store(out, 12, t0);\n\n    return out;\n};\n\n/**\n * Translates a mat4 by the given vector using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nmat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.scalar.scale = function(out, a, v) {\n    var x = v[0], y = v[1], z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nmat4.SIMD.scale = function(out, a, v) {\n    var a0, a1, a2;\n    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);\n\n    a0 = SIMD.Float32x4.load(a, 0);\n    SIMD.Float32x4.store(\n        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));\n\n    a1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(\n        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));\n\n    a2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(\n        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));\n\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n};\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n */\nmat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.rotate = function (out, a, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t,\n        a00, a01, a02, a03,\n        a10, a11, a12, a13,\n        a20, a21, a22, a23,\n        b00, b01, b02,\n        b10, b11, b12,\n        b20, b21, b22;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateX = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[0]  = a[0];\n        out[1]  = a[1];\n        out[2]  = a[2];\n        out[3]  = a[3];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[4] = a10 * c + a20 * s;\n    out[5] = a11 * c + a21 * s;\n    out[6] = a12 * c + a22 * s;\n    out[7] = a13 * c + a23 * s;\n    out[8] = a20 * c - a10 * s;\n    out[9] = a21 * c - a11 * s;\n    out[10] = a22 * c - a12 * s;\n    out[11] = a23 * c - a13 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateX = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n      out[0]  = a[0];\n      out[1]  = a[1];\n      out[2]  = a[2];\n      out[3]  = a[3];\n      out[12] = a[12];\n      out[13] = a[13];\n      out[14] = a[14];\n      out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;\n\n/**\n * Rotates a matrix by the given angle around the Y axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateY = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c - a20 * s;\n    out[1] = a01 * c - a21 * s;\n    out[2] = a02 * c - a22 * s;\n    out[3] = a03 * c - a23 * s;\n    out[8] = a00 * s + a20 * c;\n    out[9] = a01 * s + a21 * c;\n    out[10] = a02 * s + a22 * c;\n    out[11] = a03 * s + a23 * c;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateY = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged rows\n        out[4]  = a[4];\n        out[5]  = a[5];\n        out[6]  = a[6];\n        out[7]  = a[7];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_2 = SIMD.Float32x4.load(a, 8);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));\n    SIMD.Float32x4.store(out, 8,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;\n\n/**\n * Rotates a matrix by the given angle around the Z axis not using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.scalar.rotateZ = function (out, a, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad),\n        a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3],\n        a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    out[0] = a00 * c + a10 * s;\n    out[1] = a01 * c + a11 * s;\n    out[2] = a02 * c + a12 * s;\n    out[3] = a03 * c + a13 * s;\n    out[4] = a10 * c - a00 * s;\n    out[5] = a11 * c - a01 * s;\n    out[6] = a12 * c - a02 * s;\n    out[7] = a13 * c - a03 * s;\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis using SIMD\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.SIMD.rotateZ = function (out, a, rad) {\n    var s = SIMD.Float32x4.splat(Math.sin(rad)),\n        c = SIMD.Float32x4.splat(Math.cos(rad));\n\n    if (a !== out) { // If the source and destination differ, copy the unchanged last row\n        out[8]  = a[8];\n        out[9]  = a[9];\n        out[10] = a[10];\n        out[11] = a[11];\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    var a_0 = SIMD.Float32x4.load(a, 0);\n    var a_1 = SIMD.Float32x4.load(a, 4);\n    SIMD.Float32x4.store(out, 0,\n                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));\n    SIMD.Float32x4.store(out, 4,\n                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));\n    return out;\n};\n\n/**\n * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\n mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromTranslation = function(out, v) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nmat4.fromScaling = function(out, v) {\n    out[0] = v[0];\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = v[1];\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = v[2];\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nmat4.fromRotation = function(out, rad, axis) {\n    var x = axis[0], y = axis[1], z = axis[2],\n        len = Math.sqrt(x * x + y * y + z * z),\n        s, c, t;\n\n    if (Math.abs(len) < glMatrix.EPSILON) { return null; }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = x * x * t + c;\n    out[1] = y * x * t + z * s;\n    out[2] = z * x * t - y * s;\n    out[3] = 0;\n    out[4] = x * y * t - z * s;\n    out[5] = y * y * t + c;\n    out[6] = z * y * t + x * s;\n    out[7] = 0;\n    out[8] = x * z * t + y * s;\n    out[9] = y * z * t - x * s;\n    out[10] = z * z * t + c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromXRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = 1;\n    out[1]  = 0;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = c;\n    out[6] = s;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = -s;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromYRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = 0;\n    out[2]  = -s;\n    out[3]  = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = s;\n    out[9] = 0;\n    out[10] = c;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nmat4.fromZRotation = function(out, rad) {\n    var s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    // Perform axis-specific matrix multiplication\n    out[0]  = c;\n    out[1]  = s;\n    out[2]  = 0;\n    out[3]  = 0;\n    out[4] = -s;\n    out[5] = c;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslation = function (out, q, v) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - (yy + zz);\n    out[1] = xy + wz;\n    out[2] = xz - wy;\n    out[3] = 0;\n    out[4] = xy - wz;\n    out[5] = 1 - (xx + zz);\n    out[6] = yz + wx;\n    out[7] = 0;\n    out[8] = xz + wy;\n    out[9] = yz - wx;\n    out[10] = 1 - (xx + yy);\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nmat4.getTranslation = function (out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n};\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nmat4.getRotation = function (out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) { \n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S; \n    out[2] = (mat[1] - mat[4]) / S; \n  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { \n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S; \n    out[2] = (mat[8] + mat[2]) / S; \n  } else if (mat[5] > mat[10]) { \n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S; \n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S; \n  } else { \n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScale = function (out, q, v, s) {\n    // Quaternion math\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        xy = x * y2,\n        xz = x * z2,\n        yy = y * y2,\n        yz = y * z2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2,\n        sx = s[0],\n        sy = s[1],\n        sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     var quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nmat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3],\n      x2 = x + x,\n      y2 = y + y,\n      z2 = z + z,\n\n      xx = x * x2,\n      xy = x * y2,\n      xz = x * z2,\n      yy = y * y2,\n      yz = y * z2,\n      zz = z * z2,\n      wx = w * x2,\n      wy = w * y2,\n      wz = w * z2,\n\n      sx = s[0],\n      sy = s[1],\n      sz = s[2],\n\n      ox = o[0],\n      oy = o[1],\n      oz = o[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n\n  return out;\n};\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nmat4.fromQuat = function (out, q) {\n    var x = q[0], y = q[1], z = q[2], w = q[3],\n        x2 = x + x,\n        y2 = y + y,\n        z2 = z + z,\n\n        xx = x * x2,\n        yx = y * x2,\n        yy = y * y2,\n        zx = z * x2,\n        zy = z * y2,\n        zz = z * z2,\n        wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.frustum = function (out, left, right, bottom, top, near, far) {\n    var rl = 1 / (right - left),\n        tb = 1 / (top - bottom),\n        nf = 1 / (near - far);\n    out[0] = (near * 2) * rl;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = (near * 2) * tb;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = (right + left) * rl;\n    out[9] = (top + bottom) * tb;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (far * near * 2) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspective = function (out, fovy, aspect, near, far) {\n    var f = 1.0 / Math.tan(fovy / 2),\n        nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = (2 * far * near) * nf;\n    out[15] = 0;\n    return out;\n};\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.perspectiveFromFieldOfView = function (out, fov, near, far) {\n    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),\n        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),\n        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),\n        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),\n        xScale = 2.0 / (leftTan + rightTan),\n        yScale = 2.0 / (upTan + downTan);\n\n    out[0] = xScale;\n    out[1] = 0.0;\n    out[2] = 0.0;\n    out[3] = 0.0;\n    out[4] = 0.0;\n    out[5] = yScale;\n    out[6] = 0.0;\n    out[7] = 0.0;\n    out[8] = -((leftTan - rightTan) * xScale * 0.5);\n    out[9] = ((upTan - downTan) * yScale * 0.5);\n    out[10] = far / (near - far);\n    out[11] = -1.0;\n    out[12] = 0.0;\n    out[13] = 0.0;\n    out[14] = (far * near) / (near - far);\n    out[15] = 0.0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nmat4.ortho = function (out, left, right, bottom, top, near, far) {\n    var lr = 1 / (left - right),\n        bt = 1 / (bottom - top),\n        nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n};\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nmat4.lookAt = function (out, eye, center, up) {\n    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,\n        eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n        Math.abs(eyey - centery) < glMatrix.EPSILON &&\n        Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n        return mat4.identity(out);\n    }\n\n    z0 = eyex - centerx;\n    z1 = eyey - centery;\n    z2 = eyez - centerz;\n\n    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    x0 = upy * z2 - upz * z1;\n    x1 = upz * z0 - upx * z2;\n    x2 = upx * z1 - upy * z0;\n    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1 / len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    }\n\n    y0 = z1 * x2 - z2 * x1;\n    y1 = z2 * x0 - z0 * x2;\n    y2 = z0 * x1 - z1 * x0;\n\n    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1 / len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    out[0] = x0;\n    out[1] = y0;\n    out[2] = z0;\n    out[3] = 0;\n    out[4] = x1;\n    out[5] = y1;\n    out[6] = z1;\n    out[7] = 0;\n    out[8] = x2;\n    out[9] = y2;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n    out[15] = 1;\n\n    return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} mat matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nmat4.str = function (a) {\n    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n};\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nmat4.frob = function (a) {\n    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n};\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n};\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nmat4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n};\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nmat4.sub = mat4.subtract;\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nmat4.multiplyScalar = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n};\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nmat4.multiplyScalarAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    out[4] = a[4] + (b[4] * scale);\n    out[5] = a[5] + (b[5] * scale);\n    out[6] = a[6] + (b[6] * scale);\n    out[7] = a[7] + (b[7] * scale);\n    out[8] = a[8] + (b[8] * scale);\n    out[9] = a[9] + (b[9] * scale);\n    out[10] = a[10] + (b[10] * scale);\n    out[11] = a[11] + (b[11] * scale);\n    out[12] = a[12] + (b[12] * scale);\n    out[13] = a[13] + (b[13] * scale);\n    out[14] = a[14] + (b[14] * scale);\n    out[15] = a[15] + (b[15] * scale);\n    return out;\n};\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && \n           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && \n           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n};\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nmat4.equals = function (a, b) {\n    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],\n        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], \n        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], \n        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],\n        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], \n        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], \n        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n};\n\n\n\nmodule.exports = mat4;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/mat4.js\n ** module id = 20\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\nvar mat3 = require(\"./mat3.js\");\nvar vec3 = require(\"./vec3.js\");\nvar vec4 = require(\"./vec4.js\");\n\n/**\n * @class Quaternion\n * @name quat\n */\nvar quat = {};\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nquat.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nquat.rotationTo = (function() {\n    var tmpvec3 = vec3.create();\n    var xUnitVec3 = vec3.fromValues(1,0,0);\n    var yUnitVec3 = vec3.fromValues(0,1,0);\n\n    return function(out, a, b) {\n        var dot = vec3.dot(a, b);\n        if (dot < -0.999999) {\n            vec3.cross(tmpvec3, xUnitVec3, a);\n            if (vec3.length(tmpvec3) < 0.000001)\n                vec3.cross(tmpvec3, yUnitVec3, a);\n            vec3.normalize(tmpvec3, tmpvec3);\n            quat.setAxisAngle(out, tmpvec3, Math.PI);\n            return out;\n        } else if (dot > 0.999999) {\n            out[0] = 0;\n            out[1] = 0;\n            out[2] = 0;\n            out[3] = 1;\n            return out;\n        } else {\n            vec3.cross(tmpvec3, a, b);\n            out[0] = tmpvec3[0];\n            out[1] = tmpvec3[1];\n            out[2] = tmpvec3[2];\n            out[3] = 1 + dot;\n            return quat.normalize(out, out);\n        }\n    };\n})();\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nquat.setAxes = (function() {\n    var matr = mat3.create();\n\n    return function(out, view, right, up) {\n        matr[0] = right[0];\n        matr[3] = right[1];\n        matr[6] = right[2];\n\n        matr[1] = up[0];\n        matr[4] = up[1];\n        matr[7] = up[2];\n\n        matr[2] = -view[0];\n        matr[5] = -view[1];\n        matr[8] = -view[2];\n\n        return quat.normalize(out, quat.fromMat3(out, matr));\n    };\n})();\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nquat.clone = vec4.clone;\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nquat.fromValues = vec4.fromValues;\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nquat.copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nquat.set = vec4.set;\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nquat.identity = function(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n};\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nquat.setAxisAngle = function(out, axis, rad) {\n    rad = rad * 0.5;\n    var s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n};\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nquat.getAxisAngle = function(out_axis, q) {\n    var rad = Math.acos(q[3]) * 2.0;\n    var s = Math.sin(rad / 2.0);\n    if (s != 0.0) {\n        out_axis[0] = q[0] / s;\n        out_axis[1] = q[1] / s;\n        out_axis[2] = q[2] / s;\n    } else {\n        // If s is zero, return any axis (no rotation - axis does not matter)\n        out_axis[0] = 1;\n        out_axis[1] = 0;\n        out_axis[2] = 0;\n    }\n    return rad;\n};\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nquat.add = vec4.add;\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nquat.multiply = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n};\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nquat.mul = quat.multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nquat.scale = vec4.scale;\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateX = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateY = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        by = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n};\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nquat.rotateZ = function (out, a, rad) {\n    rad *= 0.5; \n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bz = Math.sin(rad), bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n};\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nquat.calculateW = function (out, a) {\n    var x = a[0], y = a[1], z = a[2];\n\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n    return out;\n};\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nquat.dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nquat.lerp = vec4.lerp;\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nquat.slerp = function (out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n\n    var ax = a[0], ay = a[1], az = a[2], aw = a[3],\n        bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n    var        omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if ( cosom < 0.0 ) {\n        cosom = -cosom;\n        bx = - bx;\n        by = - by;\n        bz = - bz;\n        bw = - bw;\n    }\n    // calculate coefficients\n    if ( (1.0 - cosom) > 0.000001 ) {\n        // standard case (slerp)\n        omega  = Math.acos(cosom);\n        sinom  = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {        \n        // \"from\" and \"to\" quaternions are very close \n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n    \n    return out;\n};\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nquat.sqlerp = (function () {\n  var temp1 = quat.create();\n  var temp2 = quat.create();\n  \n  return function (out, a, b, c, d, t) {\n    quat.slerp(temp1, a, d, t);\n    quat.slerp(temp2, b, c, t);\n    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));\n    \n    return out;\n  };\n}());\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nquat.invert = function(out, a) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,\n        invDot = dot ? 1.0/dot : 0;\n    \n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0*invDot;\n    out[1] = -a1*invDot;\n    out[2] = -a2*invDot;\n    out[3] = a3*invDot;\n    return out;\n};\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nquat.conjugate = function (out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n * @function\n */\nquat.length = vec4.length;\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nquat.len = quat.length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nquat.squaredLength = vec4.squaredLength;\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nquat.sqrLen = quat.squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nquat.normalize = vec4.normalize;\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nquat.fromMat3 = function(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    var fTrace = m[0] + m[4] + m[8];\n    var fRoot;\n\n    if ( fTrace > 0.0 ) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5/fRoot;  // 1/(4w)\n        out[0] = (m[5]-m[7])*fRoot;\n        out[1] = (m[6]-m[2])*fRoot;\n        out[2] = (m[1]-m[3])*fRoot;\n    } else {\n        // |w| <= 1/2\n        var i = 0;\n        if ( m[4] > m[0] )\n          i = 1;\n        if ( m[8] > m[i*3+i] )\n          i = 2;\n        var j = (i+1)%3;\n        var k = (i+2)%3;\n        \n        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n    }\n    \n    return out;\n};\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nquat.str = function (a) {\n    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.exactEquals = vec4.exactEquals;\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nquat.equals = vec4.equals;\n\nmodule.exports = quat;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/quat.js\n ** module id = 21\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 3 Dimensional Vector\n * @name vec3\n */\nvar vec3 = {};\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nvec3.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nvec3.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nvec3.fromValues = function(x, y, z) {\n    var out = new glMatrix.ARRAY_TYPE(3);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nvec3.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n};\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nvec3.set = function(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvec3.sub = vec3.subtract;\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvec3.mul = vec3.multiply;\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n};\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvec3.div = vec3.divide;\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nvec3.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nvec3.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nvec3.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    return out;\n};\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nvec3.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n};\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nvec3.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nvec3.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvec3.dist = vec3.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec3.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvec3.sqrDist = vec3.squaredDistance;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec3.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvec3.len = vec3.length;\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec3.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    return x*x + y*y + z*z;\n};\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvec3.sqrLen = vec3.squaredLength;\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nvec3.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nvec3.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n};\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nvec3.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2];\n    var len = x*x + y*y + z*z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n        out[2] = a[2] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec3.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n};\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nvec3.cross = function(out, a, b) {\n    var ax = a[0], ay = a[1], az = a[2],\n        bx = b[0], by = b[1], bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n};\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.hermite = function (out, a, b, c, d, t) {\n  var factorTimes2 = t * t,\n      factor1 = factorTimes2 * (2 * t - 3) + 1,\n      factor2 = factorTimes2 * (t - 2) + t,\n      factor3 = factorTimes2 * (t - 1),\n      factor4 = factorTimes2 * (3 - 2 * t);\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nvec3.bezier = function (out, a, b, c, d, t) {\n  var inverseFactor = 1 - t,\n      inverseFactorTimesTwo = inverseFactor * inverseFactor,\n      factorTimes2 = t * t,\n      factor1 = inverseFactorTimesTwo * inverseFactor,\n      factor2 = 3 * t * inverseFactorTimesTwo,\n      factor3 = 3 * factorTimes2 * inverseFactor,\n      factor4 = factorTimes2 * t;\n  \n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  \n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nvec3.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    var z = (glMatrix.RANDOM() * 2.0) - 1.0;\n    var zScale = Math.sqrt(1.0-z*z) * scale;\n\n    out[0] = Math.cos(r) * zScale;\n    out[1] = Math.sin(r) * zScale;\n    out[2] = z * scale;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2],\n        w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n};\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nvec3.transformMat3 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n};\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nvec3.transformQuat = function(out, a, q) {\n    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    return out;\n};\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateX = function(out, a, b, c){\n   var p = [], r=[];\n\t  //Translate point to the origin\n\t  p[0] = a[0] - b[0];\n\t  p[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n\n\t  //perform rotation\n\t  r[0] = p[0];\n\t  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n\t  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n\t  //translate to correct position\n\t  out[0] = r[0] + b[0];\n\t  out[1] = r[1] + b[1];\n\t  out[2] = r[2] + b[2];\n\n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateY = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  \tr[1] = p[1];\n  \tr[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nvec3.rotateZ = function(out, a, b, c){\n  \tvar p = [], r=[];\n  \t//Translate point to the origin\n  \tp[0] = a[0] - b[0];\n  \tp[1] = a[1] - b[1];\n  \tp[2] = a[2] - b[2];\n  \n  \t//perform rotation\n  \tr[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  \tr[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  \tr[2] = p[2];\n  \n  \t//translate to correct position\n  \tout[0] = r[0] + b[0];\n  \tout[1] = r[1] + b[1];\n  \tout[2] = r[2] + b[2];\n  \n  \treturn out;\n};\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec3.forEach = (function() {\n    var vec = vec3.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 3;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nvec3.angle = function(a, b) {\n   \n    var tempA = vec3.fromValues(a[0], a[1], a[2]);\n    var tempB = vec3.fromValues(b[0], b[1], b[2]);\n \n    vec3.normalize(tempA, tempA);\n    vec3.normalize(tempB, tempB);\n \n    var cosine = vec3.dot(tempA, tempB);\n\n    if(cosine > 1.0){\n        return 0;\n    } else {\n        return Math.acos(cosine);\n    }     \n};\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec3.str = function (a) {\n    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec3.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2];\n    var b0 = b[0], b1 = b[1], b2 = b[2];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n};\n\nmodule.exports = vec3;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/vec3.js\n ** module id = 22\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 4 Dimensional Vector\n * @name vec4\n */\nvar vec4 = {};\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nvec4.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nvec4.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nvec4.fromValues = function(x, y, z, w) {\n    var out = new glMatrix.ARRAY_TYPE(4);\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nvec4.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nvec4.set = function(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n};\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvec4.sub = vec4.subtract;\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    out[3] = a[3] * b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvec4.mul = vec4.multiply;\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    out[3] = a[3] / b[3];\n    return out;\n};\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvec4.div = vec4.divide;\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nvec4.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    out[2] = Math.ceil(a[2]);\n    out[3] = Math.ceil(a[3]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nvec4.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    out[2] = Math.floor(a[2]);\n    out[3] = Math.floor(a[3]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    out[2] = Math.min(a[2], b[2]);\n    out[3] = Math.min(a[3], b[3]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nvec4.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    out[2] = Math.max(a[2], b[2]);\n    out[3] = Math.max(a[3], b[3]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nvec4.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    out[2] = Math.round(a[2]);\n    out[3] = Math.round(a[3]);\n    return out;\n};\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nvec4.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n};\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nvec4.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    out[2] = a[2] + (b[2] * scale);\n    out[3] = a[3] + (b[3] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nvec4.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvec4.dist = vec4.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec4.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1],\n        z = b[2] - a[2],\n        w = b[3] - a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvec4.sqrDist = vec4.squaredDistance;\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec4.length = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n};\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvec4.len = vec4.length;\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec4.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    return x*x + y*y + z*z + w*w;\n};\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvec4.sqrLen = vec4.squaredLength;\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nvec4.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = -a[3];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nvec4.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n};\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nvec4.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1],\n        z = a[2],\n        w = a[3];\n    var len = x*x + y*y + z*z + w*w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n        out[0] = x * len;\n        out[1] = y * len;\n        out[2] = z * len;\n        out[3] = w * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec4.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n};\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nvec4.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nvec4.random = function (out, scale) {\n    scale = scale || 1.0;\n\n    //TODO: This is a pretty awful way of doing this. Find something better.\n    out[0] = glMatrix.RANDOM();\n    out[1] = glMatrix.RANDOM();\n    out[2] = glMatrix.RANDOM();\n    out[3] = glMatrix.RANDOM();\n    vec4.normalize(out, out);\n    vec4.scale(out, out, scale);\n    return out;\n};\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nvec4.transformMat4 = function(out, a, m) {\n    var x = a[0], y = a[1], z = a[2], w = a[3];\n    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n    return out;\n};\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nvec4.transformQuat = function(out, a, q) {\n    var x = a[0], y = a[1], z = a[2],\n        qx = q[0], qy = q[1], qz = q[2], qw = q[3],\n\n        // calculate quat * vec\n        ix = qw * x + qy * z - qz * y,\n        iy = qw * y + qz * x - qx * z,\n        iz = qw * z + qx * y - qy * x,\n        iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n    out[3] = a[3];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec4.forEach = (function() {\n    var vec = vec4.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 4;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec4.str = function (a) {\n    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n};\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec4.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n};\n\nmodule.exports = vec4;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/vec4.js\n ** module id = 23\n ** module chunks = 0\n **/","/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nvar glMatrix = require(\"./common.js\");\n\n/**\n * @class 2 Dimensional Vector\n * @name vec2\n */\nvar vec2 = {};\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nvec2.create = function() {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = 0;\n    out[1] = 0;\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nvec2.clone = function(a) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nvec2.fromValues = function(x, y) {\n    var out = new glMatrix.ARRAY_TYPE(2);\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nvec2.copy = function(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    return out;\n};\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nvec2.set = function(out, x, y) {\n    out[0] = x;\n    out[1] = y;\n    return out;\n};\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.add = function(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    return out;\n};\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.subtract = function(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvec2.sub = vec2.subtract;\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.multiply = function(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvec2.mul = vec2.multiply;\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.divide = function(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    return out;\n};\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvec2.div = vec2.divide;\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nvec2.ceil = function (out, a) {\n    out[0] = Math.ceil(a[0]);\n    out[1] = Math.ceil(a[1]);\n    return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nvec2.floor = function (out, a) {\n    out[0] = Math.floor(a[0]);\n    out[1] = Math.floor(a[1]);\n    return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.min = function(out, a, b) {\n    out[0] = Math.min(a[0], b[0]);\n    out[1] = Math.min(a[1], b[1]);\n    return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nvec2.max = function(out, a, b) {\n    out[0] = Math.max(a[0], b[0]);\n    out[1] = Math.max(a[1], b[1]);\n    return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nvec2.round = function (out, a) {\n    out[0] = Math.round(a[0]);\n    out[1] = Math.round(a[1]);\n    return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nvec2.scale = function(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nvec2.scaleAndAdd = function(out, a, b, scale) {\n    out[0] = a[0] + (b[0] * scale);\n    out[1] = a[1] + (b[1] * scale);\n    return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nvec2.distance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvec2.dist = vec2.distance;\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nvec2.squaredDistance = function(a, b) {\n    var x = b[0] - a[0],\n        y = b[1] - a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvec2.sqrDist = vec2.squaredDistance;\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nvec2.length = function (a) {\n    var x = a[0],\n        y = a[1];\n    return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvec2.len = vec2.length;\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nvec2.squaredLength = function (a) {\n    var x = a[0],\n        y = a[1];\n    return x*x + y*y;\n};\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvec2.sqrLen = vec2.squaredLength;\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nvec2.negate = function(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nvec2.inverse = function(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nvec2.normalize = function(out, a) {\n    var x = a[0],\n        y = a[1];\n    var len = x*x + y*y;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n        out[0] = a[0] * len;\n        out[1] = a[1] * len;\n    }\n    return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nvec2.dot = function (a, b) {\n    return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nvec2.cross = function(out, a, b) {\n    var z = a[0] * b[1] - a[1] * b[0];\n    out[0] = out[1] = 0;\n    out[2] = z;\n    return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nvec2.lerp = function (out, a, b, t) {\n    var ax = a[0],\n        ay = a[1];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nvec2.random = function (out, scale) {\n    scale = scale || 1.0;\n    var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n    out[0] = Math.cos(r) * scale;\n    out[1] = Math.sin(r) * scale;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y;\n    out[1] = m[1] * x + m[3] * y;\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat2d = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[2] * y + m[4];\n    out[1] = m[1] * x + m[3] * y + m[5];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat3 = function(out, a, m) {\n    var x = a[0],\n        y = a[1];\n    out[0] = m[0] * x + m[3] * y + m[6];\n    out[1] = m[1] * x + m[4] * y + m[7];\n    return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nvec2.transformMat4 = function(out, a, m) {\n    var x = a[0], \n        y = a[1];\n    out[0] = m[0] * x + m[4] * y + m[12];\n    out[1] = m[1] * x + m[5] * y + m[13];\n    return out;\n};\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvec2.forEach = (function() {\n    var vec = vec2.create();\n\n    return function(a, stride, offset, count, fn, arg) {\n        var i, l;\n        if(!stride) {\n            stride = 2;\n        }\n\n        if(!offset) {\n            offset = 0;\n        }\n        \n        if(count) {\n            l = Math.min((count * stride) + offset, a.length);\n        } else {\n            l = a.length;\n        }\n\n        for(i = offset; i < l; i += stride) {\n            vec[0] = a[i]; vec[1] = a[i+1];\n            fn(vec, vec, arg);\n            a[i] = vec[0]; a[i+1] = vec[1];\n        }\n        \n        return a;\n    };\n})();\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} vec vector to represent as a string\n * @returns {String} string representation of the vector\n */\nvec2.str = function (a) {\n    return 'vec2(' + a[0] + ', ' + a[1] + ')';\n};\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.exactEquals = function (a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n};\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvec2.equals = function (a, b) {\n    var a0 = a[0], a1 = a[1];\n    var b0 = b[0], b1 = b[1];\n    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n};\n\nmodule.exports = vec2;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/gl-matrix/src/gl-matrix/vec2.js\n ** module id = 24\n ** module chunks = 0\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function approxEqual(a: number, b: number): boolean {\n  if (a === b) {\n    return true;\n  }\n  return (Math.abs(a - b) / Math.min(Math.abs(a), Math.abs(b)) < 1e-6);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/compare.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface WritableArrayLike<T> {\n  length: number;\n  [n: number]: T;\n}\n\n/**\n * Partitions array[start:end] such that all elements for which predicate\n * returns true are before the elements for which predicate returns false.\n *\n * predicate will be called exactly once for each element in array[start:end],\n * in order.\n *\n * @returns {number} The index of the first element for which predicate returns\n * false, or end if there is no such element.\n */\nexport function partitionArray<T>(\n    array: T[], start: number, end: number, predicate: (x: T) => boolean): number {\n  for (; start < end;) {\n    let x = array[start];\n    if (predicate(x)) {\n      ++start;\n      continue;\n    }\n    --end;\n    array[start] = array[end];\n    array[end] = x;\n  }\n  return end;\n}\n\nexport interface TypedArrayConstructor {\n  new (buffer: ArrayBuffer, byteOffset: number, length: number): TypedArray;\n  BYTES_PER_ELEMENT: number;\n}\n\nexport type TypedArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array |\n    Uint32Array | Float32Array | Float64Array;\n\n/**\n * Returns an array of size newSize that starts with the contents of array.\n * Either returns array if it has the correct size, or a new array with zero\n * padding at the end.\n */\nexport function maybePadArray<T extends TypedArray>(array: T, newSize: number): T {\n  if (array.length === newSize) {\n    return array;\n  }\n  let newArray = new (<any>array.constructor)(newSize);\n  newArray.set(array);\n  return newArray;\n}\n\nexport function getFortranOrderStrides(size: ArrayLike<number>, baseStride = 1) {\n  let length = size.length;\n  let strides = new Array<number>(length);\n  let stride = strides[0] = baseStride;\n  for (let i = 1; i < length; ++i) {\n    stride *= size[i - 1];\n    strides[i] = stride;\n  }\n  return strides;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/array.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'neuroglancer/datasource/brainmaps/api_backend';\n\nimport {handleChunkDownloadPromise} from 'neuroglancer/chunk_manager/backend';\nimport {makeRequest} from 'neuroglancer/datasource/brainmaps/api';\nimport {VolumeChunkEncoding, VolumeSourceParameters, volumeSourceToString, MeshSourceParameters, meshSourceToString} from 'neuroglancer/datasource/brainmaps/base';\nimport {ManifestChunk, FragmentChunk, MeshSource as GenericMeshSource, decodeJsonManifestChunk, decodeVertexPositionsAndIndices} from 'neuroglancer/mesh/backend';\nimport {VolumeChunk, VolumeChunkSource as GenericVolumeChunkSource} from 'neuroglancer/sliceview/backend';\nimport {ChunkDecoder} from 'neuroglancer/sliceview/backend_chunk_decoders';\nimport {decodeCompressedSegmentationChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {vec3Key} from 'neuroglancer/util/geom';\nimport {RPC, registerSharedObject} from 'neuroglancer/worker_rpc';\nimport {inflate} from 'pako';\n\nclass VolumeChunkSource extends GenericVolumeChunkSource {\n  parameters: VolumeSourceParameters;\n  encodingParams: string;\n  chunkDecoder: ChunkDecoder;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    let parameters = this.parameters = options['parameters'];\n    const compression_suffix = `/image_format_options.gzip_compression_level=6`;\n    switch (parameters['encoding']) {\n      case VolumeChunkEncoding.RAW:\n        this.chunkDecoder = (chunk, response) => {\n          decodeRawChunk(chunk, inflate(new Uint8Array(response)).buffer);\n        };\n        this.encodingParams = `/subvolume_format=RAW${compression_suffix}`;\n        break;\n      case VolumeChunkEncoding.JPEG:\n        this.chunkDecoder = decodeJpegChunk;\n        this.encodingParams =\n            '/subvolume_format=SINGLE_IMAGE/image_format_options.image_format=JPEG';\n        break;\n      case VolumeChunkEncoding.COMPRESSED_SEGMENTATION:\n        this.chunkDecoder = (chunk, response) => {\n          decodeCompressedSegmentationChunk(chunk, inflate(new Uint8Array(response)).buffer);\n        };\n        this.encodingParams =\n            `/subvolume_format=RAW/image_format_options.compressed_segmentation_block_size=${vec3Key(this.spec.compressedSegmentationBlockSize)}${compression_suffix}`;\n        break;\n    }\n  }\n\n  download(chunk: VolumeChunk) {\n    let {parameters} = this;\n    let path: string;\n    {\n      // chunkPosition must not be captured, since it will be invalidated by the next call to\n      // computeChunkBounds.\n      let chunkPosition = this.computeChunkBounds(chunk);\n      let {chunkDataSize} = chunk;\n      path =\n          `/v1beta2/binary/volumes/binary/volumes/subvolume/header.volume_id=${parameters['volume_id']}/geometry.corner=${vec3Key(chunkPosition)}/geometry.size=${vec3Key(chunkDataSize)}/geometry.scale=${parameters['scaleIndex']}${this.encodingParams}?alt=media`;\n    }\n    handleChunkDownloadPromise(\n        chunk, makeRequest(parameters['instance'], 'GET', path, 'arraybuffer'), this.chunkDecoder);\n  }\n  toString() { return volumeSourceToString(this.parameters); }\n};\nregisterSharedObject('brainmaps/VolumeChunkSource', VolumeChunkSource);\n\nfunction decodeManifestChunk(chunk: ManifestChunk, response: any) {\n  return decodeJsonManifestChunk(chunk, response, 'fragmentKey');\n}\n\nfunction decodeFragmentChunk(chunk: FragmentChunk, response: ArrayBuffer) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  let numVerticesHigh = dv.getUint32(4, true);\n  if (numVerticesHigh !== 0) {\n    throw new Error(`The number of vertices should not exceed 2^32-1.`);\n  }\n  decodeVertexPositionsAndIndices(\n      chunk, response, Endianness.LITTLE, /*vertexByteOffset=*/8, numVertices);\n}\n\nclass MeshSource extends GenericMeshSource {\n  parameters: MeshSourceParameters;\n  constructor (rpc: RPC, options: any) {\n    super(rpc, options);\n    this.parameters = options['parameters'];\n  }\n\n  download(chunk: ManifestChunk) {\n    let {parameters} = this;\n    const path = `/v1beta2/objects/${parameters['volume_id']}/meshes/${parameters['mesh_name']}:listfragments?object_id=${chunk.objectId}`;\n    handleChunkDownloadPromise(\n        chunk, makeRequest(parameters['instance'], 'GET', path, 'json'), decodeManifestChunk);\n  }\n\n  downloadFragment(chunk: FragmentChunk) {\n    let {parameters} = this;\n    const path =\n        `/v1beta2/binary/objects/binary/objects/fragment/header.volume_id=${parameters['volume_id']}/mesh_name=${parameters['mesh_name']}/fragment_key=${chunk.fragmentId}/object_id=${chunk.manifestChunk.objectId}?alt=media`;\n    handleChunkDownloadPromise(\n        chunk, makeRequest(parameters['instance'], 'GET', path, 'arraybuffer'),\n        decodeFragmentChunk);\n  }\n\n  toString() { return meshSourceToString(this.parameters); }\n};\nregisterSharedObject('brainmaps/MeshSource', MeshSource);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/datasource/brainmaps/backend.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file\n * This implements the authentication API by simply forwarding all requests to the frontend.\n */\n\nimport {registerRPC} from 'neuroglancer/worker_rpc';\nimport {Token, implementation} from 'neuroglancer/datasource/brainmaps/api_implementation';\nimport {rpc} from 'neuroglancer/worker_rpc_context';\n\nlet resolvePromise: (token: Token) => void = null;\n\nimplementation.getNewTokenPromise = function(invalidToken) {\n  let msg: any = {};\n  if (invalidToken != null) {\n    msg['invalidToken'] = invalidToken;\n  }\n  let promise =\n    new Promise(function(resolve, reject) { resolvePromise = resolve; });\n  rpc.invoke('brainmaps.requestToken', msg);\n  return promise;\n};\n\nregisterRPC('brainmaps.receiveToken', function(x) {\n  resolvePromise(x['authResult']);\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/datasource/brainmaps/api_backend.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file\n * This file defines a global variable that specifies authentication API to use.\n *\n * The actual API is defined in api_{frontend,backend}.ts.\n *\n * This allows other code to be agnostic to whether it is running in the frontend (UI thread) or\n * backend (WebWorker thread)\n */\n\nexport type Token = any;\n\nexport class Implementation {\n  getNewTokenPromise: (invalidToken: Token) => Promise<Token>;\n}\nexport var implementation = new Implementation();\n\nlet promise: Promise<Token> = null;\nlet token: Token = null;\n\nexport function getToken(invalidToken?: Token) {\n  if (promise !== null && (token === null || invalidToken == null ||\n                           invalidToken['generationId'] !== token['generationId'])) {\n    // Either we already have a valid token, or we are already obtaining one.\n    return promise;\n  }\n  token = null;\n  promise = implementation.getNewTokenPromise(invalidToken);\n  promise.then((t: Token) => { token = t; });\n  return promise;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/datasource/brainmaps/api_implementation.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {getToken, Token} from 'neuroglancer/datasource/brainmaps/api_implementation';\nimport {openShardedHttpRequest, HttpError} from 'neuroglancer/util/http_request';\nimport {makeCancellablePromise, CancellablePromise} from 'neuroglancer/util/promise';\nexport var numPendingRequests = 0;\n\nexport type BrainmapsInstance = number;\nexport const PRODUCTION_INSTANCE = 0;\n\nexport const INSTANCE_NAMES: string[] = [];\n\n/**\n * Maps a BrainmapsInstance to the list of base URL shards to use for accessing it.\n */\nexport const INSTANCE_BASE_URLS: string[][] = [];\nconst instanceHostname: string[] = [];\n\nexport const INSTANCE_IDENTIFIERS: string[] = [];\n\nexport function brainmapsInstanceKey(instance: BrainmapsInstance) {\n  return INSTANCE_IDENTIFIERS[instance];\n}\n\nexport function setupBrainmapsInstance(instance: BrainmapsInstance, hostname: string, identifier: string, name: string) {\n  INSTANCE_IDENTIFIERS[instance] = identifier;\n  INSTANCE_NAMES[instance] = name;\n  instanceHostname[instance] = hostname;\n  let baseUrls = [`https://${hostname}`];\n  for (let shard = 0; shard <= 9; ++shard) {\n    baseUrls.push(`https://s${shard}-${hostname}`);\n  }\n  INSTANCE_BASE_URLS[instance] = baseUrls;\n}\n\nsetupBrainmapsInstance(PRODUCTION_INSTANCE, 'brainmaps.googleapis.com', 'prod', 'Brain Maps');\n\nexport function makeRequest(\n    instance: BrainmapsInstance, method: string, path: string,\n    responseType: 'arraybuffer'): CancellablePromise<ArrayBuffer>;\nexport function makeRequest(\n    instance: BrainmapsInstance, method: string, path: string,\n    responseType: 'json'): CancellablePromise<any>;\nexport function makeRequest(\n    instance: BrainmapsInstance, method: string, path: string, responseType: string): any;\n\nexport function makeRequest(\n    instance: BrainmapsInstance, method: string, path: string, responseType: string): any {\n  /**\n   * undefined means request not yet attempted.  null means request\n   * cancelled.\n   */\n  let xhr: XMLHttpRequest = undefined;\n  return makeCancellablePromise<any>((resolve, reject, onCancel) => {\n    function start(token: Token) {\n      if (xhr === null) {\n        --numPendingRequests;\n        return;\n      }\n      xhr = openShardedHttpRequest(INSTANCE_BASE_URLS[instance], path, method);\n      xhr.responseType = responseType;\n      xhr.setRequestHeader('Authorization', `${token['tokenType']} ${token['accessToken']}`);\n      xhr.onloadend = function(this: XMLHttpRequest) {\n        if (xhr === null) {\n          --numPendingRequests;\n          return;\n        }\n        let status = this.status;\n        if (status >= 200 && status < 300) {\n          --numPendingRequests;\n          resolve(this.response);\n        } else if (status === 403 || status === 401) {\n          // Authorization needed.\n          getToken(token).then(start);\n        } else {\n          --numPendingRequests;\n          reject(HttpError.fromXhr(this));\n        }\n      };\n      xhr.send();\n    }\n    onCancel(() => {\n      let origXhr = xhr;\n      xhr = null;\n      if (origXhr != null) {\n        origXhr.abort();\n      }\n    });\n    getToken().then(start);\n  });\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/datasource/brainmaps/api.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {simpleStringHash} from 'neuroglancer/util/hash';\nimport {makeCancellablePromise, CancellablePromise} from 'neuroglancer/util/promise';\n\nexport type RequestModifier = (request: XMLHttpRequest) => void;\n\nexport const URL_SYMBOL = Symbol('url');\nexport const METHOD_SYMBOL = Symbol('method');\n\nexport class HttpError extends Error {\n  method: string;\n  url: string;\n  code: number;\n  statusMessage: string;\n\n  constructor (method: string, url: string, code: number, statusMessage: string) {\n    let message = `${method} ${JSON.stringify(url)} resulted in HTTP error ${code}`;\n    if (statusMessage) {\n      message += `: ${statusMessage}`;\n    }\n    message += '.';\n    super(message);\n    this.name = 'HttpError';\n    this.message = message;\n    this.method = method;\n    this.url = url;\n    this.code = code;\n    this.statusMessage = statusMessage;\n  }\n\n  static fromXhr(xhr: XMLHttpRequest) {\n    return new HttpError((<any>xhr)[METHOD_SYMBOL], (<any>xhr)[URL_SYMBOL], xhr.status, xhr.statusText);\n  }\n};\n\nexport function openHttpRequest(url: string, method = 'GET') {\n  let xhr = new XMLHttpRequest();\n  (<any>xhr)[METHOD_SYMBOL] = method;\n  (<any>xhr)[URL_SYMBOL] = url;\n  xhr.open(method, url);\n  return xhr;\n}\n\nexport function pickShard(baseUrls: string|string[], path: string) {\n  if (Array.isArray(baseUrls)) {\n    let numShards = baseUrls.length;\n    let shard = numShards === 1 ? 0 : Math.abs(simpleStringHash(path)) % numShards;\n    return baseUrls[shard] + path;\n  }\n  return baseUrls + path;\n}\n\nexport function openShardedHttpRequest(baseUrls: string|string[], path: string, method = 'GET') {\n  let xhr = new XMLHttpRequest();\n  const url = pickShard(baseUrls, path);\n  (<any>xhr)[METHOD_SYMBOL] = method;\n  (<any>xhr)[URL_SYMBOL] = url;\n  xhr.open(method, url);\n  return xhr;\n}\n\nexport function sendHttpRequest(xhr: XMLHttpRequest, responseType: 'arraybuffer'): CancellablePromise<ArrayBuffer>;\nexport function sendHttpRequest(xhr: XMLHttpRequest, responseType: 'json'): CancellablePromise<any>;\nexport function sendHttpRequest(xhr: XMLHttpRequest, responseType: string): any;\n\nexport function sendHttpRequest(xhr: XMLHttpRequest, responseType: string) {\n  xhr.responseType = responseType;\n  return makeCancellablePromise((resolve, reject, onCancel) => {\n    xhr.onloadend = function(this: XMLHttpRequest) {\n      let status = this.status;\n      if (status >= 200 && status < 300) {\n        resolve(this.response);\n      } else {\n        reject(HttpError.fromXhr(xhr));\n      }\n    };\n    onCancel(() => { xhr.abort(); });\n    xhr.send();\n  });\n}\n\n/**\n * Parses a URL that may have a special protocol designation into a list of base URLs and a path.\n *\n * If the protocol is 'http' or 'https', the input string is returned as a single base URL, with an\n * empty path.\n *\n * Additionally, 'gs://bucket/path' is supported for accessing Google Storage buckets.\n */\nexport function parseSpecialUrl(url: string): [string[], string] {\n  const urlProtocolPattern = /^([^:\\/]+):\\/\\/([^\\/]+)(\\/.*)?$/;\n  let match = url.match(urlProtocolPattern);\n  if (match === null) {\n    throw new Error(`Invalid URL: ${JSON.stringify(url)}`);\n  }\n  const protocol = match[1];\n  if (protocol === 'gs') {\n    const bucket = match[2];\n    const baseUrls = [\n      `https://${bucket}.storage.googleapis.com`,\n      `https://storage.googleapis.com/${bucket}`,\n    ];\n    return [baseUrls, match[3]];\n  }\n  return [[url], ''];\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/http_request.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This is a very simple string hash function.  It isn't secure, but\n * is suitable for sharding of requests.\n */\nexport function simpleStringHash(s: string): number {\n  let h = 0;\n  let length = s.length;\n  for (let i = 0; i < length; ++i) {\n    h = (h * 31 + s.charCodeAt(i)) | 0;\n  }\n  return h;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/hash.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface CancellablePromise<T> extends Promise<T> {\n  // Prevents any chained actions from being called.\n  // Any finally handlers are scheduled to be run.\n  cancel?: () => void;\n\n  finally?: <TResult>(handler: () => TResult | PromiseLike<TResult>) => Promise<T>;\n}\n\nexport class CancellationError {\n  toString() { return 'CancellationError'; }\n};\n\n/**\n * Value thrown to indicate cancellation.\n */\nexport const CANCELLED = new CancellationError();\n\nexport function makeCancellablePromise<T>(executor: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason: any) => void, onCancel: (callback: () => void) => void) => void) {\n  let finished = false;\n  let cancelHandler: () => void;\n  let cancelFunction: () => void;\n  let promise: CancellablePromise<T> = new Promise<T>((resolve, reject) => {\n    function resolver(value: T) {\n      if (!finished) {\n        finished = true;\n        // This can't throw.\n        resolve(value);\n      }\n    }\n\n    function rejecter(value: any) {\n      if (!finished) {\n        finished = true;\n        // This can't throw.\n        reject(value);\n      }\n    }\n\n    function setCancelHandler(newCancelHandler: () => void) {\n      if (finished) {\n        try {\n          newCancelHandler();\n        } catch (ignoredError) {\n        }\n      }\n    }\n    try {\n      executor(resolver, rejecter, setCancelHandler);\n    } catch (executorError) {\n      rejecter(executorError);\n    }\n    cancelFunction = () => {\n      if (!finished) {\n        finished = true;\n        if (cancelHandler !== undefined) {\n          try {\n            cancelHandler();\n          } catch (ignoredError) {\n          }\n          cancelHandler = undefined;\n        }\n        reject(CANCELLED);\n      }\n    };\n  });\n  promise.cancel = cancelFunction;\n  return promise;\n}\n\nexport function cancelPromise<T>(promise: CancellablePromise<T>|null|undefined) {\n  if (promise != null) {\n    let {cancel} = promise;\n    if (cancel !== undefined) {\n      cancel.call(promise);\n    }\n  }\n}\n\n/**\n * Schedules a call to handler when promise is either fulfilled or rejected.  If the handler throws\n * an error, the returned promise is rejected with it.  Otherwise, the returned promise has the same\n * state as the original promise.\n *\n * If the returned promise is cancelled before the inputPromise is finished, the inputPromise is\n * cancelled.\n */\nexport function callFinally<T>(inputPromise: CancellablePromise<T>, handler: (onCancel: (newCancelHandler: () => void) => void) => void|PromiseLike<void>) {\n  return makeCancellablePromise<T>((resolve, reject, onCancel) => {\n    onCancel(() => { cancelPromise(inputPromise); });\n    inputPromise.then(value => {\n      onCancel(undefined);\n      Promise.resolve(handler(onCancel)).then(() => { resolve(value); });\n    }, reason => {\n      onCancel(undefined);\n      try {\n        Promise.resolve(handler(onCancel)).then(() => { reject(reason); }, reject);\n      } catch (otherError) {\n        reject(otherError);\n      }\n    });\n  });\n}\n\n/**\n * Schedules a call to onFulfilled as soon as the promise is fulfilled.\n *\n * A cancellation handler may be set, which is called if the returned promise is cancelled afer\n * inputPromise is fulfilled.  If the returned promise is cancelled before inputPromise is\n * fulfilled, inputPromise is cancelled if it supports it.\n */\nexport function cancellableThen<T, TResult>(inputPromise: CancellablePromise<T>, onFulfilled: (value: T, onCancel: (newCancelHandler: () => void) => void) => TResult | PromiseLike<TResult>): CancellablePromise<TResult> {\n  return makeCancellablePromise<TResult>((resolve, reject, onCancel) => {\n    let cancelled = false;\n    onCancel(() => {\n      cancelled = true;\n      cancelPromise(inputPromise);\n    });\n    inputPromise.then(value => {\n      if (cancelled) {\n        reject(CANCELLED);\n      } else {\n        onCancel(undefined);\n        resolve(onFulfilled(value, onCancel));\n      }\n    });\n  });\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/promise.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {BrainmapsInstance, brainmapsInstanceKey} from 'neuroglancer/datasource/brainmaps/api';\n\nexport enum VolumeChunkEncoding {\n  RAW,\n  JPEG,\n  COMPRESSED_SEGMENTATION\n}\n\nexport interface VolumeSourceParameters {\n  instance: BrainmapsInstance;\n  volume_id: string;\n  scaleIndex: number;\n  encoding: VolumeChunkEncoding;\n}\n\nexport function volumeSourceToString(p: VolumeSourceParameters) {\n  return `brainmaps-${brainmapsInstanceKey(p['instance'])}:volume/${p['volume_id']}/${p['scaleIndex']}/${VolumeChunkEncoding[p['encoding']]}`;\n}\n\nexport interface MeshSourceParameters {\n  instance: BrainmapsInstance;\n  volume_id: string;\n  mesh_name: string;\n}\n\nexport function meshSourceToString(p: MeshSourceParameters) {\n  return `brainmaps:${brainmapsInstanceKey(p['instance'])}:mesh/${p['volume_id']}/${p['mesh_name']}`;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/datasource/brainmaps/base.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'neuroglancer/uint64_set'; // Import for side effects.\n\nimport {Chunk, ChunkManager, ChunkSource} from 'neuroglancer/chunk_manager/backend';\nimport {ChunkPriorityTier, ChunkState} from 'neuroglancer/chunk_manager/base';\nimport {Uint64Set} from 'neuroglancer/uint64_set';\nimport {vec3} from 'neuroglancer/util/geom';\nimport {verifyObject, verifyObjectProperty} from 'neuroglancer/util/json';\nimport {Uint64} from 'neuroglancer/util/uint64';\nimport {convertEndian32, Endianness} from 'neuroglancer/util/endian';\nimport {RPC, registerSharedObject, SharedObjectCounterpart} from 'neuroglancer/worker_rpc';\n\n\nconst MESH_OBJECT_MANIFEST_CHUNK_PRIORITY = 100;\nconst MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY = 50;\n\nexport type FragmentId = string;\n\n// Chunk that contains the list of fragments that make up a single object.\nexport class ManifestChunk extends Chunk {\n  backendOnly = true;\n  objectId = new Uint64();\n  fragmentIds: FragmentId[]|null;\n\n  constructor () {\n    super();\n  }\n  // We can't save a reference to objectId, because it may be a temporary\n  // object.\n  initializeManifestChunk (key: string, objectId: Uint64) {\n    super.initialize(key);\n    this.objectId.assign(objectId);\n  }\n\n  freeSystemMemory () {\n    this.fragmentIds = null;\n  }\n\n  downloadSucceeded () {\n    // We can't easily determine the memory usage of the JSON manifest.  Just use 100 bytes as a default value.\n    this.systemMemoryBytes = 100;\n    super.downloadSucceeded();\n    if (this.priorityTier === ChunkPriorityTier.VISIBLE) {\n      this.source.chunkManager.scheduleUpdateChunkPriorities();\n    }\n  }\n\n  toString () {\n    return this.objectId.toString();\n  }\n};\n\n/**\n * Chunk that contains the mesh for a single fragment of a single object.\n */\nexport class FragmentChunk extends Chunk {\n  manifestChunk: ManifestChunk = null;\n  fragmentId: FragmentId = null;\n  vertexPositions: Float32Array|null = null;\n  indices: Uint32Array|null = null;\n  vertexNormals: Float32Array|null = null;\n  constructor () {\n    super();\n  }\n  initializeFragmentChunk (key: string, manifestChunk: ManifestChunk, fragmentId: FragmentId) {\n    super.initialize(key);\n    this.manifestChunk = manifestChunk;\n    this.fragmentId = fragmentId;\n  }\n  freeSystemMemory () {\n    this.manifestChunk = null;\n    this.vertexPositions = this.indices = this.vertexNormals = null;\n    this.fragmentId = null;\n  }\n  serialize (msg: any, transfers: any[]) {\n    super.serialize(msg, transfers);\n    msg['objectKey'] = this.manifestChunk.key;\n    let {vertexPositions, indices, vertexNormals} = this;\n    msg['vertexPositions'] = vertexPositions;\n    msg['indices'] = indices;\n    msg['vertexNormals'] = vertexNormals;\n    let vertexPositionsBuffer = vertexPositions.buffer;\n    transfers.push(vertexPositionsBuffer);\n    let indicesBuffer = indices.buffer;\n    if (indicesBuffer !== vertexPositionsBuffer) {\n      transfers.push(indicesBuffer);\n    }\n    let vertexNormalsBuffer = vertexNormals.buffer;\n    if (vertexNormalsBuffer !== vertexPositionsBuffer && vertexNormalsBuffer !== indicesBuffer) {\n      transfers.push(vertexNormalsBuffer);\n    }\n    this.vertexPositions = this.indices = this.vertexNormals = null;\n  }\n  downloadSucceeded () {\n    let {vertexPositions, indices, vertexNormals} = this;\n    this.systemMemoryBytes = this.gpuMemoryBytes =\n        vertexPositions.byteLength + indices.byteLength + vertexNormals.byteLength;\n    super.downloadSucceeded();\n  }\n};\n\n/**\n * Assigns chunk.fragmentKeys to response[keysPropertyName].\n *\n * Verifies that response[keysPropertyName] is an array of strings.\n */\nexport function decodeJsonManifestChunk(chunk: ManifestChunk, response: any, keysPropertyName: string) {\n  verifyObject(response);\n  chunk.fragmentIds = verifyObjectProperty(response, keysPropertyName, fragmentKeys => {\n    if (!Array.isArray(fragmentKeys)) {\n      throw new Error(`Expected array, received: ${JSON.stringify(fragmentKeys)}.`);\n    }\n    for (let x of fragmentKeys) {\n      if (typeof x !== 'string') {\n        throw new Error(`Expected string fragment key, received: ${JSON.stringify(x)}.`);\n      }\n    }\n    return <string[]>fragmentKeys;\n  });\n}\n\n/**\n * Computes normal vectors for each vertex of a triangular mesh.\n *\n * The normal vector for each triangle with vertices (v0, v1, v2) is computed as the (normalized)\n * cross product of (v1 - v0, v2 - v1).  The normal vector for each vertex is obtained by averaging\n * the normal vector of each of the triangles that contains it.\n *\n * @param positions The vertex positions in [x0, y0, z0, x1, y1, z1, ...] format.\n * @param indices The indices of the triangle vertices.  Each triplet of consecutive values\n *     specifies a triangle.\n */\nexport function computeVertexNormals(positions: Float32Array, indices: Uint32Array) {\n  const faceNormal = vec3.create();\n  const v1v0 = vec3.create();\n  const v2v1 = vec3.create();\n  let vertexNormals = new Float32Array(positions.length);\n  let vertexFaceCount = new Float32Array(positions.length / 3);\n  let numIndices = indices.length;\n  for (let i = 0; i < numIndices; i += 3) {\n    for (let j = 0; j < 3; ++j) {\n      vertexFaceCount[indices[i + j]] += 1;\n    }\n  }\n  for (let i = 0; i < numIndices; i += 3) {\n    let i0 = indices[i] * 3, i1 = indices[i + 1] * 3, i2 = indices[i + 2] * 3;\n    for (let j = 0; j < 3; ++j) {\n      v1v0[j] = positions[i1 + j] - positions[i0 + j];\n      v2v1[j] = positions[i2 + j] - positions[i1 + j];\n    }\n    vec3.cross(faceNormal, v1v0, v2v1);\n    vec3.normalize(faceNormal, faceNormal);\n\n    for (let k = 0; k < 3; ++k) {\n      let index = indices[i + k];\n      let scalar = 1.0 / vertexFaceCount[index];\n      let offset = index * 3;\n      for (let j = 0; j < 3; ++j) {\n        vertexNormals[offset + j] += scalar * faceNormal[j];\n      }\n    }\n  }\n  // Normalize all vertex normals.\n  let numVertices = vertexNormals.length;\n  for (let i = 0; i < numVertices; i += 3) {\n    let vec = vertexNormals.subarray(i, 3);\n    vec3.normalize(vec, vec);\n  }\n  return vertexNormals;\n}\n\n/**\n * Extracts vertex positions and triangle vertex indices of the specified endianness from `data'.\n *\n * Vertex normals are computed.\n *\n * The vertexByteOffset specifies the byte offset into `data' of the start of the vertex position\n * data.  The vertex data must consist of 3 * numVertices 32-bit float values.\n *\n * If indexByteOffset is not specified, it defaults to the end of the vertex position data.  If\n * numTriangles is not specified, it is assumed that the index data continues until the end of the\n * array.\n */\nexport function decodeVertexPositionsAndIndices(\n    chunk: FragmentChunk, data: ArrayBuffer, endianness: Endianness, vertexByteOffset: number,\n    numVertices: number, indexByteOffset?: number, numTriangles?: number) {\n  let vertexPositions = new Float32Array(data, vertexByteOffset, numVertices * 3);\n  convertEndian32(vertexPositions, endianness);\n\n  if (indexByteOffset === undefined) {\n    indexByteOffset = vertexByteOffset + 12 * numVertices;\n  }\n\n  let numIndices: number|undefined;\n  if (numTriangles !== undefined) {\n    numIndices = numTriangles * 3;\n  }\n\n  let indices = new Uint32Array(data, indexByteOffset, numIndices);\n  if (indices.length % 3 !== 0) {\n    throw new Error(`Number of indices is not a multiple of 3: ${indices.length}.`);\n  }\n  convertEndian32(indices, endianness);\n\n  chunk.vertexPositions = vertexPositions;\n  chunk.indices = indices;\n  chunk.vertexNormals = computeVertexNormals(vertexPositions, indices);\n}\n\nexport abstract class MeshSource extends ChunkSource {\n  fragmentSource: FragmentSource;\n\n  constructor (rpc: RPC, options: any) {\n    super (rpc, options);\n    let fragmentSource = this.fragmentSource =\n        this.registerDisposer(rpc.getRef<FragmentSource>(options['fragmentSource']));\n    fragmentSource.meshSource = this;\n  }\n\n  getChunk (objectId: Uint64) {\n    let key = `${objectId.low}:${objectId.high}`;\n    let chunk = <ManifestChunk>this.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = this.getNewChunk_(ManifestChunk);\n      chunk.initializeManifestChunk(key, objectId);\n      this.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  getFragmentChunk (manifestChunk: ManifestChunk, fragmentId: FragmentId) {\n    let key = `${manifestChunk.key}/${fragmentId}`;\n    let fragmentSource = this.fragmentSource;\n    let chunk = <FragmentChunk>fragmentSource.chunks.get(key);\n    if (chunk === undefined) {\n      chunk = fragmentSource.getNewChunk_(FragmentChunk);\n      chunk.initializeFragmentChunk(key, manifestChunk, fragmentId);\n      fragmentSource.addChunk(chunk);\n    }\n    return chunk;\n  }\n\n  abstract downloadFragment(chunk: FragmentChunk): void;\n};\n\nexport class FragmentSource extends ChunkSource {\n  meshSource: MeshSource = null;\n  download (chunk: FragmentChunk) {\n    this.meshSource.downloadFragment(chunk);\n  }\n};\nregisterSharedObject('mesh/FragmentSource', FragmentSource);\n\nclass MeshLayer extends SharedObjectCounterpart {\n  chunkManager: ChunkManager;\n  source: MeshSource;\n  visibleSegmentSet: Uint64Set;\n\n  constructor (rpc: RPC, options: any) {\n    super(rpc, options);\n    // No need to increase reference count of chunkManager and visibleSegmentSet since our owner\n    // counterpart will hold a reference to the owner counterparts of them.\n    this.chunkManager = <ChunkManager>rpc.get(options['chunkManager']);\n    this.visibleSegmentSet = <Uint64Set>rpc.get(options['visibleSegmentSet']);\n    this.source = this.registerDisposer(rpc.getRef<MeshSource>(options['source']));\n    this.registerSignalBinding(this.chunkManager.recomputeChunkPriorities.add(this.updateChunkPriorities, this));\n    this.registerSignalBinding(this.visibleSegmentSet.changed.add(this.handleVisibleSegmentSetChanged, this));\n  }\n\n  private handleVisibleSegmentSetChanged () {\n    this.chunkManager.scheduleUpdateChunkPriorities();\n  }\n\n  private updateChunkPriorities () {\n    let {source, chunkManager} = this;\n    for (let segment of this.visibleSegmentSet) {\n      let manifestChunk = source.getChunk(segment);\n      chunkManager.requestChunk(manifestChunk, ChunkPriorityTier.VISIBLE,\n                                MESH_OBJECT_MANIFEST_CHUNK_PRIORITY);\n      if (manifestChunk.state === ChunkState.SYSTEM_MEMORY_WORKER) {\n        for (let fragmentId of manifestChunk.fragmentIds) {\n          let fragmentChunk = source.getFragmentChunk(manifestChunk, fragmentId);\n          chunkManager.requestChunk(fragmentChunk, ChunkPriorityTier.VISIBLE,\n                                    MESH_OBJECT_FRAGMENT_CHUNK_PRIORITY);\n        }\n        // console.log(\"FIXME: updatefragment chunk priority\");\n        // console.log(manifestChunk.data);\n        // let fragmentChunk = fragmentSource.getChunk(manifestChunk);\n      }\n    }\n  }\n};\nregisterSharedObject('mesh/MeshLayer', MeshLayer);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/mesh/backend.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {RPC, SharedObjectCounterpart, registerSharedObject, registerRPC} from 'neuroglancer/worker_rpc';\nimport {HashTable} from 'neuroglancer/gpu_hash/hash_table';\nimport {Signal} from 'signals';\nimport {Uint64} from 'neuroglancer/util/uint64';\n\nexport class Uint64Set extends SharedObjectCounterpart {\n  hashTable = new HashTable();\n  changed = new Signal();\n\n  initializeCounterpart(rpc: RPC, options: any = {}) {\n    options['type'] = 'Uint64Set';\n    super.initializeCounterpart(rpc, options);\n  }\n\n  static makeWithCounterpart(rpc: RPC) {\n    let obj = new Uint64Set();\n    obj.initializeCounterpart(rpc);\n    return obj;\n  }\n\n  disposed () {\n    super.disposed();\n    this.hashTable = null;\n    this.changed = null;\n  }\n\n  add_(x: Uint64) {\n    return this.hashTable.add(x.low, x.high);\n  }\n\n  add (x: Uint64) {\n    if (this.add_(x)) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Set.add', {'id': this.rpcId, 'value': x});\n      }\n      this.changed.dispatch(x, true);\n    }\n  }\n\n  has (x: Uint64) {\n    return this.hashTable.has(x.low, x.high);\n  }\n\n  *[Symbol.iterator]() {\n    let temp = new Uint64();\n    for (let x of this.hashTable[Symbol.iterator]()) {\n      temp.low = x[0];\n      temp.high = x[1];\n      yield temp;\n    }\n  }\n\n  delete_(x: Uint64) {\n    return this.hashTable.delete(x.low, x.high);\n  }\n\n  delete(x: Uint64) {\n    if (this.delete_(x)) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Set.delete', {'id': this.rpcId, 'value': x});\n      }\n      this.changed.dispatch(x, false);\n    }\n  }\n\n  get size () {\n    return this.hashTable.size;\n  }\n\n  clear() {\n    if (this.hashTable.clear()) {\n      let {rpc} = this;\n      if (rpc) {\n        rpc.invoke('Uint64Set.clear', {'id': this.rpcId});\n      }\n      this.changed.dispatch(null, false);\n    }\n  }\n};\n\nregisterRPC('Uint64Set.add', function (x) {\n  let obj = this.get(x['id']);\n  if (obj.add_(x['value'])) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterRPC('Uint64Set.delete', function (x) {\n  let obj = this.get(x['id']);\n  if (obj.delete_(x['value'])) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterRPC('Uint64Set.clear', function (x) {\n  let obj = this.get(x['id']);\n  if (obj.hashTable.clear()) {\n    obj.changed.dispatch();\n  }\n});\n\nregisterSharedObject('Uint64Set', Uint64Set);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/uint64_set.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {HashFunction} from 'neuroglancer/gpu_hash/hash_function';\n\nexport const NUM_ALTERNATIVES = 3;\n\nconst DEFAULT_LOAD_FACTOR = 0.9;\n\nexport class HashTable {\n  hashFunctions: HashFunction[][];\n  loadFactor = DEFAULT_LOAD_FACTOR;\n  size = 0;\n  tables: Uint32Array[];\n  growFactor = 1.2;\n  maxWidth = 4096;\n  width: number = null;\n  height: number = null;\n  maxHeight = 8192;\n  emptyLow = 4294967295;\n  emptyHigh = 4294967295;\n  maxRehashAttempts = 5;\n  maxAttempts = 5;\n  capacity: number;\n  generation = 0;\n\n  constructor(hashFunctions = HashTable.generateHashFunctions(NUM_ALTERNATIVES)) {\n    this.hashFunctions = hashFunctions;\n    this.allocate(4, 1);\n  }\n\n  private updateHashFunctions(numAlternatives: number) {\n    this.hashFunctions = HashTable.generateHashFunctions(numAlternatives);\n  }\n\n  static generateHashFunctions(numAlternatives = NUM_ALTERNATIVES) {\n    let hashFunctions: HashFunction[][] = [];\n    for (let alt = 0; alt < numAlternatives; ++alt) {\n      let curFunctions = [HashFunction.generate(), HashFunction.generate()];\n      hashFunctions.push(curFunctions);\n    }\n    return hashFunctions;\n  }\n\n  getHash(tableIndex: number, low: number, high: number) {\n    let hashes = this.hashFunctions[tableIndex];\n    let width = this.width, height = this.height;\n    let x = hashes[0].compute(low, high) % width;\n    let y = hashes[1].compute(low, high) % height;\n    return 2 * (y * this.width + x);\n  }\n\n  * [Symbol.iterator]() {\n    let tableSize = this.width * this.height;\n    let emptyLow = this.emptyLow, emptyHigh = this.emptyHigh;\n    let temp = [0, 0];\n    for (let table of this.tables) {\n      for (let i = 0; i < tableSize; ++i) {\n        let low = table[2 * i], high = table[2 * i + 1];\n        if (low !== emptyLow || high !== emptyHigh) {\n          temp[0] = low;\n          temp[1] = high;\n          yield temp;\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns the index of the table containing the specified element, or null if the element is not\n   * present.\n   */\n  hasWithTableIndex(low: number, high: number) {\n    let numTables = this.tables.length;\n    for (let i = 0; i < numTables; ++i) {\n      let h = this.getHash(i, low, high);\n      let table = this.tables[i];\n      if (table[h] === low && table[h + 1] === high) {\n        return i;\n      }\n    }\n    return null;\n  }\n\n\n  /**\n   * Returns true iff the specified element is present.\n   */\n  has(low: number, high: number) {\n    let numTables = this.tables.length;\n    for (let i = 0; i < numTables; ++i) {\n      let h = this.getHash(i, low, high);\n      let table = this.tables[i];\n      if (table[h] === low && table[h + 1] === high) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  delete (low: number, high: number) {\n    let numTables = this.tables.length;\n    for (let i = 0; i < numTables; ++i) {\n      let h = this.getHash(i, low, high);\n      let table = this.tables[i];\n      if (table[h] === low && table[h + 1] === high) {\n        table[h] = this.emptyLow;\n        table[h + 1] = this.emptyHigh;\n        ++this.generation;\n        this.size--;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  clear() {\n    if (this.size === 0) {\n      return false;\n    }\n    this.size = 0;\n    ++this.generation;\n    let {tables, emptyLow, emptyHigh} = this;\n    let numTables = tables.length;\n    for (let i = 0; i < numTables; ++i) {\n      let table = tables[i];\n      let tableSize = table.length;\n      for (let j = 0; j < tableSize; j += 2) {\n        table[j] = emptyLow;\n        table[j + 1] = emptyHigh;\n      }\n    }\n    return true;\n  }\n\n  private tryToInsert(low: number, high: number) {\n    let attempt = 0;\n    let {emptyLow, emptyHigh, maxAttempts, tables} = this;\n    let numTables = tables.length;\n\n    let tableIndex = Math.floor(Math.random() * numTables);\n    while (true) {\n      let h = this.getHash(tableIndex, low, high);\n      let table = tables[tableIndex];\n      let newLow = table[h], newHigh = table[h + 1];\n      table[h] = low;\n      table[h + 1] = high;\n      if (newLow === emptyLow && newHigh === emptyHigh) {\n        return null;\n      }\n      low = newLow;\n      high = newHigh;\n      if (++attempt === maxAttempts) {\n        break;\n      }\n      tableIndex = (tableIndex + Math.floor(Math.random() * (numTables - 1))) % numTables;\n    }\n    return [low, high];\n  }\n\n  private allocate(width: number, height: number) {\n    let tableSize = width * height;\n    this.width = width;\n    this.height = height;\n    let numAlternatives = this.hashFunctions.length;\n    let tables = this.tables = new Array(numAlternatives);\n    for (let i = 0; i < numAlternatives; ++i) {\n      tables[i] = new Uint32Array(tableSize * 2);\n    }\n    this.maxAttempts = tableSize;\n    let emptyLow = this.emptyLow, emptyHigh = this.emptyHigh;\n    for (let table of tables) {\n      for (let i = 0; i < tableSize; ++i) {\n        table[2 * i] = emptyLow;\n        table[2 * i + 1] = emptyHigh;\n      }\n    }\n    this.capacity = tableSize * this.tables.length * this.loadFactor;\n  }\n\n  private rehash(oldTables: Uint32Array[], width: number, height: number) {\n    this.allocate(width, height);\n    this.updateHashFunctions(oldTables.length);\n    for (let table of oldTables) {\n      let tableSize = table.length / 2;\n      for (let i = 0; i < tableSize; ++i) {\n        let h = 2 * i;\n        let low = table[h], high = table[h + 1];\n        if (low !== 0 || high !== 0) {\n          if (this.tryToInsert(low, high) !== null) {\n            return false;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  private grow(desiredTableSize: number) {\n    let oldTables = this.tables;\n    let {width, height, maxWidth, maxHeight} = this;\n    while (true) {\n      let origTableSize = width * height;\n      width = Math.min(maxWidth, Math.ceil(desiredTableSize / this.height));\n      if (width * height < desiredTableSize) {\n        height = Math.min(maxHeight, Math.ceil(desiredTableSize / this.width));\n      }\n      let tableSize = width * height;\n      if (tableSize < desiredTableSize && tableSize === origTableSize) {\n        throw new Error('Maximum table size exceeded');\n      }\n\n      for (let rehashAttempt = 0; rehashAttempt < this.maxRehashAttempts; ++rehashAttempt) {\n        if (this.rehash(oldTables, width, height)) {\n          return;\n        }\n      }\n      desiredTableSize = Math.ceil(this.growFactor * desiredTableSize);\n    }\n  }\n\n  add(low: number, high: number) {\n    if (this.has(low, high)) {\n      return false;\n    }\n    ++this.generation;\n\n    if (++this.size > this.capacity) {\n      this.grow(Math.ceil(this.growFactor * this.width * this.height));\n    }\n\n    while (true) {\n      let result = this.tryToInsert(low, high);\n      if (result == null) {\n        return true;\n      }\n      low = result[0];\n      high = result[1];\n      this.grow(this.width * this.height);\n    }\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/gpu_hash/hash_table.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PRIME_MODULUS = 4093;\n\nexport class HashFunction {\n  constructor(public a0: Float32Array, public a1: Float32Array, public b: number, public c: number) {}\n\n  computeDotProduct(low: number, high: number) {\n    let {a0, a1} = this;\n    let a0DotLow = a0[0] * (low & 0xFF) + a0[1] * ((low >> 8) & 0xFF) +\n        a0[2] * ((low >> 16) & 0xFF) + a0[3] * ((low >> 24) & 0xFF);\n    let a1DotHigh = a1[0] * (high & 0xFF) + a1[1] * ((high >> 8) & 0xFF) +\n        a1[2] * ((high >> 16) & 0xFF) + a1[3] * ((high >> 24) & 0xFF);\n    return a0DotLow + a1DotHigh;\n  }\n\n  compute(low: number, high: number) {\n    let {b, c} = this;\n    let x = this.computeDotProduct(low, high);\n    let x2 = (x * x) % PRIME_MODULUS;\n    let result = (x + x2 * c + b) % PRIME_MODULUS;\n    return result;\n  }\n\n  toString() {\n    return `new HashFunction(Float32Array.of(${this.a0}), Float32Array.of(${this.a1}), ${this.b}, ${this.c})`;\n  }\n\n  static generate() {\n    function genCoeff() { return Math.floor(Math.random() * PRIME_MODULUS); }\n    function genVector() { return Float32Array.of(genCoeff(), genCoeff(), genCoeff(), genCoeff()); }\n    return new HashFunction(genVector(), genVector(), genCoeff(), genCoeff());\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/gpu_hash/hash_function.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst randomTempBuffer = new Uint32Array(2);\n\nconst trueBase = 0x100000000;\n\n// For dealing with the string representation in base b, we will represent the 64-bit number as\n//\n//   highPrime * intermediateBase[b] + lowPrime,\n//\n// where:\n//\n//   intermediateBaseForBase[b] = Math.pow(b, lowDigitsforBase[b]),\n//\n// and\n//\n//   lowDigitsForBase[b] = Math.floor(Math.log(Math.pow(2,53 - 32)) / Math.log(b)).\n\ninterface StringConversionData {\n  lowDigits: number;\n\n  lowBase: number;\n\n  // lowBase = lowBase1 * lowBase2.\n  lowBase1: number;\n  lowBase2: number;\n\n  pattern: RegExp;\n}\n\nlet stringConversionData: StringConversionData[] = [];\nfor (let base = 2; base <= 36; ++base) {\n  let lowDigits = Math.floor(32 / Math.log2(base));\n  let lowBase = Math.pow(base, lowDigits);\n  let lowDigits1 = Math.floor(lowDigits / 2);\n  let lowBase1 = Math.pow(base, lowDigits1);\n  let lowBase2 = Math.pow(base, lowDigits - lowDigits1);\n  let patternString = `^[0-${String.fromCharCode('0'.charCodeAt(0) + Math.min(9, base - 1))}`;\n  if (base > 10) {\n    patternString += `a-${String.fromCharCode('a'.charCodeAt(0) + base - 11)}`;\n    patternString += `A-${String.fromCharCode('A'.charCodeAt(0) + base - 11)}`;\n  }\n  let maxDigits = Math.ceil(64 / Math.log2(base));\n  patternString += `]{1,${maxDigits}}$`;\n  let pattern = new RegExp(patternString);\n  stringConversionData[base] = {lowDigits, lowBase, lowBase1, lowBase2, pattern};\n}\n\nexport class Uint64 {\n  constructor(public low: number = 0, public high: number = 0) {}\n\n  clone() { return new Uint64(this.low, this.high); }\n\n  assign(x: Uint64) {\n    this.low = x.low;\n    this.high = x.high;\n  }\n\n  toString(base = 10): string {\n    let vLow = this.low, vHigh = this.high;\n    if (vHigh === 0) {\n      return vLow.toString(base);\n    }\n    vHigh *= trueBase;\n    let {lowBase, lowDigits} = stringConversionData[base];\n    let vHighExtra = vHigh % lowBase;\n    vHigh = Math.floor(vHigh / lowBase);\n    vLow += vHighExtra;\n    vHigh += Math.floor(vLow / lowBase);\n    vLow = vLow % lowBase;\n    let vLowStr = vLow.toString(base);\n    return vHigh.toString(base) + '0'.repeat(lowDigits - vLowStr.length) + vLowStr;\n  }\n\n  static less(a: Uint64, b: Uint64): boolean {\n    return a.high < b.high || (a.high === b.high && a.low < b.low);\n  }\n\n  static ZERO = new Uint64(0, 0);\n\n  static equal(a: Uint64, b: Uint64) { return a.low === b.low && a.high === b.high; }\n\n  static min(a: Uint64, b: Uint64): Uint64 { return Uint64.less(a, b) ? a : b; }\n\n  static random() {\n    crypto.getRandomValues(randomTempBuffer);\n    return new Uint64(randomTempBuffer[0], randomTempBuffer[1]);\n  }\n\n  parseString(s: string, base = 10) {\n    let {lowDigits, lowBase, lowBase1, lowBase2, pattern} = stringConversionData[base];\n    if (!pattern.test(s)) {\n      return false;\n    }\n    if (s.length <= lowDigits) {\n      this.low = parseInt(s, base);\n      this.high = 0;\n      return true;\n    }\n    let splitPoint = s.length - lowDigits;\n    let lowPrime = parseInt(s.substr(splitPoint), base);\n    let highPrime = parseInt(s.substr(0, splitPoint), base);\n\n    let highConverted = highPrime * lowBase;\n\n    let high = Math.floor(highConverted / trueBase);\n\n    let low = lowPrime + (((highPrime % trueBase) * lowBase1) % trueBase) * lowBase2 % trueBase;\n    if (low > trueBase) {\n      ++high;\n      low -= trueBase;\n    }\n    if ((low >>> 0) !== low || ((high >>> 0) !== high)) {\n      return false;\n    }\n    this.low = low;\n    this.high = high;\n    return true;\n  }\n\n  static parseString(s: string, base = 10) {\n    let x = new Uint64();\n    if (!x.parseString(s, base)) {\n      throw new Error(`Failed to parse string as uint64 value: ${JSON.stringify(s)}.`);\n    }\n    return x;\n  }\n\n  valid () {\n    let {low, high} = this;\n    return ((low >>> 0) === low) && ((high >>> 0) === high);\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/uint64.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {WritableArrayLike} from 'neuroglancer/util/array';\n\nexport function verifyFloat(obj: any) {\n  let t = typeof obj;\n  if (t === 'number' || t === 'string') {\n    let x = parseFloat('' + obj);\n    if (!Number.isNaN(x)) {\n      return x;\n    }\n  }\n  throw new Error(`Expected floating-point number, but received: ${JSON.stringify(obj)}.`);\n}\n\nexport function verifyFinitePositiveFloat(obj: any) {\n  let x = verifyFloat(obj);\n  if (Number.isFinite(x) && x > 0) {\n    return x;\n  }\n  throw new Error(`Expected positive finite floating-point number, but received: ${x}.`);\n}\n\nexport function parseXYZ<A extends WritableArrayLike<number>>(\n    out: A, obj: any, validator = verifyFloat): A {\n  verifyObject(obj);\n  let keys = Object.keys(obj);\n  keys.sort();\n  if (keys.length !== 3 || keys[0] !== 'x' || keys[1] !== 'y' || keys[2] !== 'z') {\n    throw new Error(\n        `Expected object to have keys ['x', 'y', 'z'], but received: ${JSON.stringify(obj)}.`);\n  }\n  out[0] = validator(obj['x']);\n  out[1] = validator(obj['y']);\n  out[2] = validator(obj['z']);\n  return out;\n}\n\nexport function parseFiniteVec<U extends WritableArrayLike<number>>(out: U, obj: any[]) {\n  let length = out.length;\n  if (!Array.isArray(obj) || obj.length !== length) {\n    throw new Error('Incompatible sizes');\n  }\n\n  for (let i = 0; i < length; ++i) {\n    if (!Number.isFinite(parseFloat(obj[i]))) {\n      throw new Error('Non-finite value.');\n    }\n  }\n  for (let i = 0; i < length; ++i) {\n    out[i] = parseFloat(obj[i]);\n  }\n  return out;\n}\n\nexport function parseIntVec<U extends WritableArrayLike<number>>(out: U, obj: any) {\n  let length = out.length;\n  if (!Array.isArray(obj) || obj.length !== length) {\n    throw new Error('Incompatible sizes.');\n  }\n\n  for (let i = 0; i < length; ++i) {\n    let val = parseInt(obj[i], undefined);\n    if (!Number.isInteger(val)) {\n      throw new Error('Non-integer value.');\n    }\n  }\n\n  for (let i = 0; i < length; ++i) {\n    out[i] = parseInt(obj[i], undefined);\n  }\n  return out;\n}\n\n/**\n * Returns a JSON representation of x, with object keys sorted to ensure a\n * consistent result.\n */\nexport function stableStringify(x: any) {\n  if (typeof x === 'object') {\n    if (x === null) {\n      return 'null';\n    }\n    if (Array.isArray(x)) {\n      let s = '[';\n      let size = x.length;\n      let i = 0;\n      if (i < size) {\n        s += stableStringify(x[i]);\n        while (++i < size) {\n          s += ',';\n          s += stableStringify(x[i]);\n        }\n      }\n      s += ']';\n      return s;\n    }\n    let s = '{';\n    let keys = Object.keys(x).sort();\n    let i = 0;\n    let size = keys.length;\n    if (i < size) {\n      let key = keys[i];\n      s += JSON.stringify(key);\n      s += ':';\n      s += stableStringify(x[key]);\n      while (++i < size) {\n        s += ',';\n        key = keys[i];\n        s += JSON.stringify(key);\n        s += ':';\n        s += stableStringify(x[key]);\n      }\n    }\n    s += '}';\n    return s;\n  }\n  return JSON.stringify(x);\n}\n\nfunction swapQuotes(x: string) {\n  return x.replace(/['\"]/g, s => { return (s === '\"' ? '\\'' : '\"'); });\n}\n\nexport function urlSafeStringifyString(x: string) {\n  return swapQuotes(JSON.stringify(swapQuotes(x)));\n}\n\nconst URL_SAFE_COMMA = '_';\n\nexport function urlSafeStringify(x: any): string {\n  if (typeof x === 'object') {\n    if (x === null) {\n      return 'null';\n    }\n    let toJSON = x['toJSON'];\n    if (typeof toJSON === 'function') {\n      return urlSafeStringify(toJSON.call(x));\n    }\n    if (Array.isArray(x)) {\n      let s = '[';\n      let size = x.length;\n      let i = 0;\n      if (i < size) {\n        s += urlSafeStringify(x[i]);\n        while (++i < size) {\n          s += URL_SAFE_COMMA;\n          s += urlSafeStringify(x[i]);\n        }\n      }\n      s += ']';\n      return s;\n    }\n    let s = '{';\n    let keys = Object.keys(x);\n    let first = true;\n    for (let key of keys) {\n      let value = x[key];\n      if (value === undefined) {\n        continue;\n      }\n      let valueString = urlSafeStringify(value);\n      if (!valueString) {\n        continue;\n      }\n      if (!first) {\n        s += URL_SAFE_COMMA;\n      } else {\n        first = false;\n      }\n      s += urlSafeStringifyString(key);\n      s += ':';\n      s += valueString;\n    }\n    s += '}';\n    return s;\n  }\n  if (typeof x === 'string') {\n    return urlSafeStringifyString(x);\n  }\n  return JSON.stringify(x);\n}\n\nconst SINGLE_QUOTE_STRING_PATTERN = /('(?:[^'\\\\]|(?:\\\\.))*')/;\nconst DOUBLE_QUOTE_STRING_PATTERN = /(\"(?:[^'\\\\]|(?:\\\\.))*\")/;\nconst SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN =\n    new RegExp(`${SINGLE_QUOTE_STRING_PATTERN.source}|${DOUBLE_QUOTE_STRING_PATTERN.source}`);\nconst DOUBLE_OR_SINGLE_QUOTE_STRING_PATTERN =\n    new RegExp(`${DOUBLE_QUOTE_STRING_PATTERN.source}|${SINGLE_QUOTE_STRING_PATTERN.source}`);\n//const stringLiteralPattern = /('(?:[^'\\\\]|(?:\\\\.))*')|(\"(?:[^\"\\\\]|(?:\\\\.))*\")/;\n\nconst DOUBLE_QUOTE_PATTERN = /^((?:[^\"'\\\\]|(?:\\\\.))*)\"/;\nconst SINGLE_QUOTE_PATTERN = /^((?:[^\"'\\\\]|(?:\\\\.))*)'/;\n\nfunction convertStringLiteral(x: string, quoteInitial: string, quoteReplace: string, quoteSearch: RegExp) {\n  if (x.length >= 2 && x.charAt(0) === quoteInitial && x.charAt(x.length - 1) === quoteInitial) {\n    let inner = x.substr(1, x.length - 2);\n    let s = quoteReplace;\n    while (inner.length > 0) {\n      let m = inner.match(quoteSearch);\n      if (m === null) {\n        s += inner;\n        break;\n      }\n      s += m[1];\n      s += '\\\\';\n      s += quoteReplace;\n      inner = inner.substr(m.index + m[0].length);\n    }\n    s += quoteReplace;\n    return s;\n  }\n  return x;\n}\n\n/**\n * Converts a string literal delimited by either single or double quotes into a string literal\n * delimited by double quotes.\n */\nexport function normalizeStringLiteral(x: string) {\n  return convertStringLiteral(x, '\\'', '\"', DOUBLE_QUOTE_PATTERN);\n}\n\n\n\n\n// quoteChar: des\nfunction convertJsonHelper(x: string, desiredCommaChar: string, desiredQuoteChar: string) {\n  const commaSearch = /[&_,]/g;\n  let quoteInitial: string;\n  let quoteSearch: RegExp;\n  let stringLiteralPattern: RegExp;\n  if (desiredQuoteChar === '\"') {\n    quoteInitial = '\\'';\n    quoteSearch = DOUBLE_QUOTE_PATTERN;\n    stringLiteralPattern = SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN;\n  } else {\n    quoteInitial = '\"';\n    quoteSearch = SINGLE_QUOTE_PATTERN;\n    stringLiteralPattern = DOUBLE_OR_SINGLE_QUOTE_STRING_PATTERN;\n  }\n  let s = '';\n  while (x.length > 0) {\n    let m = x.match(stringLiteralPattern);\n    let before: string;\n    let replacement: string;\n    if (m === null) {\n      before = x;\n      x = '';\n      replacement = '';\n    } else {\n      before = x.substr(0, m.index);\n      x = x.substr(m.index + m[0].length);\n      let originalString = m[1];\n      if (originalString !== undefined) {\n        replacement = convertStringLiteral(originalString, quoteInitial, desiredQuoteChar, quoteSearch);\n      } else {\n        replacement = m[2];\n      }\n    }\n    s += before.replace(commaSearch, desiredCommaChar);\n    s += replacement;\n  }\n  return s;\n}\n\nexport function urlSafeToJSON(x: string) {\n  return convertJsonHelper(x, ',', '\"');\n}\n\nexport function jsonToUrlSafe(x: string) {\n  return convertJsonHelper(x, '_', '\\'');\n}\n\nexport function urlSafeParse(x: string) {\n  return JSON.parse(urlSafeToJSON(x));\n}\n\n// Converts a string containing a Python literal into a string containing an equivalent JSON\n// literal.\nexport function pythonLiteralToJSON(x: string) {\n  let s = '';\n  while (x.length > 0) {\n    let m = x.match(SINGLE_OR_DOUBLE_QUOTE_STRING_PATTERN);\n    let before: string;\n    let replacement: string;\n    if (m === null) {\n      before = x;\n      x = '';\n      replacement = '';\n    } else {\n      before = x.substr(0, m.index);\n      x = x.substr(m.index + m[0].length);\n      let singleQuoteString = m[1];\n      if (singleQuoteString !== undefined) {\n        replacement = normalizeStringLiteral(singleQuoteString);\n      } else {\n        replacement = m[2];\n      }\n    }\n    s += before.replace(/\\(/g, '[')\n             .replace(/\\)/g, ']')\n             .replace('True', 'true')\n             .replace('False', 'false')\n             .replace(/,\\s*([\\}\\]])/g, '$1');\n    s += replacement;\n  }\n  return s;\n}\n\n// Converts a string containing a Python literal into an equivalent JavaScript value.\nexport function pythonLiteralParse(x: string) {\n  return JSON.parse(pythonLiteralToJSON(x));\n}\n\n// Checks that `x' is an array, maps each element by parseElement.\nexport function parseArray<T>(x: any, parseElement: (x: any, index: number) => T): T[] {\n  if (!Array.isArray(x)) {\n    throw new Error(`Expected array, but received: ${JSON.stringify(x)}.`);\n  }\n  return (<any[]>x).map(parseElement);\n}\n\nexport function parseFixedLengthArray<T, U extends WritableArrayLike<T>>(\n    out: U, obj: any, parseElement: (x: any, index: number) => T): U {\n  const length = out.length;\n  if (!Array.isArray(obj) || obj.length !== length) {\n    throw new Error(`Expected length ${length} array, but received: ${JSON.stringify(obj)}.`);\n  }\n  for (let i = 0; i < length; ++i) {\n    out[i] = parseElement(obj[i], i);\n  }\n  return out;\n}\n\nexport function verifyObject(obj: any) {\n  if (typeof obj !== 'object' || obj == null || Array.isArray(obj)) {\n    throw new Error(`Expected JSON object, but received: ${JSON.stringify(obj)}.`);\n  }\n  return obj;\n}\n\nexport function verifyInt(obj: any) {\n  let result = parseInt(obj, 10);\n  if (!Number.isInteger(result)) {\n    throw new Error(`Expected integer, but received: ${JSON.stringify(obj)}.`);\n  }\n  return result;\n}\n\nexport function verifyPositiveInt(obj: any) {\n  let result = verifyInt(obj);\n  if (result <= 0) {\n    throw new Error(`Expected positive integer, but received: ${result}.`);\n  }\n  return result;\n}\n\nexport function verifyMapKey<U>(obj: any, map: Map<string, U>) {\n  let result = map.get(obj);\n  if (result === undefined) {\n    throw new Error(\n        `Expected one of ${JSON.stringify(Array.from(map.keys()))}, but received: ${JSON.stringify(obj)}.`);\n  }\n  return result;\n}\n\nexport function verifyString(obj: any) {\n  if (typeof obj !== 'string') {\n    throw new Error(`Expected string, but received: ${JSON.stringify(obj)}.`);\n  }\n  return obj;\n}\n\nexport function verifyOptionalString(obj: any): string|undefined {\n  if (obj === undefined) {\n    return undefined;\n  }\n  return verifyString(obj);\n}\n\nexport function verifyObjectProperty<T>(\n    obj: any, propertyName: string, validator: (value: any) => T): T {\n  let value = obj.hasOwnProperty(propertyName) ? obj[propertyName] : undefined;\n  try {\n    return validator(value);\n  } catch (parseError) {\n    throw new Error(\n        `Error parsing ${JSON.stringify(propertyName)} property: ${parseError.message}`);\n  }\n}\n\nexport function verifyObjectAsMap<T>(obj: any, validator: (value: any) => T): Map<string, T> {\n  verifyObject(obj);\n  let map = new Map<string, T>();\n  for (let key of Object.keys(obj)) {\n    try {\n      map.set(key, validator(obj[key]));\n    } catch (parseError) {\n      throw new Error(\n          `Error parsing value associated with key ${JSON.stringify(key)}: ${parseError.message}`);\n    }\n  }\n  return map;\n}\n\nexport function verifyFloat01(obj: any): number {\n  if (typeof obj !== 'number' || !Number.isFinite(obj) || obj < 0 || obj > 1) {\n    throw new Error(`Expected floating point number in [0,1], but received: ${JSON.stringify(obj)}.`);\n  }\n  return obj;\n}\n\n/**\n * The query string parameters may either be specified in the usual\n * 'name=value&otherName=otherValue' form or as (optionally urlSafe) JSON: '{\"name\":\"value\"}`.\n */\nexport function parseQueryStringParameters(queryString: string) {\n  if (queryString === '') {\n    return {};\n  }\n  if (queryString.startsWith('{')) {\n    return urlSafeParse(queryString);\n  } else {\n    let result: any = {};\n    let parts = queryString.split(/[&;]/);\n    for (let part of parts) {\n      let m = part.match(/^([^=&;]+)=([^&;]*)$/);\n      if (m === null) {\n        throw new Error(`Invalid query string part: ${JSON.stringify(part)}.`);\n      }\n      result[m[1]] = m[2];\n    }\n    return result;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/json.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Facilities for endianness detection and swapping.\n */\n\nexport enum Endianness {\n  LITTLE = 0,\n  BIG = 1\n}\n\nexport function determineEndianness() {\n  const a = Uint16Array.of(0x1122);\n  const b = new Uint8Array(a.buffer);\n  return b[0] === 0x11 ? Endianness.BIG : Endianness.LITTLE;\n}\n\n/**\n * The native endianness of the runtime.\n */\nexport const ENDIANNESS = determineEndianness();\n\n/**\n * Swaps the endianness of an array assumed to contain 16-bit values.\n */\nexport function swapEndian16(array: ArrayBufferView) {\n  let view = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n  for (let i = 0, length = view.length; i < length; i += 2) {\n    let temp = view[i];\n    view[i] = view[i + 1];\n    view[i + 1] = temp;\n  }\n}\n\n/**\n * Swaps the endianness of an array assumed to contain 32-bit values.\n */\nexport function swapEndian32(array: ArrayBufferView) {\n  let view = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\n  for (let i = 0, length = view.length; i < length; i += 4) {\n    let temp = view[i];\n    view[i] = view[i + 3];\n    view[i + 3] = temp;\n    temp = view[i + 1];\n    view[i + 1] = view[i + 2];\n    view[i + 2] = temp;\n  }\n}\n\n/**\n * Converts the endianness of an array assumed to contain 16-bit values from source to target.\n *\n * This does nothing if source === target.\n */\nexport function convertEndian16(array: ArrayBufferView, source: Endianness, target: Endianness = ENDIANNESS) {\n  if (source !== target) {\n    swapEndian16(array);\n  }\n}\n\n/**\n * Converts the endianness of an array assumed to contain 16-bit values from native to little\n * endian.\n *\n * This does nothing if the native ENDIANNESS is little endian.\n */\nexport function nativeToLittle16(array: ArrayBufferView) {\n  if (ENDIANNESS !== Endianness.LITTLE) {\n    swapEndian16(array);\n  }\n}\n\n/**\n * Converts the endianness of an array assumed to contain 32-bit values from source to target.\n *\n * This does nothing if source === target.\n */\nexport function convertEndian32(array: ArrayBufferView, source: Endianness, target: Endianness = ENDIANNESS) {\n  if (source !== target) {\n    swapEndian32(array);\n  }\n}\n\n/**\n * Converts the endianness of an array assumed to contain 32-bit values from native to little\n * endian.\n *\n * This does nothing if the native ENDIANNESS is little endian.\n */\nexport function nativeToLittle32(array: ArrayBufferView) {\n  if (ENDIANNESS !== Endianness.LITTLE) {\n    swapEndian32(array);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/endian.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {VolumeChunk} from 'neuroglancer/sliceview/backend';\n\nexport function decodeCompressedSegmentationChunk(chunk: VolumeChunk, response: ArrayBuffer) {\n  // TODO: Handle multiple channels.\n  chunk.data = new Uint32Array(response, 4 /* skip offset of first channel */);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {VolumeChunk} from 'neuroglancer/sliceview/backend';\nimport {decodeJpegStack} from 'neuroglancer/sliceview/decode_jpeg_stack';\nimport {postProcessRawData} from 'neuroglancer/sliceview/backend_chunk_decoders/postprocess';\n\nexport function decodeJpegChunk(chunk: VolumeChunk, response: ArrayBuffer) {\n  postProcessRawData(chunk, decodeJpegStack(new Uint8Array(response), chunk.chunkDataSize));\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/backend_chunk_decoders/jpeg.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {JpegDecoder} from 'jpgjs';\nimport {vec3, Vec3} from 'neuroglancer/util/geom';\n\nexport function decodeJpegStack(data: Uint8Array, chunkDataSize: Vec3) {\n  let parser = new JpegDecoder();\n  parser.parse(data);\n  if (parser.numComponents !== 1) {\n    throw new Error('JPEG data does not have the expected number of components');\n  }\n\n  // Just check that the total number pixels matches the expected value.\n  if (parser.width * parser.height !== chunkDataSize[0] * chunkDataSize[1] * chunkDataSize[2]) {\n    throw new Error(`JPEG data does not have the expected dimensions: width=${parser.width}, height=${parser.height}, chunkDataSize=${vec3.str(chunkDataSize)}`);\n  }\n  return parser.getData(parser.width, parser.height, /*forceRGBOutput=*/false);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/decode_jpeg_stack.ts\n **/","/**\n * @license\n * Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nfunction loadURLasArrayBuffer(path, callback) {\n    if (path.indexOf(\"data:\") === 0) {\n        var offset = path.indexOf(\"base64,\") + 7;\n        var data = atob(path.substring(offset));\n        var arr = new Uint8Array(data.length);\n        for (var i = data.length - 1; i >= 0; i--) {\n            arr[i] = data.charCodeAt(i);\n        }\n        callback(arr.buffer);\n        return;\n    }\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", path, true);\n    xhr.responseType = \"arraybuffer\";\n    xhr.onload = function() {\n        callback(xhr.response);\n    };\n    xhr.send(null);\n}\n\nvar JpegImage = function jpegImage() {\n    function JpegImage() {\n        this._src = null;\n        this._parser = new PDFJS.JpegImage();\n        this.onload = null;\n    }\n    JpegImage.prototype = {\n        get src() {\n            return this._src;\n        },\n        set src(value) {\n            this.load(value);\n        },\n        get width() {\n            return this._parser.width;\n        },\n        get height() {\n            return this._parser.height;\n        },\n        load: function load(path) {\n            this._src = path;\n            loadURLasArrayBuffer(path, function(buffer) {\n                this.parse(new Uint8Array(buffer));\n                if (this.onload) {\n                    this.onload();\n                }\n            }.bind(this));\n        },\n        parse: function(data) {\n            this._parser.parse(data);\n        },\n        getData: function(width, height) {\n            return this._parser.getData(width, height, false);\n        },\n        copyToImageData: function copyToImageData(imageData) {\n            if (this._parser.numComponents === 2 || this._parser.numComponents > 4) {\n                throw new Error(\"Unsupported amount of components\");\n            }\n            var width = imageData.width, height = imageData.height;\n            var imageDataBytes = width * height * 4;\n            var imageDataArray = imageData.data;\n            var i, j;\n            if (this._parser.numComponents === 1) {\n                var values = this._parser.getData(width, height, false);\n                for (i = 0, j = 0; i < imageDataBytes; ) {\n                    var value = values[j++];\n                    imageDataArray[i++] = value;\n                    imageDataArray[i++] = value;\n                    imageDataArray[i++] = value;\n                    imageDataArray[i++] = 255;\n                }\n                return;\n            }\n            var rgb = this._parser.getData(width, height, true);\n            for (i = 0, j = 0; i < imageDataBytes; ) {\n                imageDataArray[i++] = rgb[j++];\n                imageDataArray[i++] = rgb[j++];\n                imageDataArray[i++] = rgb[j++];\n                imageDataArray[i++] = 255;\n            }\n        }\n    };\n    return JpegImage;\n}();\n\nvar PDFJS;\n\n(function(PDFJS) {\n    \"use strict\";\n    var JpegImage = function jpegImage() {\n        var dctZigZag = new Uint8Array([ 0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63 ]);\n        var dctCos1 = 4017;\n        var dctSin1 = 799;\n        var dctCos3 = 3406;\n        var dctSin3 = 2276;\n        var dctCos6 = 1567;\n        var dctSin6 = 3784;\n        var dctSqrt2 = 5793;\n        var dctSqrt1d2 = 2896;\n        function constructor() {}\n        function buildHuffmanTable(codeLengths, values) {\n            var k = 0, code = [], i, j, length = 16;\n            while (length > 0 && !codeLengths[length - 1]) {\n                length--;\n            }\n            code.push({\n                children: [],\n                index: 0\n            });\n            var p = code[0], q;\n            for (i = 0; i < length; i++) {\n                for (j = 0; j < codeLengths[i]; j++) {\n                    p = code.pop();\n                    p.children[p.index] = values[k];\n                    while (p.index > 0) {\n                        p = code.pop();\n                    }\n                    p.index++;\n                    code.push(p);\n                    while (code.length <= i) {\n                        code.push(q = {\n                            children: [],\n                            index: 0\n                        });\n                        p.children[p.index] = q.children;\n                        p = q;\n                    }\n                    k++;\n                }\n                if (i + 1 < length) {\n                    code.push(q = {\n                        children: [],\n                        index: 0\n                    });\n                    p.children[p.index] = q.children;\n                    p = q;\n                }\n            }\n            return code[0].children;\n        }\n        function getBlockBufferOffset(component, row, col) {\n            return 64 * ((component.blocksPerLine + 1) * row + col);\n        }\n        function decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {\n            var precision = frame.precision;\n            var samplesPerLine = frame.samplesPerLine;\n            var scanLines = frame.scanLines;\n            var mcusPerLine = frame.mcusPerLine;\n            var progressive = frame.progressive;\n            var maxH = frame.maxH, maxV = frame.maxV;\n            var startOffset = offset, bitsData = 0, bitsCount = 0;\n            function readBit() {\n                if (bitsCount > 0) {\n                    bitsCount--;\n                    return bitsData >> bitsCount & 1;\n                }\n                bitsData = data[offset++];\n                if (bitsData === 255) {\n                    var nextByte = data[offset++];\n                    if (nextByte) {\n                        throw \"unexpected marker: \" + (bitsData << 8 | nextByte).toString(16);\n                    }\n                }\n                bitsCount = 7;\n                return bitsData >>> 7;\n            }\n            function decodeHuffman(tree) {\n                var node = tree;\n                while (true) {\n                    node = node[readBit()];\n                    if (typeof node === \"number\") {\n                        return node;\n                    }\n                    if (typeof node !== \"object\") {\n                        throw \"invalid huffman sequence\";\n                    }\n                }\n            }\n            function receive(length) {\n                var n = 0;\n                while (length > 0) {\n                    n = n << 1 | readBit();\n                    length--;\n                }\n                return n;\n            }\n            function receiveAndExtend(length) {\n                if (length === 1) {\n                    return readBit() === 1 ? 1 : -1;\n                }\n                var n = receive(length);\n                if (n >= 1 << length - 1) {\n                    return n;\n                }\n                return n + (-1 << length) + 1;\n            }\n            function decodeBaseline(component, offset) {\n                var t = decodeHuffman(component.huffmanTableDC);\n                var diff = t === 0 ? 0 : receiveAndExtend(t);\n                component.blockData[offset] = component.pred += diff;\n                var k = 1;\n                while (k < 64) {\n                    var rs = decodeHuffman(component.huffmanTableAC);\n                    var s = rs & 15, r = rs >> 4;\n                    if (s === 0) {\n                        if (r < 15) {\n                            break;\n                        }\n                        k += 16;\n                        continue;\n                    }\n                    k += r;\n                    var z = dctZigZag[k];\n                    component.blockData[offset + z] = receiveAndExtend(s);\n                    k++;\n                }\n            }\n            function decodeDCFirst(component, offset) {\n                var t = decodeHuffman(component.huffmanTableDC);\n                var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n                component.blockData[offset] = component.pred += diff;\n            }\n            function decodeDCSuccessive(component, offset) {\n                component.blockData[offset] |= readBit() << successive;\n            }\n            var eobrun = 0;\n            function decodeACFirst(component, offset) {\n                if (eobrun > 0) {\n                    eobrun--;\n                    return;\n                }\n                var k = spectralStart, e = spectralEnd;\n                while (k <= e) {\n                    var rs = decodeHuffman(component.huffmanTableAC);\n                    var s = rs & 15, r = rs >> 4;\n                    if (s === 0) {\n                        if (r < 15) {\n                            eobrun = receive(r) + (1 << r) - 1;\n                            break;\n                        }\n                        k += 16;\n                        continue;\n                    }\n                    k += r;\n                    var z = dctZigZag[k];\n                    component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);\n                    k++;\n                }\n            }\n            var successiveACState = 0, successiveACNextValue;\n            function decodeACSuccessive(component, offset) {\n                var k = spectralStart;\n                var e = spectralEnd;\n                var r = 0;\n                var s;\n                var rs;\n                while (k <= e) {\n                    var z = dctZigZag[k];\n                    switch (successiveACState) {\n                      case 0:\n                        rs = decodeHuffman(component.huffmanTableAC);\n                        s = rs & 15;\n                        r = rs >> 4;\n                        if (s === 0) {\n                            if (r < 15) {\n                                eobrun = receive(r) + (1 << r);\n                                successiveACState = 4;\n                            } else {\n                                r = 16;\n                                successiveACState = 1;\n                            }\n                        } else {\n                            if (s !== 1) {\n                                throw \"invalid ACn encoding\";\n                            }\n                            successiveACNextValue = receiveAndExtend(s);\n                            successiveACState = r ? 2 : 3;\n                        }\n                        continue;\n\n                      case 1:\n                      case 2:\n                        if (component.blockData[offset + z]) {\n                            component.blockData[offset + z] += readBit() << successive;\n                        } else {\n                            r--;\n                            if (r === 0) {\n                                successiveACState = successiveACState === 2 ? 3 : 0;\n                            }\n                        }\n                        break;\n\n                      case 3:\n                        if (component.blockData[offset + z]) {\n                            component.blockData[offset + z] += readBit() << successive;\n                        } else {\n                            component.blockData[offset + z] = successiveACNextValue << successive;\n                            successiveACState = 0;\n                        }\n                        break;\n\n                      case 4:\n                        if (component.blockData[offset + z]) {\n                            component.blockData[offset + z] += readBit() << successive;\n                        }\n                        break;\n                    }\n                    k++;\n                }\n                if (successiveACState === 4) {\n                    eobrun--;\n                    if (eobrun === 0) {\n                        successiveACState = 0;\n                    }\n                }\n            }\n            function decodeMcu(component, decode, mcu, row, col) {\n                var mcuRow = mcu / mcusPerLine | 0;\n                var mcuCol = mcu % mcusPerLine;\n                var blockRow = mcuRow * component.v + row;\n                var blockCol = mcuCol * component.h + col;\n                var offset = getBlockBufferOffset(component, blockRow, blockCol);\n                decode(component, offset);\n            }\n            function decodeBlock(component, decode, mcu) {\n                var blockRow = mcu / component.blocksPerLine | 0;\n                var blockCol = mcu % component.blocksPerLine;\n                var offset = getBlockBufferOffset(component, blockRow, blockCol);\n                decode(component, offset);\n            }\n            var componentsLength = components.length;\n            var component, i, j, k, n;\n            var decodeFn;\n            if (progressive) {\n                if (spectralStart === 0) {\n                    decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n                } else {\n                    decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n                }\n            } else {\n                decodeFn = decodeBaseline;\n            }\n            var mcu = 0, marker;\n            var mcuExpected;\n            if (componentsLength === 1) {\n                mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n            } else {\n                mcuExpected = mcusPerLine * frame.mcusPerColumn;\n            }\n            if (!resetInterval) {\n                resetInterval = mcuExpected;\n            }\n            var h, v;\n            while (mcu < mcuExpected) {\n                for (i = 0; i < componentsLength; i++) {\n                    components[i].pred = 0;\n                }\n                eobrun = 0;\n                if (componentsLength === 1) {\n                    component = components[0];\n                    for (n = 0; n < resetInterval; n++) {\n                        decodeBlock(component, decodeFn, mcu);\n                        mcu++;\n                    }\n                } else {\n                    for (n = 0; n < resetInterval; n++) {\n                        for (i = 0; i < componentsLength; i++) {\n                            component = components[i];\n                            h = component.h;\n                            v = component.v;\n                            for (j = 0; j < v; j++) {\n                                for (k = 0; k < h; k++) {\n                                    decodeMcu(component, decodeFn, mcu, j, k);\n                                }\n                            }\n                        }\n                        mcu++;\n                    }\n                }\n                bitsCount = 0;\n                marker = data[offset] << 8 | data[offset + 1];\n                if (marker <= 65280) {\n                    throw \"marker was not found\";\n                }\n                if (marker >= 65488 && marker <= 65495) {\n                    offset += 2;\n                } else {\n                    break;\n                }\n            }\n            return offset - startOffset;\n        }\n        function quantizeAndInverse(component, blockBufferOffset, p) {\n            var qt = component.quantizationTable, blockData = component.blockData;\n            var v0, v1, v2, v3, v4, v5, v6, v7;\n            var p0, p1, p2, p3, p4, p5, p6, p7;\n            var t;\n            for (var row = 0; row < 64; row += 8) {\n                p0 = blockData[blockBufferOffset + row];\n                p1 = blockData[blockBufferOffset + row + 1];\n                p2 = blockData[blockBufferOffset + row + 2];\n                p3 = blockData[blockBufferOffset + row + 3];\n                p4 = blockData[blockBufferOffset + row + 4];\n                p5 = blockData[blockBufferOffset + row + 5];\n                p6 = blockData[blockBufferOffset + row + 6];\n                p7 = blockData[blockBufferOffset + row + 7];\n                p0 *= qt[row];\n                if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n                    t = dctSqrt2 * p0 + 512 >> 10;\n                    p[row] = t;\n                    p[row + 1] = t;\n                    p[row + 2] = t;\n                    p[row + 3] = t;\n                    p[row + 4] = t;\n                    p[row + 5] = t;\n                    p[row + 6] = t;\n                    p[row + 7] = t;\n                    continue;\n                }\n                p1 *= qt[row + 1];\n                p2 *= qt[row + 2];\n                p3 *= qt[row + 3];\n                p4 *= qt[row + 4];\n                p5 *= qt[row + 5];\n                p6 *= qt[row + 6];\n                p7 *= qt[row + 7];\n                v0 = dctSqrt2 * p0 + 128 >> 8;\n                v1 = dctSqrt2 * p4 + 128 >> 8;\n                v2 = p2;\n                v3 = p6;\n                v4 = dctSqrt1d2 * (p1 - p7) + 128 >> 8;\n                v7 = dctSqrt1d2 * (p1 + p7) + 128 >> 8;\n                v5 = p3 << 4;\n                v6 = p5 << 4;\n                v0 = v0 + v1 + 1 >> 1;\n                v1 = v0 - v1;\n                t = v2 * dctSin6 + v3 * dctCos6 + 128 >> 8;\n                v2 = v2 * dctCos6 - v3 * dctSin6 + 128 >> 8;\n                v3 = t;\n                v4 = v4 + v6 + 1 >> 1;\n                v6 = v4 - v6;\n                v7 = v7 + v5 + 1 >> 1;\n                v5 = v7 - v5;\n                v0 = v0 + v3 + 1 >> 1;\n                v3 = v0 - v3;\n                v1 = v1 + v2 + 1 >> 1;\n                v2 = v1 - v2;\n                t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n                v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n                v7 = t;\n                t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n                v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n                v6 = t;\n                p[row] = v0 + v7;\n                p[row + 7] = v0 - v7;\n                p[row + 1] = v1 + v6;\n                p[row + 6] = v1 - v6;\n                p[row + 2] = v2 + v5;\n                p[row + 5] = v2 - v5;\n                p[row + 3] = v3 + v4;\n                p[row + 4] = v3 - v4;\n            }\n            for (var col = 0; col < 8; ++col) {\n                p0 = p[col];\n                p1 = p[col + 8];\n                p2 = p[col + 16];\n                p3 = p[col + 24];\n                p4 = p[col + 32];\n                p5 = p[col + 40];\n                p6 = p[col + 48];\n                p7 = p[col + 56];\n                if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {\n                    t = dctSqrt2 * p0 + 8192 >> 14;\n                    t = t < -2040 ? 0 : t >= 2024 ? 255 : t + 2056 >> 4;\n                    blockData[blockBufferOffset + col] = t;\n                    blockData[blockBufferOffset + col + 8] = t;\n                    blockData[blockBufferOffset + col + 16] = t;\n                    blockData[blockBufferOffset + col + 24] = t;\n                    blockData[blockBufferOffset + col + 32] = t;\n                    blockData[blockBufferOffset + col + 40] = t;\n                    blockData[blockBufferOffset + col + 48] = t;\n                    blockData[blockBufferOffset + col + 56] = t;\n                    continue;\n                }\n                v0 = dctSqrt2 * p0 + 2048 >> 12;\n                v1 = dctSqrt2 * p4 + 2048 >> 12;\n                v2 = p2;\n                v3 = p6;\n                v4 = dctSqrt1d2 * (p1 - p7) + 2048 >> 12;\n                v7 = dctSqrt1d2 * (p1 + p7) + 2048 >> 12;\n                v5 = p3;\n                v6 = p5;\n                v0 = (v0 + v1 + 1 >> 1) + 4112;\n                v1 = v0 - v1;\n                t = v2 * dctSin6 + v3 * dctCos6 + 2048 >> 12;\n                v2 = v2 * dctCos6 - v3 * dctSin6 + 2048 >> 12;\n                v3 = t;\n                v4 = v4 + v6 + 1 >> 1;\n                v6 = v4 - v6;\n                v7 = v7 + v5 + 1 >> 1;\n                v5 = v7 - v5;\n                v0 = v0 + v3 + 1 >> 1;\n                v3 = v0 - v3;\n                v1 = v1 + v2 + 1 >> 1;\n                v2 = v1 - v2;\n                t = v4 * dctSin3 + v7 * dctCos3 + 2048 >> 12;\n                v4 = v4 * dctCos3 - v7 * dctSin3 + 2048 >> 12;\n                v7 = t;\n                t = v5 * dctSin1 + v6 * dctCos1 + 2048 >> 12;\n                v5 = v5 * dctCos1 - v6 * dctSin1 + 2048 >> 12;\n                v6 = t;\n                p0 = v0 + v7;\n                p7 = v0 - v7;\n                p1 = v1 + v6;\n                p6 = v1 - v6;\n                p2 = v2 + v5;\n                p5 = v2 - v5;\n                p3 = v3 + v4;\n                p4 = v3 - v4;\n                p0 = p0 < 16 ? 0 : p0 >= 4080 ? 255 : p0 >> 4;\n                p1 = p1 < 16 ? 0 : p1 >= 4080 ? 255 : p1 >> 4;\n                p2 = p2 < 16 ? 0 : p2 >= 4080 ? 255 : p2 >> 4;\n                p3 = p3 < 16 ? 0 : p3 >= 4080 ? 255 : p3 >> 4;\n                p4 = p4 < 16 ? 0 : p4 >= 4080 ? 255 : p4 >> 4;\n                p5 = p5 < 16 ? 0 : p5 >= 4080 ? 255 : p5 >> 4;\n                p6 = p6 < 16 ? 0 : p6 >= 4080 ? 255 : p6 >> 4;\n                p7 = p7 < 16 ? 0 : p7 >= 4080 ? 255 : p7 >> 4;\n                blockData[blockBufferOffset + col] = p0;\n                blockData[blockBufferOffset + col + 8] = p1;\n                blockData[blockBufferOffset + col + 16] = p2;\n                blockData[blockBufferOffset + col + 24] = p3;\n                blockData[blockBufferOffset + col + 32] = p4;\n                blockData[blockBufferOffset + col + 40] = p5;\n                blockData[blockBufferOffset + col + 48] = p6;\n                blockData[blockBufferOffset + col + 56] = p7;\n            }\n        }\n        function buildComponentData(frame, component) {\n            var blocksPerLine = component.blocksPerLine;\n            var blocksPerColumn = component.blocksPerColumn;\n            var computationBuffer = new Int16Array(64);\n            for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n                for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n                    var offset = getBlockBufferOffset(component, blockRow, blockCol);\n                    quantizeAndInverse(component, offset, computationBuffer);\n                }\n            }\n            return component.blockData;\n        }\n        function clamp0to255(a) {\n            return a <= 0 ? 0 : a >= 255 ? 255 : a;\n        }\n        constructor.prototype = {\n            parse: function parse(data) {\n                function readUint16() {\n                    var value = data[offset] << 8 | data[offset + 1];\n                    offset += 2;\n                    return value;\n                }\n                function readDataBlock() {\n                    var length = readUint16();\n                    var array = data.subarray(offset, offset + length - 2);\n                    offset += array.length;\n                    return array;\n                }\n                function prepareComponents(frame) {\n                    var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n                    var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n                    for (var i = 0; i < frame.components.length; i++) {\n                        component = frame.components[i];\n                        var blocksPerLine = Math.ceil(Math.ceil(frame.samplesPerLine / 8) * component.h / frame.maxH);\n                        var blocksPerColumn = Math.ceil(Math.ceil(frame.scanLines / 8) * component.v / frame.maxV);\n                        var blocksPerLineForMcu = mcusPerLine * component.h;\n                        var blocksPerColumnForMcu = mcusPerColumn * component.v;\n                        var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n                        component.blockData = new Int16Array(blocksBufferSize);\n                        component.blocksPerLine = blocksPerLine;\n                        component.blocksPerColumn = blocksPerColumn;\n                    }\n                    frame.mcusPerLine = mcusPerLine;\n                    frame.mcusPerColumn = mcusPerColumn;\n                }\n                var offset = 0, length = data.length;\n                var jfif = null;\n                var adobe = null;\n                var pixels = null;\n                var frame, resetInterval;\n                var quantizationTables = [];\n                var huffmanTablesAC = [], huffmanTablesDC = [];\n                var fileMarker = readUint16();\n                if (fileMarker !== 65496) {\n                    throw \"SOI not found\";\n                }\n                fileMarker = readUint16();\n                while (fileMarker !== 65497) {\n                    var i, j, l;\n                    switch (fileMarker) {\n                      case 65504:\n                      case 65505:\n                      case 65506:\n                      case 65507:\n                      case 65508:\n                      case 65509:\n                      case 65510:\n                      case 65511:\n                      case 65512:\n                      case 65513:\n                      case 65514:\n                      case 65515:\n                      case 65516:\n                      case 65517:\n                      case 65518:\n                      case 65519:\n                      case 65534:\n                        var appData = readDataBlock();\n                        if (fileMarker === 65504) {\n                            if (appData[0] === 74 && appData[1] === 70 && appData[2] === 73 && appData[3] === 70 && appData[4] === 0) {\n                                jfif = {\n                                    version: {\n                                        major: appData[5],\n                                        minor: appData[6]\n                                    },\n                                    densityUnits: appData[7],\n                                    xDensity: appData[8] << 8 | appData[9],\n                                    yDensity: appData[10] << 8 | appData[11],\n                                    thumbWidth: appData[12],\n                                    thumbHeight: appData[13],\n                                    thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13])\n                                };\n                            }\n                        }\n                        if (fileMarker === 65518) {\n                            if (appData[0] === 65 && appData[1] === 100 && appData[2] === 111 && appData[3] === 98 && appData[4] === 101 && appData[5] === 0) {\n                                adobe = {\n                                    version: appData[6],\n                                    flags0: appData[7] << 8 | appData[8],\n                                    flags1: appData[9] << 8 | appData[10],\n                                    transformCode: appData[11]\n                                };\n                            }\n                        }\n                        break;\n\n                      case 65499:\n                        var quantizationTablesLength = readUint16();\n                        var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n                        var z;\n                        while (offset < quantizationTablesEnd) {\n                            var quantizationTableSpec = data[offset++];\n                            var tableData = new Uint16Array(64);\n                            if (quantizationTableSpec >> 4 === 0) {\n                                for (j = 0; j < 64; j++) {\n                                    z = dctZigZag[j];\n                                    tableData[z] = data[offset++];\n                                }\n                            } else if (quantizationTableSpec >> 4 === 1) {\n                                for (j = 0; j < 64; j++) {\n                                    z = dctZigZag[j];\n                                    tableData[z] = readUint16();\n                                }\n                            } else {\n                                throw \"DQT: invalid table spec\";\n                            }\n                            quantizationTables[quantizationTableSpec & 15] = tableData;\n                        }\n                        break;\n\n                      case 65472:\n                      case 65473:\n                      case 65474:\n                        if (frame) {\n                            throw \"Only single frame JPEGs supported\";\n                        }\n                        readUint16();\n                        frame = {};\n                        frame.extended = fileMarker === 65473;\n                        frame.progressive = fileMarker === 65474;\n                        frame.precision = data[offset++];\n                        frame.scanLines = readUint16();\n                        frame.samplesPerLine = readUint16();\n                        frame.components = [];\n                        frame.componentIds = {};\n                        var componentsCount = data[offset++], componentId;\n                        var maxH = 0, maxV = 0;\n                        for (i = 0; i < componentsCount; i++) {\n                            componentId = data[offset];\n                            var h = data[offset + 1] >> 4;\n                            var v = data[offset + 1] & 15;\n                            if (maxH < h) {\n                                maxH = h;\n                            }\n                            if (maxV < v) {\n                                maxV = v;\n                            }\n                            var qId = data[offset + 2];\n                            l = frame.components.push({\n                                h: h,\n                                v: v,\n                                quantizationTable: quantizationTables[qId]\n                            });\n                            frame.componentIds[componentId] = l - 1;\n                            offset += 3;\n                        }\n                        frame.maxH = maxH;\n                        frame.maxV = maxV;\n                        prepareComponents(frame);\n                        break;\n\n                      case 65476:\n                        var huffmanLength = readUint16();\n                        for (i = 2; i < huffmanLength; ) {\n                            var huffmanTableSpec = data[offset++];\n                            var codeLengths = new Uint8Array(16);\n                            var codeLengthSum = 0;\n                            for (j = 0; j < 16; j++, offset++) {\n                                codeLengthSum += codeLengths[j] = data[offset];\n                            }\n                            var huffmanValues = new Uint8Array(codeLengthSum);\n                            for (j = 0; j < codeLengthSum; j++, offset++) {\n                                huffmanValues[j] = data[offset];\n                            }\n                            i += 17 + codeLengthSum;\n                            (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);\n                        }\n                        break;\n\n                      case 65501:\n                        readUint16();\n                        resetInterval = readUint16();\n                        break;\n\n                      case 65498:\n                        var scanLength = readUint16();\n                        var selectorsCount = data[offset++];\n                        var components = [], component;\n                        for (i = 0; i < selectorsCount; i++) {\n                            var componentIndex = frame.componentIds[data[offset++]];\n                            component = frame.components[componentIndex];\n                            var tableSpec = data[offset++];\n                            component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n                            component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n                            components.push(component);\n                        }\n                        var spectralStart = data[offset++];\n                        var spectralEnd = data[offset++];\n                        var successiveApproximation = data[offset++];\n                        var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15);\n                        offset += processed;\n                        break;\n\n                      case 65535:\n                        if (data[offset] !== 255) {\n                            offset--;\n                        }\n                        break;\n\n                      default:\n                        if (data[offset - 3] === 255 && data[offset - 2] >= 192 && data[offset - 2] <= 254) {\n                            offset -= 3;\n                            break;\n                        }\n                        throw \"unknown JPEG marker \" + fileMarker.toString(16);\n                    }\n                    fileMarker = readUint16();\n                }\n                this.width = frame.samplesPerLine;\n                this.height = frame.scanLines;\n                this.jfif = jfif;\n                this.adobe = adobe;\n                this.components = [];\n                for (i = 0; i < frame.components.length; i++) {\n                    component = frame.components[i];\n                    this.components.push({\n                        output: buildComponentData(frame, component),\n                        scaleX: component.h / frame.maxH,\n                        scaleY: component.v / frame.maxV,\n                        blocksPerLine: component.blocksPerLine,\n                        blocksPerColumn: component.blocksPerColumn\n                    });\n                }\n                this.numComponents = this.components.length;\n            },\n            _getLinearizedBlockData: function getLinearizedBlockData(width, height) {\n                var scaleX = this.width / width, scaleY = this.height / height;\n                var component, componentScaleX, componentScaleY, blocksPerScanline;\n                var x, y, i, j, k;\n                var index;\n                var offset = 0;\n                var output;\n                var numComponents = this.components.length;\n                var dataLength = width * height * numComponents;\n                var data = new Uint8Array(dataLength);\n                var xScaleBlockOffset = new Uint32Array(width);\n                var mask3LSB = 4294967288;\n                for (i = 0; i < numComponents; i++) {\n                    component = this.components[i];\n                    componentScaleX = component.scaleX * scaleX;\n                    componentScaleY = component.scaleY * scaleY;\n                    offset = i;\n                    output = component.output;\n                    blocksPerScanline = component.blocksPerLine + 1 << 3;\n                    for (x = 0; x < width; x++) {\n                        j = 0 | x * componentScaleX;\n                        xScaleBlockOffset[x] = (j & mask3LSB) << 3 | j & 7;\n                    }\n                    for (y = 0; y < height; y++) {\n                        j = 0 | y * componentScaleY;\n                        index = blocksPerScanline * (j & mask3LSB) | (j & 7) << 3;\n                        for (x = 0; x < width; x++) {\n                            data[offset] = output[index + xScaleBlockOffset[x]];\n                            offset += numComponents;\n                        }\n                    }\n                }\n                var transform = this.decodeTransform;\n                if (transform) {\n                    for (i = 0; i < dataLength; ) {\n                        for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {\n                            data[i] = (data[i] * transform[k] >> 8) + transform[k + 1];\n                        }\n                    }\n                }\n                return data;\n            },\n            _isColorConversionNeeded: function isColorConversionNeeded() {\n                if (this.adobe && this.adobe.transformCode) {\n                    return true;\n                } else if (this.numComponents === 3) {\n                    return true;\n                } else {\n                    return false;\n                }\n            },\n            _convertYccToRgb: function convertYccToRgb(data) {\n                var Y, Cb, Cr;\n                for (var i = 0, length = data.length; i < length; i += 3) {\n                    Y = data[i];\n                    Cb = data[i + 1];\n                    Cr = data[i + 2];\n                    data[i] = clamp0to255(Y - 179.456 + 1.402 * Cr);\n                    data[i + 1] = clamp0to255(Y + 135.459 - .344 * Cb - .714 * Cr);\n                    data[i + 2] = clamp0to255(Y - 226.816 + 1.772 * Cb);\n                }\n                return data;\n            },\n            _convertYcckToRgb: function convertYcckToRgb(data) {\n                var Y, Cb, Cr, k;\n                var offset = 0;\n                for (var i = 0, length = data.length; i < length; i += 4) {\n                    Y = data[i];\n                    Cb = data[i + 1];\n                    Cr = data[i + 2];\n                    k = data[i + 3];\n                    var r = -122.67195406894 + Cb * (-660635669420364e-19 * Cb + .000437130475926232 * Cr - 54080610064599e-18 * Y + .00048449797120281 * k - .154362151871126) + Cr * (-.000957964378445773 * Cr + .000817076911346625 * Y - .00477271405408747 * k + 1.53380253221734) + Y * (.000961250184130688 * Y - .00266257332283933 * k + .48357088451265) + k * (-.000336197177618394 * k + .484791561490776);\n                    var g = 107.268039397724 + Cb * (219927104525741e-19 * Cb - .000640992018297945 * Cr + .000659397001245577 * Y + .000426105652938837 * k - .176491792462875) + Cr * (-.000778269941513683 * Cr + .00130872261408275 * Y + .000770482631801132 * k - .151051492775562) + Y * (.00126935368114843 * Y - .00265090189010898 * k + .25802910206845) + k * (-.000318913117588328 * k - .213742400323665);\n                    var b = -20.810012546947 + Cb * (-.000570115196973677 * Cb - 263409051004589e-19 * Cr + .0020741088115012 * Y - .00288260236853442 * k + .814272968359295) + Cr * (-153496057440975e-19 * Cr - .000132689043961446 * Y + .000560833691242812 * k - .195152027534049) + Y * (.00174418132927582 * Y - .00255243321439347 * k + .116935020465145) + k * (-.000343531996510555 * k + .24165260232407);\n                    data[offset++] = clamp0to255(r);\n                    data[offset++] = clamp0to255(g);\n                    data[offset++] = clamp0to255(b);\n                }\n                return data;\n            },\n            _convertYcckToCmyk: function convertYcckToCmyk(data) {\n                var Y, Cb, Cr;\n                for (var i = 0, length = data.length; i < length; i += 4) {\n                    Y = data[i];\n                    Cb = data[i + 1];\n                    Cr = data[i + 2];\n                    data[i] = clamp0to255(434.456 - Y - 1.402 * Cr);\n                    data[i + 1] = clamp0to255(119.541 - Y + .344 * Cb + .714 * Cr);\n                    data[i + 2] = clamp0to255(481.816 - Y - 1.772 * Cb);\n                }\n                return data;\n            },\n            _convertCmykToRgb: function convertCmykToRgb(data) {\n                var c, m, y, k;\n                var offset = 0;\n                var min = -255 * 255 * 255;\n                var scale = 1 / 255 / 255;\n                for (var i = 0, length = data.length; i < length; i += 4) {\n                    c = data[i];\n                    m = data[i + 1];\n                    y = data[i + 2];\n                    k = data[i + 3];\n                    var r = c * (-4.387332384609988 * c + 54.48615194189176 * m + 18.82290502165302 * y + 212.25662451639585 * k - 72734.4411664936) + m * (1.7149763477362134 * m - 5.6096736904047315 * y - 17.873870861415444 * k - 1401.7366389350734) + y * (-2.5217340131683033 * y - 21.248923337353073 * k + 4465.541406466231) - k * (21.86122147463605 * k + 48317.86113160301);\n                    var g = c * (8.841041422036149 * c + 60.118027045597366 * m + 6.871425592049007 * y + 31.159100130055922 * k - 20220.756542821975) + m * (-15.310361306967817 * m + 17.575251261109482 * y + 131.35250912493976 * k - 48691.05921601825) + y * (4.444339102852739 * y + 9.8632861493405 * k - 6341.191035517494) - k * (20.737325471181034 * k + 47890.15695978492);\n                    var b = c * (.8842522430003296 * c + 8.078677503112928 * m + 30.89978309703729 * y - .23883238689178934 * k - 3616.812083916688) + m * (10.49593273432072 * m + 63.02378494754052 * y + 50.606957656360734 * k - 28620.90484698408) + y * (.03296041114873217 * y + 115.60384449646641 * k - 49363.43385999684) - k * (22.33816807309886 * k + 45932.16563550634);\n                    data[offset++] = r >= 0 ? 255 : r <= min ? 0 : 255 + r * scale | 0;\n                    data[offset++] = g >= 0 ? 255 : g <= min ? 0 : 255 + g * scale | 0;\n                    data[offset++] = b >= 0 ? 255 : b <= min ? 0 : 255 + b * scale | 0;\n                }\n                return data;\n            },\n            getData: function getData(width, height, forceRGBoutput) {\n                if (this.numComponents > 4) {\n                    throw \"Unsupported color mode\";\n                }\n                var data = this._getLinearizedBlockData(width, height);\n                if (this.numComponents === 3) {\n                    return this._convertYccToRgb(data);\n                } else if (this.numComponents === 4) {\n                    if (this._isColorConversionNeeded()) {\n                        if (forceRGBoutput) {\n                            return this._convertYcckToRgb(data);\n                        } else {\n                            return this._convertYcckToCmyk(data);\n                        }\n                    } else if (forceRGBoutput) {\n                        return this._convertCmykToRgb(data);\n                    }\n                }\n                return data;\n            }\n        };\n        return constructor;\n    }();\n    \"use strict\";\n    var ArithmeticDecoder = function ArithmeticDecoderClosure() {\n        var QeTable = [ {\n            qe: 22017,\n            nmps: 1,\n            nlps: 1,\n            switchFlag: 1\n        }, {\n            qe: 13313,\n            nmps: 2,\n            nlps: 6,\n            switchFlag: 0\n        }, {\n            qe: 6145,\n            nmps: 3,\n            nlps: 9,\n            switchFlag: 0\n        }, {\n            qe: 2753,\n            nmps: 4,\n            nlps: 12,\n            switchFlag: 0\n        }, {\n            qe: 1313,\n            nmps: 5,\n            nlps: 29,\n            switchFlag: 0\n        }, {\n            qe: 545,\n            nmps: 38,\n            nlps: 33,\n            switchFlag: 0\n        }, {\n            qe: 22017,\n            nmps: 7,\n            nlps: 6,\n            switchFlag: 1\n        }, {\n            qe: 21505,\n            nmps: 8,\n            nlps: 14,\n            switchFlag: 0\n        }, {\n            qe: 18433,\n            nmps: 9,\n            nlps: 14,\n            switchFlag: 0\n        }, {\n            qe: 14337,\n            nmps: 10,\n            nlps: 14,\n            switchFlag: 0\n        }, {\n            qe: 12289,\n            nmps: 11,\n            nlps: 17,\n            switchFlag: 0\n        }, {\n            qe: 9217,\n            nmps: 12,\n            nlps: 18,\n            switchFlag: 0\n        }, {\n            qe: 7169,\n            nmps: 13,\n            nlps: 20,\n            switchFlag: 0\n        }, {\n            qe: 5633,\n            nmps: 29,\n            nlps: 21,\n            switchFlag: 0\n        }, {\n            qe: 22017,\n            nmps: 15,\n            nlps: 14,\n            switchFlag: 1\n        }, {\n            qe: 21505,\n            nmps: 16,\n            nlps: 14,\n            switchFlag: 0\n        }, {\n            qe: 20737,\n            nmps: 17,\n            nlps: 15,\n            switchFlag: 0\n        }, {\n            qe: 18433,\n            nmps: 18,\n            nlps: 16,\n            switchFlag: 0\n        }, {\n            qe: 14337,\n            nmps: 19,\n            nlps: 17,\n            switchFlag: 0\n        }, {\n            qe: 13313,\n            nmps: 20,\n            nlps: 18,\n            switchFlag: 0\n        }, {\n            qe: 12289,\n            nmps: 21,\n            nlps: 19,\n            switchFlag: 0\n        }, {\n            qe: 10241,\n            nmps: 22,\n            nlps: 19,\n            switchFlag: 0\n        }, {\n            qe: 9217,\n            nmps: 23,\n            nlps: 20,\n            switchFlag: 0\n        }, {\n            qe: 8705,\n            nmps: 24,\n            nlps: 21,\n            switchFlag: 0\n        }, {\n            qe: 7169,\n            nmps: 25,\n            nlps: 22,\n            switchFlag: 0\n        }, {\n            qe: 6145,\n            nmps: 26,\n            nlps: 23,\n            switchFlag: 0\n        }, {\n            qe: 5633,\n            nmps: 27,\n            nlps: 24,\n            switchFlag: 0\n        }, {\n            qe: 5121,\n            nmps: 28,\n            nlps: 25,\n            switchFlag: 0\n        }, {\n            qe: 4609,\n            nmps: 29,\n            nlps: 26,\n            switchFlag: 0\n        }, {\n            qe: 4353,\n            nmps: 30,\n            nlps: 27,\n            switchFlag: 0\n        }, {\n            qe: 2753,\n            nmps: 31,\n            nlps: 28,\n            switchFlag: 0\n        }, {\n            qe: 2497,\n            nmps: 32,\n            nlps: 29,\n            switchFlag: 0\n        }, {\n            qe: 2209,\n            nmps: 33,\n            nlps: 30,\n            switchFlag: 0\n        }, {\n            qe: 1313,\n            nmps: 34,\n            nlps: 31,\n            switchFlag: 0\n        }, {\n            qe: 1089,\n            nmps: 35,\n            nlps: 32,\n            switchFlag: 0\n        }, {\n            qe: 673,\n            nmps: 36,\n            nlps: 33,\n            switchFlag: 0\n        }, {\n            qe: 545,\n            nmps: 37,\n            nlps: 34,\n            switchFlag: 0\n        }, {\n            qe: 321,\n            nmps: 38,\n            nlps: 35,\n            switchFlag: 0\n        }, {\n            qe: 273,\n            nmps: 39,\n            nlps: 36,\n            switchFlag: 0\n        }, {\n            qe: 133,\n            nmps: 40,\n            nlps: 37,\n            switchFlag: 0\n        }, {\n            qe: 73,\n            nmps: 41,\n            nlps: 38,\n            switchFlag: 0\n        }, {\n            qe: 37,\n            nmps: 42,\n            nlps: 39,\n            switchFlag: 0\n        }, {\n            qe: 21,\n            nmps: 43,\n            nlps: 40,\n            switchFlag: 0\n        }, {\n            qe: 9,\n            nmps: 44,\n            nlps: 41,\n            switchFlag: 0\n        }, {\n            qe: 5,\n            nmps: 45,\n            nlps: 42,\n            switchFlag: 0\n        }, {\n            qe: 1,\n            nmps: 45,\n            nlps: 43,\n            switchFlag: 0\n        }, {\n            qe: 22017,\n            nmps: 46,\n            nlps: 46,\n            switchFlag: 0\n        } ];\n        function ArithmeticDecoder(data, start, end) {\n            this.data = data;\n            this.bp = start;\n            this.dataEnd = end;\n            this.chigh = data[start];\n            this.clow = 0;\n            this.byteIn();\n            this.chigh = this.chigh << 7 & 65535 | this.clow >> 9 & 127;\n            this.clow = this.clow << 7 & 65535;\n            this.ct -= 7;\n            this.a = 32768;\n        }\n        ArithmeticDecoder.prototype = {\n            byteIn: function ArithmeticDecoder_byteIn() {\n                var data = this.data;\n                var bp = this.bp;\n                if (data[bp] === 255) {\n                    var b1 = data[bp + 1];\n                    if (b1 > 143) {\n                        this.clow += 65280;\n                        this.ct = 8;\n                    } else {\n                        bp++;\n                        this.clow += data[bp] << 9;\n                        this.ct = 7;\n                        this.bp = bp;\n                    }\n                } else {\n                    bp++;\n                    this.clow += bp < this.dataEnd ? data[bp] << 8 : 65280;\n                    this.ct = 8;\n                    this.bp = bp;\n                }\n                if (this.clow > 65535) {\n                    this.chigh += this.clow >> 16;\n                    this.clow &= 65535;\n                }\n            },\n            readBit: function ArithmeticDecoder_readBit(contexts, pos) {\n                var cx_index = contexts[pos] >> 1, cx_mps = contexts[pos] & 1;\n                var qeTableIcx = QeTable[cx_index];\n                var qeIcx = qeTableIcx.qe;\n                var d;\n                var a = this.a - qeIcx;\n                if (this.chigh < qeIcx) {\n                    if (a < qeIcx) {\n                        a = qeIcx;\n                        d = cx_mps;\n                        cx_index = qeTableIcx.nmps;\n                    } else {\n                        a = qeIcx;\n                        d = 1 ^ cx_mps;\n                        if (qeTableIcx.switchFlag === 1) {\n                            cx_mps = d;\n                        }\n                        cx_index = qeTableIcx.nlps;\n                    }\n                } else {\n                    this.chigh -= qeIcx;\n                    if ((a & 32768) !== 0) {\n                        this.a = a;\n                        return cx_mps;\n                    }\n                    if (a < qeIcx) {\n                        d = 1 ^ cx_mps;\n                        if (qeTableIcx.switchFlag === 1) {\n                            cx_mps = d;\n                        }\n                        cx_index = qeTableIcx.nlps;\n                    } else {\n                        d = cx_mps;\n                        cx_index = qeTableIcx.nmps;\n                    }\n                }\n                do {\n                    if (this.ct === 0) {\n                        this.byteIn();\n                    }\n                    a <<= 1;\n                    this.chigh = this.chigh << 1 & 65535 | this.clow >> 15 & 1;\n                    this.clow = this.clow << 1 & 65535;\n                    this.ct--;\n                } while ((a & 32768) === 0);\n                this.a = a;\n                contexts[pos] = cx_index << 1 | cx_mps;\n                return d;\n            }\n        };\n        return ArithmeticDecoder;\n    }();\n    \"use strict\";\n    var JpxImage = function JpxImageClosure() {\n        var SubbandsGainLog2 = {\n            LL: 0,\n            LH: 1,\n            HL: 1,\n            HH: 2\n        };\n        function JpxImage() {\n            this.failOnCorruptedImage = false;\n        }\n        JpxImage.prototype = {\n            parse: function JpxImage_parse(data) {\n                var head = readUint16(data, 0);\n                if (head === 65359) {\n                    this.parseCodestream(data, 0, data.length);\n                    return;\n                }\n                var position = 0, length = data.length;\n                while (position < length) {\n                    var headerSize = 8;\n                    var lbox = readUint32(data, position);\n                    var tbox = readUint32(data, position + 4);\n                    position += headerSize;\n                    if (lbox === 1) {\n                        lbox = readUint32(data, position) * 4294967296 + readUint32(data, position + 4);\n                        position += 8;\n                        headerSize += 8;\n                    }\n                    if (lbox === 0) {\n                        lbox = length - position + headerSize;\n                    }\n                    if (lbox < headerSize) {\n                        throw new Error(\"JPX Error: Invalid box field size\");\n                    }\n                    var dataLength = lbox - headerSize;\n                    var jumpDataLength = true;\n                    switch (tbox) {\n                      case 1785737832:\n                        jumpDataLength = false;\n                        break;\n\n                      case 1668246642:\n                        var method = data[position];\n                        var precedence = data[position + 1];\n                        var approximation = data[position + 2];\n                        if (method === 1) {\n                            var colorspace = readUint32(data, position + 3);\n                            switch (colorspace) {\n                              case 16:\n                              case 17:\n                              case 18:\n                                break;\n\n                              default:\n                                warn(\"Unknown colorspace \" + colorspace);\n                                break;\n                            }\n                        } else if (method === 2) {\n                            info(\"ICC profile not supported\");\n                        }\n                        break;\n\n                      case 1785737827:\n                        this.parseCodestream(data, position, position + dataLength);\n                        break;\n\n                      case 1783636e3:\n                        if (218793738 !== readUint32(data, position)) {\n                            warn(\"Invalid JP2 signature\");\n                        }\n                        break;\n\n                      case 1783634458:\n                      case 1718909296:\n                      case 1920099697:\n                      case 1919251232:\n                      case 1768449138:\n                        break;\n\n                      default:\n                        var headerType = String.fromCharCode(tbox >> 24 & 255, tbox >> 16 & 255, tbox >> 8 & 255, tbox & 255);\n                        warn(\"Unsupported header type \" + tbox + \" (\" + headerType + \")\");\n                        break;\n                    }\n                    if (jumpDataLength) {\n                        position += dataLength;\n                    }\n                }\n            },\n            parseImageProperties: function JpxImage_parseImageProperties(stream) {\n                var newByte = stream.getByte();\n                while (newByte >= 0) {\n                    var oldByte = newByte;\n                    newByte = stream.getByte();\n                    var code = oldByte << 8 | newByte;\n                    if (code === 65361) {\n                        stream.skip(4);\n                        var Xsiz = stream.getInt32() >>> 0;\n                        var Ysiz = stream.getInt32() >>> 0;\n                        var XOsiz = stream.getInt32() >>> 0;\n                        var YOsiz = stream.getInt32() >>> 0;\n                        stream.skip(16);\n                        var Csiz = stream.getUint16();\n                        this.width = Xsiz - XOsiz;\n                        this.height = Ysiz - YOsiz;\n                        this.componentsCount = Csiz;\n                        this.bitsPerComponent = 8;\n                        return;\n                    }\n                }\n                throw new Error(\"JPX Error: No size marker found in JPX stream\");\n            },\n            parseCodestream: function JpxImage_parseCodestream(data, start, end) {\n                var context = {};\n                try {\n                    var doNotRecover = false;\n                    var position = start;\n                    while (position + 1 < end) {\n                        var code = readUint16(data, position);\n                        position += 2;\n                        var length = 0, j, sqcd, spqcds, spqcdSize, scalarExpounded, tile;\n                        switch (code) {\n                          case 65359:\n                            context.mainHeader = true;\n                            break;\n\n                          case 65497:\n                            break;\n\n                          case 65361:\n                            length = readUint16(data, position);\n                            var siz = {};\n                            siz.Xsiz = readUint32(data, position + 4);\n                            siz.Ysiz = readUint32(data, position + 8);\n                            siz.XOsiz = readUint32(data, position + 12);\n                            siz.YOsiz = readUint32(data, position + 16);\n                            siz.XTsiz = readUint32(data, position + 20);\n                            siz.YTsiz = readUint32(data, position + 24);\n                            siz.XTOsiz = readUint32(data, position + 28);\n                            siz.YTOsiz = readUint32(data, position + 32);\n                            var componentsCount = readUint16(data, position + 36);\n                            siz.Csiz = componentsCount;\n                            var components = [];\n                            j = position + 38;\n                            for (var i = 0; i < componentsCount; i++) {\n                                var component = {\n                                    precision: (data[j] & 127) + 1,\n                                    isSigned: !!(data[j] & 128),\n                                    XRsiz: data[j + 1],\n                                    YRsiz: data[j + 1]\n                                };\n                                calculateComponentDimensions(component, siz);\n                                components.push(component);\n                            }\n                            context.SIZ = siz;\n                            context.components = components;\n                            calculateTileGrids(context, components);\n                            context.QCC = [];\n                            context.COC = [];\n                            break;\n\n                          case 65372:\n                            length = readUint16(data, position);\n                            var qcd = {};\n                            j = position + 2;\n                            sqcd = data[j++];\n                            switch (sqcd & 31) {\n                              case 0:\n                                spqcdSize = 8;\n                                scalarExpounded = true;\n                                break;\n\n                              case 1:\n                                spqcdSize = 16;\n                                scalarExpounded = false;\n                                break;\n\n                              case 2:\n                                spqcdSize = 16;\n                                scalarExpounded = true;\n                                break;\n\n                              default:\n                                throw new Error(\"JPX Error: Invalid SQcd value \" + sqcd);\n                            }\n                            qcd.noQuantization = spqcdSize === 8;\n                            qcd.scalarExpounded = scalarExpounded;\n                            qcd.guardBits = sqcd >> 5;\n                            spqcds = [];\n                            while (j < length + position) {\n                                var spqcd = {};\n                                if (spqcdSize === 8) {\n                                    spqcd.epsilon = data[j++] >> 3;\n                                    spqcd.mu = 0;\n                                } else {\n                                    spqcd.epsilon = data[j] >> 3;\n                                    spqcd.mu = (data[j] & 7) << 8 | data[j + 1];\n                                    j += 2;\n                                }\n                                spqcds.push(spqcd);\n                            }\n                            qcd.SPqcds = spqcds;\n                            if (context.mainHeader) {\n                                context.QCD = qcd;\n                            } else {\n                                context.currentTile.QCD = qcd;\n                                context.currentTile.QCC = [];\n                            }\n                            break;\n\n                          case 65373:\n                            length = readUint16(data, position);\n                            var qcc = {};\n                            j = position + 2;\n                            var cqcc;\n                            if (context.SIZ.Csiz < 257) {\n                                cqcc = data[j++];\n                            } else {\n                                cqcc = readUint16(data, j);\n                                j += 2;\n                            }\n                            sqcd = data[j++];\n                            switch (sqcd & 31) {\n                              case 0:\n                                spqcdSize = 8;\n                                scalarExpounded = true;\n                                break;\n\n                              case 1:\n                                spqcdSize = 16;\n                                scalarExpounded = false;\n                                break;\n\n                              case 2:\n                                spqcdSize = 16;\n                                scalarExpounded = true;\n                                break;\n\n                              default:\n                                throw new Error(\"JPX Error: Invalid SQcd value \" + sqcd);\n                            }\n                            qcc.noQuantization = spqcdSize === 8;\n                            qcc.scalarExpounded = scalarExpounded;\n                            qcc.guardBits = sqcd >> 5;\n                            spqcds = [];\n                            while (j < length + position) {\n                                spqcd = {};\n                                if (spqcdSize === 8) {\n                                    spqcd.epsilon = data[j++] >> 3;\n                                    spqcd.mu = 0;\n                                } else {\n                                    spqcd.epsilon = data[j] >> 3;\n                                    spqcd.mu = (data[j] & 7) << 8 | data[j + 1];\n                                    j += 2;\n                                }\n                                spqcds.push(spqcd);\n                            }\n                            qcc.SPqcds = spqcds;\n                            if (context.mainHeader) {\n                                context.QCC[cqcc] = qcc;\n                            } else {\n                                context.currentTile.QCC[cqcc] = qcc;\n                            }\n                            break;\n\n                          case 65362:\n                            length = readUint16(data, position);\n                            var cod = {};\n                            j = position + 2;\n                            var scod = data[j++];\n                            cod.entropyCoderWithCustomPrecincts = !!(scod & 1);\n                            cod.sopMarkerUsed = !!(scod & 2);\n                            cod.ephMarkerUsed = !!(scod & 4);\n                            cod.progressionOrder = data[j++];\n                            cod.layersCount = readUint16(data, j);\n                            j += 2;\n                            cod.multipleComponentTransform = data[j++];\n                            cod.decompositionLevelsCount = data[j++];\n                            cod.xcb = (data[j++] & 15) + 2;\n                            cod.ycb = (data[j++] & 15) + 2;\n                            var blockStyle = data[j++];\n                            cod.selectiveArithmeticCodingBypass = !!(blockStyle & 1);\n                            cod.resetContextProbabilities = !!(blockStyle & 2);\n                            cod.terminationOnEachCodingPass = !!(blockStyle & 4);\n                            cod.verticalyStripe = !!(blockStyle & 8);\n                            cod.predictableTermination = !!(blockStyle & 16);\n                            cod.segmentationSymbolUsed = !!(blockStyle & 32);\n                            cod.reversibleTransformation = data[j++];\n                            if (cod.entropyCoderWithCustomPrecincts) {\n                                var precinctsSizes = [];\n                                while (j < length + position) {\n                                    var precinctsSize = data[j++];\n                                    precinctsSizes.push({\n                                        PPx: precinctsSize & 15,\n                                        PPy: precinctsSize >> 4\n                                    });\n                                }\n                                cod.precinctsSizes = precinctsSizes;\n                            }\n                            var unsupported = [];\n                            if (cod.selectiveArithmeticCodingBypass) {\n                                unsupported.push(\"selectiveArithmeticCodingBypass\");\n                            }\n                            if (cod.resetContextProbabilities) {\n                                unsupported.push(\"resetContextProbabilities\");\n                            }\n                            if (cod.terminationOnEachCodingPass) {\n                                unsupported.push(\"terminationOnEachCodingPass\");\n                            }\n                            if (cod.verticalyStripe) {\n                                unsupported.push(\"verticalyStripe\");\n                            }\n                            if (cod.predictableTermination) {\n                                unsupported.push(\"predictableTermination\");\n                            }\n                            if (unsupported.length > 0) {\n                                doNotRecover = true;\n                                throw new Error(\"JPX Error: Unsupported COD options (\" + unsupported.join(\", \") + \")\");\n                            }\n                            if (context.mainHeader) {\n                                context.COD = cod;\n                            } else {\n                                context.currentTile.COD = cod;\n                                context.currentTile.COC = [];\n                            }\n                            break;\n\n                          case 65424:\n                            length = readUint16(data, position);\n                            tile = {};\n                            tile.index = readUint16(data, position + 2);\n                            tile.length = readUint32(data, position + 4);\n                            tile.dataEnd = tile.length + position - 2;\n                            tile.partIndex = data[position + 8];\n                            tile.partsCount = data[position + 9];\n                            context.mainHeader = false;\n                            if (tile.partIndex === 0) {\n                                tile.COD = context.COD;\n                                tile.COC = context.COC.slice(0);\n                                tile.QCD = context.QCD;\n                                tile.QCC = context.QCC.slice(0);\n                            }\n                            context.currentTile = tile;\n                            break;\n\n                          case 65427:\n                            tile = context.currentTile;\n                            if (tile.partIndex === 0) {\n                                initializeTile(context, tile.index);\n                                buildPackets(context);\n                            }\n                            length = tile.dataEnd - position;\n                            parseTilePackets(context, data, position, length);\n                            break;\n\n                          case 65365:\n                          case 65367:\n                          case 65368:\n                          case 65380:\n                            length = readUint16(data, position);\n                            break;\n\n                          case 65363:\n                            throw new Error(\"JPX Error: Codestream code 0xFF53 (COC) is \" + \"not implemented\");\n\n                          default:\n                            throw new Error(\"JPX Error: Unknown codestream code: \" + code.toString(16));\n                        }\n                        position += length;\n                    }\n                } catch (e) {\n                    if (doNotRecover || this.failOnCorruptedImage) {\n                        throw e;\n                    } else {\n                        warn(\"Trying to recover from \" + e.message);\n                    }\n                }\n                this.tiles = transformComponents(context);\n                this.width = context.SIZ.Xsiz - context.SIZ.XOsiz;\n                this.height = context.SIZ.Ysiz - context.SIZ.YOsiz;\n                this.componentsCount = context.SIZ.Csiz;\n            }\n        };\n        function calculateComponentDimensions(component, siz) {\n            component.x0 = Math.ceil(siz.XOsiz / component.XRsiz);\n            component.x1 = Math.ceil(siz.Xsiz / component.XRsiz);\n            component.y0 = Math.ceil(siz.YOsiz / component.YRsiz);\n            component.y1 = Math.ceil(siz.Ysiz / component.YRsiz);\n            component.width = component.x1 - component.x0;\n            component.height = component.y1 - component.y0;\n        }\n        function calculateTileGrids(context, components) {\n            var siz = context.SIZ;\n            var tile, tiles = [];\n            var numXtiles = Math.ceil((siz.Xsiz - siz.XTOsiz) / siz.XTsiz);\n            var numYtiles = Math.ceil((siz.Ysiz - siz.YTOsiz) / siz.YTsiz);\n            for (var q = 0; q < numYtiles; q++) {\n                for (var p = 0; p < numXtiles; p++) {\n                    tile = {};\n                    tile.tx0 = Math.max(siz.XTOsiz + p * siz.XTsiz, siz.XOsiz);\n                    tile.ty0 = Math.max(siz.YTOsiz + q * siz.YTsiz, siz.YOsiz);\n                    tile.tx1 = Math.min(siz.XTOsiz + (p + 1) * siz.XTsiz, siz.Xsiz);\n                    tile.ty1 = Math.min(siz.YTOsiz + (q + 1) * siz.YTsiz, siz.Ysiz);\n                    tile.width = tile.tx1 - tile.tx0;\n                    tile.height = tile.ty1 - tile.ty0;\n                    tile.components = [];\n                    tiles.push(tile);\n                }\n            }\n            context.tiles = tiles;\n            var componentsCount = siz.Csiz;\n            for (var i = 0, ii = componentsCount; i < ii; i++) {\n                var component = components[i];\n                for (var j = 0, jj = tiles.length; j < jj; j++) {\n                    var tileComponent = {};\n                    tile = tiles[j];\n                    tileComponent.tcx0 = Math.ceil(tile.tx0 / component.XRsiz);\n                    tileComponent.tcy0 = Math.ceil(tile.ty0 / component.YRsiz);\n                    tileComponent.tcx1 = Math.ceil(tile.tx1 / component.XRsiz);\n                    tileComponent.tcy1 = Math.ceil(tile.ty1 / component.YRsiz);\n                    tileComponent.width = tileComponent.tcx1 - tileComponent.tcx0;\n                    tileComponent.height = tileComponent.tcy1 - tileComponent.tcy0;\n                    tile.components[i] = tileComponent;\n                }\n            }\n        }\n        function getBlocksDimensions(context, component, r) {\n            var codOrCoc = component.codingStyleParameters;\n            var result = {};\n            if (!codOrCoc.entropyCoderWithCustomPrecincts) {\n                result.PPx = 15;\n                result.PPy = 15;\n            } else {\n                result.PPx = codOrCoc.precinctsSizes[r].PPx;\n                result.PPy = codOrCoc.precinctsSizes[r].PPy;\n            }\n            result.xcb_ = r > 0 ? Math.min(codOrCoc.xcb, result.PPx - 1) : Math.min(codOrCoc.xcb, result.PPx);\n            result.ycb_ = r > 0 ? Math.min(codOrCoc.ycb, result.PPy - 1) : Math.min(codOrCoc.ycb, result.PPy);\n            return result;\n        }\n        function buildPrecincts(context, resolution, dimensions) {\n            var precinctWidth = 1 << dimensions.PPx;\n            var precinctHeight = 1 << dimensions.PPy;\n            var isZeroRes = resolution.resLevel === 0;\n            var precinctWidthInSubband = 1 << dimensions.PPx + (isZeroRes ? 0 : -1);\n            var precinctHeightInSubband = 1 << dimensions.PPy + (isZeroRes ? 0 : -1);\n            var numprecinctswide = resolution.trx1 > resolution.trx0 ? Math.ceil(resolution.trx1 / precinctWidth) - Math.floor(resolution.trx0 / precinctWidth) : 0;\n            var numprecinctshigh = resolution.try1 > resolution.try0 ? Math.ceil(resolution.try1 / precinctHeight) - Math.floor(resolution.try0 / precinctHeight) : 0;\n            var numprecincts = numprecinctswide * numprecinctshigh;\n            resolution.precinctParameters = {\n                precinctWidth: precinctWidth,\n                precinctHeight: precinctHeight,\n                numprecinctswide: numprecinctswide,\n                numprecinctshigh: numprecinctshigh,\n                numprecincts: numprecincts,\n                precinctWidthInSubband: precinctWidthInSubband,\n                precinctHeightInSubband: precinctHeightInSubband\n            };\n        }\n        function buildCodeblocks(context, subband, dimensions) {\n            var xcb_ = dimensions.xcb_;\n            var ycb_ = dimensions.ycb_;\n            var codeblockWidth = 1 << xcb_;\n            var codeblockHeight = 1 << ycb_;\n            var cbx0 = subband.tbx0 >> xcb_;\n            var cby0 = subband.tby0 >> ycb_;\n            var cbx1 = subband.tbx1 + codeblockWidth - 1 >> xcb_;\n            var cby1 = subband.tby1 + codeblockHeight - 1 >> ycb_;\n            var precinctParameters = subband.resolution.precinctParameters;\n            var codeblocks = [];\n            var precincts = [];\n            var i, j, codeblock, precinctNumber;\n            for (j = cby0; j < cby1; j++) {\n                for (i = cbx0; i < cbx1; i++) {\n                    codeblock = {\n                        cbx: i,\n                        cby: j,\n                        tbx0: codeblockWidth * i,\n                        tby0: codeblockHeight * j,\n                        tbx1: codeblockWidth * (i + 1),\n                        tby1: codeblockHeight * (j + 1)\n                    };\n                    codeblock.tbx0_ = Math.max(subband.tbx0, codeblock.tbx0);\n                    codeblock.tby0_ = Math.max(subband.tby0, codeblock.tby0);\n                    codeblock.tbx1_ = Math.min(subband.tbx1, codeblock.tbx1);\n                    codeblock.tby1_ = Math.min(subband.tby1, codeblock.tby1);\n                    var pi = Math.floor((codeblock.tbx0_ - subband.tbx0) / precinctParameters.precinctWidthInSubband);\n                    var pj = Math.floor((codeblock.tby0_ - subband.tby0) / precinctParameters.precinctHeightInSubband);\n                    precinctNumber = pi + pj * precinctParameters.numprecinctswide;\n                    codeblock.precinctNumber = precinctNumber;\n                    codeblock.subbandType = subband.type;\n                    codeblock.Lblock = 3;\n                    if (codeblock.tbx1_ <= codeblock.tbx0_ || codeblock.tby1_ <= codeblock.tby0_) {\n                        continue;\n                    }\n                    codeblocks.push(codeblock);\n                    var precinct = precincts[precinctNumber];\n                    if (precinct !== undefined) {\n                        if (i < precinct.cbxMin) {\n                            precinct.cbxMin = i;\n                        } else if (i > precinct.cbxMax) {\n                            precinct.cbxMax = i;\n                        }\n                        if (j < precinct.cbyMin) {\n                            precinct.cbxMin = j;\n                        } else if (j > precinct.cbyMax) {\n                            precinct.cbyMax = j;\n                        }\n                    } else {\n                        precincts[precinctNumber] = precinct = {\n                            cbxMin: i,\n                            cbyMin: j,\n                            cbxMax: i,\n                            cbyMax: j\n                        };\n                    }\n                    codeblock.precinct = precinct;\n                }\n            }\n            subband.codeblockParameters = {\n                codeblockWidth: xcb_,\n                codeblockHeight: ycb_,\n                numcodeblockwide: cbx1 - cbx0 + 1,\n                numcodeblockhigh: cby1 - cby0 + 1\n            };\n            subband.codeblocks = codeblocks;\n            subband.precincts = precincts;\n        }\n        function createPacket(resolution, precinctNumber, layerNumber) {\n            var precinctCodeblocks = [];\n            var subbands = resolution.subbands;\n            for (var i = 0, ii = subbands.length; i < ii; i++) {\n                var subband = subbands[i];\n                var codeblocks = subband.codeblocks;\n                for (var j = 0, jj = codeblocks.length; j < jj; j++) {\n                    var codeblock = codeblocks[j];\n                    if (codeblock.precinctNumber !== precinctNumber) {\n                        continue;\n                    }\n                    precinctCodeblocks.push(codeblock);\n                }\n            }\n            return {\n                layerNumber: layerNumber,\n                codeblocks: precinctCodeblocks\n            };\n        }\n        function LayerResolutionComponentPositionIterator(context) {\n            var siz = context.SIZ;\n            var tileIndex = context.currentTile.index;\n            var tile = context.tiles[tileIndex];\n            var layersCount = tile.codingStyleDefaultParameters.layersCount;\n            var componentsCount = siz.Csiz;\n            var maxDecompositionLevelsCount = 0;\n            for (var q = 0; q < componentsCount; q++) {\n                maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n            }\n            var l = 0, r = 0, i = 0, k = 0;\n            this.nextPacket = function JpxImage_nextPacket() {\n                for (;l < layersCount; l++) {\n                    for (;r <= maxDecompositionLevelsCount; r++) {\n                        for (;i < componentsCount; i++) {\n                            var component = tile.components[i];\n                            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n                                continue;\n                            }\n                            var resolution = component.resolutions[r];\n                            var numprecincts = resolution.precinctParameters.numprecincts;\n                            for (;k < numprecincts; ) {\n                                var packet = createPacket(resolution, k, l);\n                                k++;\n                                return packet;\n                            }\n                            k = 0;\n                        }\n                        i = 0;\n                    }\n                    r = 0;\n                }\n                throw new Error(\"JPX Error: Out of packets\");\n            };\n        }\n        function ResolutionLayerComponentPositionIterator(context) {\n            var siz = context.SIZ;\n            var tileIndex = context.currentTile.index;\n            var tile = context.tiles[tileIndex];\n            var layersCount = tile.codingStyleDefaultParameters.layersCount;\n            var componentsCount = siz.Csiz;\n            var maxDecompositionLevelsCount = 0;\n            for (var q = 0; q < componentsCount; q++) {\n                maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, tile.components[q].codingStyleParameters.decompositionLevelsCount);\n            }\n            var r = 0, l = 0, i = 0, k = 0;\n            this.nextPacket = function JpxImage_nextPacket() {\n                for (;r <= maxDecompositionLevelsCount; r++) {\n                    for (;l < layersCount; l++) {\n                        for (;i < componentsCount; i++) {\n                            var component = tile.components[i];\n                            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n                                continue;\n                            }\n                            var resolution = component.resolutions[r];\n                            var numprecincts = resolution.precinctParameters.numprecincts;\n                            for (;k < numprecincts; ) {\n                                var packet = createPacket(resolution, k, l);\n                                k++;\n                                return packet;\n                            }\n                            k = 0;\n                        }\n                        i = 0;\n                    }\n                    l = 0;\n                }\n                throw new Error(\"JPX Error: Out of packets\");\n            };\n        }\n        function ResolutionPositionComponentLayerIterator(context) {\n            var siz = context.SIZ;\n            var tileIndex = context.currentTile.index;\n            var tile = context.tiles[tileIndex];\n            var layersCount = tile.codingStyleDefaultParameters.layersCount;\n            var componentsCount = siz.Csiz;\n            var l, r, c, p;\n            var maxDecompositionLevelsCount = 0;\n            for (c = 0; c < componentsCount; c++) {\n                var component = tile.components[c];\n                maxDecompositionLevelsCount = Math.max(maxDecompositionLevelsCount, component.codingStyleParameters.decompositionLevelsCount);\n            }\n            var maxNumPrecinctsInLevel = new Int32Array(maxDecompositionLevelsCount + 1);\n            for (r = 0; r <= maxDecompositionLevelsCount; ++r) {\n                var maxNumPrecincts = 0;\n                for (c = 0; c < componentsCount; ++c) {\n                    var resolutions = tile.components[c].resolutions;\n                    if (r < resolutions.length) {\n                        maxNumPrecincts = Math.max(maxNumPrecincts, resolutions[r].precinctParameters.numprecincts);\n                    }\n                }\n                maxNumPrecinctsInLevel[r] = maxNumPrecincts;\n            }\n            l = 0;\n            r = 0;\n            c = 0;\n            p = 0;\n            this.nextPacket = function JpxImage_nextPacket() {\n                for (;r <= maxDecompositionLevelsCount; r++) {\n                    for (;p < maxNumPrecinctsInLevel[r]; p++) {\n                        for (;c < componentsCount; c++) {\n                            var component = tile.components[c];\n                            if (r > component.codingStyleParameters.decompositionLevelsCount) {\n                                continue;\n                            }\n                            var resolution = component.resolutions[r];\n                            var numprecincts = resolution.precinctParameters.numprecincts;\n                            if (p >= numprecincts) {\n                                continue;\n                            }\n                            for (;l < layersCount; ) {\n                                var packet = createPacket(resolution, p, l);\n                                l++;\n                                return packet;\n                            }\n                            l = 0;\n                        }\n                        c = 0;\n                    }\n                    p = 0;\n                }\n                throw new Error(\"JPX Error: Out of packets\");\n            };\n        }\n        function PositionComponentResolutionLayerIterator(context) {\n            var siz = context.SIZ;\n            var tileIndex = context.currentTile.index;\n            var tile = context.tiles[tileIndex];\n            var layersCount = tile.codingStyleDefaultParameters.layersCount;\n            var componentsCount = siz.Csiz;\n            var precinctsSizes = getPrecinctSizesInImageScale(tile);\n            var precinctsIterationSizes = precinctsSizes;\n            var l = 0, r = 0, c = 0, px = 0, py = 0;\n            this.nextPacket = function JpxImage_nextPacket() {\n                for (;py < precinctsIterationSizes.maxNumHigh; py++) {\n                    for (;px < precinctsIterationSizes.maxNumWide; px++) {\n                        for (;c < componentsCount; c++) {\n                            var component = tile.components[c];\n                            var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n                            for (;r <= decompositionLevelsCount; r++) {\n                                var resolution = component.resolutions[r];\n                                var sizeInImageScale = precinctsSizes.components[c].resolutions[r];\n                                var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n                                if (k === null) {\n                                    continue;\n                                }\n                                for (;l < layersCount; ) {\n                                    var packet = createPacket(resolution, k, l);\n                                    l++;\n                                    return packet;\n                                }\n                                l = 0;\n                            }\n                            r = 0;\n                        }\n                        c = 0;\n                    }\n                    px = 0;\n                }\n                throw new Error(\"JPX Error: Out of packets\");\n            };\n        }\n        function ComponentPositionResolutionLayerIterator(context) {\n            var siz = context.SIZ;\n            var tileIndex = context.currentTile.index;\n            var tile = context.tiles[tileIndex];\n            var layersCount = tile.codingStyleDefaultParameters.layersCount;\n            var componentsCount = siz.Csiz;\n            var precinctsSizes = getPrecinctSizesInImageScale(tile);\n            var l = 0, r = 0, c = 0, px = 0, py = 0;\n            this.nextPacket = function JpxImage_nextPacket() {\n                for (;c < componentsCount; ++c) {\n                    var component = tile.components[c];\n                    var precinctsIterationSizes = precinctsSizes.components[c];\n                    var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n                    for (;py < precinctsIterationSizes.maxNumHigh; py++) {\n                        for (;px < precinctsIterationSizes.maxNumWide; px++) {\n                            for (;r <= decompositionLevelsCount; r++) {\n                                var resolution = component.resolutions[r];\n                                var sizeInImageScale = precinctsIterationSizes.resolutions[r];\n                                var k = getPrecinctIndexIfExist(px, py, sizeInImageScale, precinctsIterationSizes, resolution);\n                                if (k === null) {\n                                    continue;\n                                }\n                                for (;l < layersCount; ) {\n                                    var packet = createPacket(resolution, k, l);\n                                    l++;\n                                    return packet;\n                                }\n                                l = 0;\n                            }\n                            r = 0;\n                        }\n                        px = 0;\n                    }\n                    py = 0;\n                }\n                throw new Error(\"JPX Error: Out of packets\");\n            };\n        }\n        function getPrecinctIndexIfExist(pxIndex, pyIndex, sizeInImageScale, precinctIterationSizes, resolution) {\n            var posX = pxIndex * precinctIterationSizes.minWidth;\n            var posY = pyIndex * precinctIterationSizes.minHeight;\n            if (posX % sizeInImageScale.width !== 0 || posY % sizeInImageScale.height !== 0) {\n                return null;\n            }\n            var startPrecinctRowIndex = posY / sizeInImageScale.width * resolution.precinctParameters.numprecinctswide;\n            return posX / sizeInImageScale.height + startPrecinctRowIndex;\n        }\n        function getPrecinctSizesInImageScale(tile) {\n            var componentsCount = tile.components.length;\n            var minWidth = Number.MAX_VALUE;\n            var minHeight = Number.MAX_VALUE;\n            var maxNumWide = 0;\n            var maxNumHigh = 0;\n            var sizePerComponent = new Array(componentsCount);\n            for (var c = 0; c < componentsCount; c++) {\n                var component = tile.components[c];\n                var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n                var sizePerResolution = new Array(decompositionLevelsCount + 1);\n                var minWidthCurrentComponent = Number.MAX_VALUE;\n                var minHeightCurrentComponent = Number.MAX_VALUE;\n                var maxNumWideCurrentComponent = 0;\n                var maxNumHighCurrentComponent = 0;\n                var scale = 1;\n                for (var r = decompositionLevelsCount; r >= 0; --r) {\n                    var resolution = component.resolutions[r];\n                    var widthCurrentResolution = scale * resolution.precinctParameters.precinctWidth;\n                    var heightCurrentResolution = scale * resolution.precinctParameters.precinctHeight;\n                    minWidthCurrentComponent = Math.min(minWidthCurrentComponent, widthCurrentResolution);\n                    minHeightCurrentComponent = Math.min(minHeightCurrentComponent, heightCurrentResolution);\n                    maxNumWideCurrentComponent = Math.max(maxNumWideCurrentComponent, resolution.precinctParameters.numprecinctswide);\n                    maxNumHighCurrentComponent = Math.max(maxNumHighCurrentComponent, resolution.precinctParameters.numprecinctshigh);\n                    sizePerResolution[r] = {\n                        width: widthCurrentResolution,\n                        height: heightCurrentResolution\n                    };\n                    scale <<= 1;\n                }\n                minWidth = Math.min(minWidth, minWidthCurrentComponent);\n                minHeight = Math.min(minHeight, minHeightCurrentComponent);\n                maxNumWide = Math.max(maxNumWide, maxNumWideCurrentComponent);\n                maxNumHigh = Math.max(maxNumHigh, maxNumHighCurrentComponent);\n                sizePerComponent[c] = {\n                    resolutions: sizePerResolution,\n                    minWidth: minWidthCurrentComponent,\n                    minHeight: minHeightCurrentComponent,\n                    maxNumWide: maxNumWideCurrentComponent,\n                    maxNumHigh: maxNumHighCurrentComponent\n                };\n            }\n            return {\n                components: sizePerComponent,\n                minWidth: minWidth,\n                minHeight: minHeight,\n                maxNumWide: maxNumWide,\n                maxNumHigh: maxNumHigh\n            };\n        }\n        function buildPackets(context) {\n            var siz = context.SIZ;\n            var tileIndex = context.currentTile.index;\n            var tile = context.tiles[tileIndex];\n            var componentsCount = siz.Csiz;\n            for (var c = 0; c < componentsCount; c++) {\n                var component = tile.components[c];\n                var decompositionLevelsCount = component.codingStyleParameters.decompositionLevelsCount;\n                var resolutions = [];\n                var subbands = [];\n                for (var r = 0; r <= decompositionLevelsCount; r++) {\n                    var blocksDimensions = getBlocksDimensions(context, component, r);\n                    var resolution = {};\n                    var scale = 1 << decompositionLevelsCount - r;\n                    resolution.trx0 = Math.ceil(component.tcx0 / scale);\n                    resolution.try0 = Math.ceil(component.tcy0 / scale);\n                    resolution.trx1 = Math.ceil(component.tcx1 / scale);\n                    resolution.try1 = Math.ceil(component.tcy1 / scale);\n                    resolution.resLevel = r;\n                    buildPrecincts(context, resolution, blocksDimensions);\n                    resolutions.push(resolution);\n                    var subband;\n                    if (r === 0) {\n                        subband = {};\n                        subband.type = \"LL\";\n                        subband.tbx0 = Math.ceil(component.tcx0 / scale);\n                        subband.tby0 = Math.ceil(component.tcy0 / scale);\n                        subband.tbx1 = Math.ceil(component.tcx1 / scale);\n                        subband.tby1 = Math.ceil(component.tcy1 / scale);\n                        subband.resolution = resolution;\n                        buildCodeblocks(context, subband, blocksDimensions);\n                        subbands.push(subband);\n                        resolution.subbands = [ subband ];\n                    } else {\n                        var bscale = 1 << decompositionLevelsCount - r + 1;\n                        var resolutionSubbands = [];\n                        subband = {};\n                        subband.type = \"HL\";\n                        subband.tbx0 = Math.ceil(component.tcx0 / bscale - .5);\n                        subband.tby0 = Math.ceil(component.tcy0 / bscale);\n                        subband.tbx1 = Math.ceil(component.tcx1 / bscale - .5);\n                        subband.tby1 = Math.ceil(component.tcy1 / bscale);\n                        subband.resolution = resolution;\n                        buildCodeblocks(context, subband, blocksDimensions);\n                        subbands.push(subband);\n                        resolutionSubbands.push(subband);\n                        subband = {};\n                        subband.type = \"LH\";\n                        subband.tbx0 = Math.ceil(component.tcx0 / bscale);\n                        subband.tby0 = Math.ceil(component.tcy0 / bscale - .5);\n                        subband.tbx1 = Math.ceil(component.tcx1 / bscale);\n                        subband.tby1 = Math.ceil(component.tcy1 / bscale - .5);\n                        subband.resolution = resolution;\n                        buildCodeblocks(context, subband, blocksDimensions);\n                        subbands.push(subband);\n                        resolutionSubbands.push(subband);\n                        subband = {};\n                        subband.type = \"HH\";\n                        subband.tbx0 = Math.ceil(component.tcx0 / bscale - .5);\n                        subband.tby0 = Math.ceil(component.tcy0 / bscale - .5);\n                        subband.tbx1 = Math.ceil(component.tcx1 / bscale - .5);\n                        subband.tby1 = Math.ceil(component.tcy1 / bscale - .5);\n                        subband.resolution = resolution;\n                        buildCodeblocks(context, subband, blocksDimensions);\n                        subbands.push(subband);\n                        resolutionSubbands.push(subband);\n                        resolution.subbands = resolutionSubbands;\n                    }\n                }\n                component.resolutions = resolutions;\n                component.subbands = subbands;\n            }\n            var progressionOrder = tile.codingStyleDefaultParameters.progressionOrder;\n            switch (progressionOrder) {\n              case 0:\n                tile.packetsIterator = new LayerResolutionComponentPositionIterator(context);\n                break;\n\n              case 1:\n                tile.packetsIterator = new ResolutionLayerComponentPositionIterator(context);\n                break;\n\n              case 2:\n                tile.packetsIterator = new ResolutionPositionComponentLayerIterator(context);\n                break;\n\n              case 3:\n                tile.packetsIterator = new PositionComponentResolutionLayerIterator(context);\n                break;\n\n              case 4:\n                tile.packetsIterator = new ComponentPositionResolutionLayerIterator(context);\n                break;\n\n              default:\n                throw new Error(\"JPX Error: Unsupported progression order \" + progressionOrder);\n            }\n        }\n        function parseTilePackets(context, data, offset, dataLength) {\n            var position = 0;\n            var buffer, bufferSize = 0, skipNextBit = false;\n            function readBits(count) {\n                while (bufferSize < count) {\n                    var b = data[offset + position];\n                    position++;\n                    if (skipNextBit) {\n                        buffer = buffer << 7 | b;\n                        bufferSize += 7;\n                        skipNextBit = false;\n                    } else {\n                        buffer = buffer << 8 | b;\n                        bufferSize += 8;\n                    }\n                    if (b === 255) {\n                        skipNextBit = true;\n                    }\n                }\n                bufferSize -= count;\n                return buffer >>> bufferSize & (1 << count) - 1;\n            }\n            function skipMarkerIfEqual(value) {\n                if (data[offset + position - 1] === 255 && data[offset + position] === value) {\n                    skipBytes(1);\n                    return true;\n                } else if (data[offset + position] === 255 && data[offset + position + 1] === value) {\n                    skipBytes(2);\n                    return true;\n                }\n                return false;\n            }\n            function skipBytes(count) {\n                position += count;\n            }\n            function alignToByte() {\n                bufferSize = 0;\n                if (skipNextBit) {\n                    position++;\n                    skipNextBit = false;\n                }\n            }\n            function readCodingpasses() {\n                if (readBits(1) === 0) {\n                    return 1;\n                }\n                if (readBits(1) === 0) {\n                    return 2;\n                }\n                var value = readBits(2);\n                if (value < 3) {\n                    return value + 3;\n                }\n                value = readBits(5);\n                if (value < 31) {\n                    return value + 6;\n                }\n                value = readBits(7);\n                return value + 37;\n            }\n            var tileIndex = context.currentTile.index;\n            var tile = context.tiles[tileIndex];\n            var sopMarkerUsed = context.COD.sopMarkerUsed;\n            var ephMarkerUsed = context.COD.ephMarkerUsed;\n            var packetsIterator = tile.packetsIterator;\n            while (position < dataLength) {\n                alignToByte();\n                if (sopMarkerUsed && skipMarkerIfEqual(145)) {\n                    skipBytes(4);\n                }\n                var packet = packetsIterator.nextPacket();\n                if (!readBits(1)) {\n                    continue;\n                }\n                var layerNumber = packet.layerNumber;\n                var queue = [], codeblock;\n                for (var i = 0, ii = packet.codeblocks.length; i < ii; i++) {\n                    codeblock = packet.codeblocks[i];\n                    var precinct = codeblock.precinct;\n                    var codeblockColumn = codeblock.cbx - precinct.cbxMin;\n                    var codeblockRow = codeblock.cby - precinct.cbyMin;\n                    var codeblockIncluded = false;\n                    var firstTimeInclusion = false;\n                    var valueReady;\n                    if (codeblock[\"included\"] !== undefined) {\n                        codeblockIncluded = !!readBits(1);\n                    } else {\n                        precinct = codeblock.precinct;\n                        var inclusionTree, zeroBitPlanesTree;\n                        if (precinct[\"inclusionTree\"] !== undefined) {\n                            inclusionTree = precinct.inclusionTree;\n                        } else {\n                            var width = precinct.cbxMax - precinct.cbxMin + 1;\n                            var height = precinct.cbyMax - precinct.cbyMin + 1;\n                            inclusionTree = new InclusionTree(width, height, layerNumber);\n                            zeroBitPlanesTree = new TagTree(width, height);\n                            precinct.inclusionTree = inclusionTree;\n                            precinct.zeroBitPlanesTree = zeroBitPlanesTree;\n                        }\n                        if (inclusionTree.reset(codeblockColumn, codeblockRow, layerNumber)) {\n                            while (true) {\n                                if (readBits(1)) {\n                                    valueReady = !inclusionTree.nextLevel();\n                                    if (valueReady) {\n                                        codeblock.included = true;\n                                        codeblockIncluded = firstTimeInclusion = true;\n                                        break;\n                                    }\n                                } else {\n                                    inclusionTree.incrementValue(layerNumber);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (!codeblockIncluded) {\n                        continue;\n                    }\n                    if (firstTimeInclusion) {\n                        zeroBitPlanesTree = precinct.zeroBitPlanesTree;\n                        zeroBitPlanesTree.reset(codeblockColumn, codeblockRow);\n                        while (true) {\n                            if (readBits(1)) {\n                                valueReady = !zeroBitPlanesTree.nextLevel();\n                                if (valueReady) {\n                                    break;\n                                }\n                            } else {\n                                zeroBitPlanesTree.incrementValue();\n                            }\n                        }\n                        codeblock.zeroBitPlanes = zeroBitPlanesTree.value;\n                    }\n                    var codingpasses = readCodingpasses();\n                    while (readBits(1)) {\n                        codeblock.Lblock++;\n                    }\n                    var codingpassesLog2 = log2(codingpasses);\n                    var bits = (codingpasses < 1 << codingpassesLog2 ? codingpassesLog2 - 1 : codingpassesLog2) + codeblock.Lblock;\n                    var codedDataLength = readBits(bits);\n                    queue.push({\n                        codeblock: codeblock,\n                        codingpasses: codingpasses,\n                        dataLength: codedDataLength\n                    });\n                }\n                alignToByte();\n                if (ephMarkerUsed) {\n                    skipMarkerIfEqual(146);\n                }\n                while (queue.length > 0) {\n                    var packetItem = queue.shift();\n                    codeblock = packetItem.codeblock;\n                    if (codeblock[\"data\"] === undefined) {\n                        codeblock.data = [];\n                    }\n                    codeblock.data.push({\n                        data: data,\n                        start: offset + position,\n                        end: offset + position + packetItem.dataLength,\n                        codingpasses: packetItem.codingpasses\n                    });\n                    position += packetItem.dataLength;\n                }\n            }\n            return position;\n        }\n        function copyCoefficients(coefficients, levelWidth, levelHeight, subband, delta, mb, reversible, segmentationSymbolUsed) {\n            var x0 = subband.tbx0;\n            var y0 = subband.tby0;\n            var width = subband.tbx1 - subband.tbx0;\n            var codeblocks = subband.codeblocks;\n            var right = subband.type.charAt(0) === \"H\" ? 1 : 0;\n            var bottom = subband.type.charAt(1) === \"H\" ? levelWidth : 0;\n            for (var i = 0, ii = codeblocks.length; i < ii; ++i) {\n                var codeblock = codeblocks[i];\n                var blockWidth = codeblock.tbx1_ - codeblock.tbx0_;\n                var blockHeight = codeblock.tby1_ - codeblock.tby0_;\n                if (blockWidth === 0 || blockHeight === 0) {\n                    continue;\n                }\n                if (codeblock[\"data\"] === undefined) {\n                    continue;\n                }\n                var bitModel, currentCodingpassType;\n                bitModel = new BitModel(blockWidth, blockHeight, codeblock.subbandType, codeblock.zeroBitPlanes, mb);\n                currentCodingpassType = 2;\n                var data = codeblock.data, totalLength = 0, codingpasses = 0;\n                var j, jj, dataItem;\n                for (j = 0, jj = data.length; j < jj; j++) {\n                    dataItem = data[j];\n                    totalLength += dataItem.end - dataItem.start;\n                    codingpasses += dataItem.codingpasses;\n                }\n                var encodedData = new Uint8Array(totalLength);\n                var position = 0;\n                for (j = 0, jj = data.length; j < jj; j++) {\n                    dataItem = data[j];\n                    var chunk = dataItem.data.subarray(dataItem.start, dataItem.end);\n                    encodedData.set(chunk, position);\n                    position += chunk.length;\n                }\n                var decoder = new ArithmeticDecoder(encodedData, 0, totalLength);\n                bitModel.setDecoder(decoder);\n                for (j = 0; j < codingpasses; j++) {\n                    switch (currentCodingpassType) {\n                      case 0:\n                        bitModel.runSignificancePropogationPass();\n                        break;\n\n                      case 1:\n                        bitModel.runMagnitudeRefinementPass();\n                        break;\n\n                      case 2:\n                        bitModel.runCleanupPass();\n                        if (segmentationSymbolUsed) {\n                            bitModel.checkSegmentationSymbol();\n                        }\n                        break;\n                    }\n                    currentCodingpassType = (currentCodingpassType + 1) % 3;\n                }\n                var offset = codeblock.tbx0_ - x0 + (codeblock.tby0_ - y0) * width;\n                var sign = bitModel.coefficentsSign;\n                var magnitude = bitModel.coefficentsMagnitude;\n                var bitsDecoded = bitModel.bitsDecoded;\n                var magnitudeCorrection = reversible ? 0 : .5;\n                var k, n, nb;\n                position = 0;\n                var interleave = subband.type !== \"LL\";\n                for (j = 0; j < blockHeight; j++) {\n                    var row = offset / width | 0;\n                    var levelOffset = 2 * row * (levelWidth - width) + right + bottom;\n                    for (k = 0; k < blockWidth; k++) {\n                        n = magnitude[position];\n                        if (n !== 0) {\n                            n = (n + magnitudeCorrection) * delta;\n                            if (sign[position] !== 0) {\n                                n = -n;\n                            }\n                            nb = bitsDecoded[position];\n                            var pos = interleave ? levelOffset + (offset << 1) : offset;\n                            if (reversible && nb >= mb) {\n                                coefficients[pos] = n;\n                            } else {\n                                coefficients[pos] = n * (1 << mb - nb);\n                            }\n                        }\n                        offset++;\n                        position++;\n                    }\n                    offset += width - blockWidth;\n                }\n            }\n        }\n        function transformTile(context, tile, c) {\n            var component = tile.components[c];\n            var codingStyleParameters = component.codingStyleParameters;\n            var quantizationParameters = component.quantizationParameters;\n            var decompositionLevelsCount = codingStyleParameters.decompositionLevelsCount;\n            var spqcds = quantizationParameters.SPqcds;\n            var scalarExpounded = quantizationParameters.scalarExpounded;\n            var guardBits = quantizationParameters.guardBits;\n            var segmentationSymbolUsed = codingStyleParameters.segmentationSymbolUsed;\n            var precision = context.components[c].precision;\n            var reversible = codingStyleParameters.reversibleTransformation;\n            var transform = reversible ? new ReversibleTransform() : new IrreversibleTransform();\n            var subbandCoefficients = [];\n            var b = 0;\n            for (var i = 0; i <= decompositionLevelsCount; i++) {\n                var resolution = component.resolutions[i];\n                var width = resolution.trx1 - resolution.trx0;\n                var height = resolution.try1 - resolution.try0;\n                var coefficients = new Float32Array(width * height);\n                for (var j = 0, jj = resolution.subbands.length; j < jj; j++) {\n                    var mu, epsilon;\n                    if (!scalarExpounded) {\n                        mu = spqcds[0].mu;\n                        epsilon = spqcds[0].epsilon + (i > 0 ? 1 - i : 0);\n                    } else {\n                        mu = spqcds[b].mu;\n                        epsilon = spqcds[b].epsilon;\n                        b++;\n                    }\n                    var subband = resolution.subbands[j];\n                    var gainLog2 = SubbandsGainLog2[subband.type];\n                    var delta = reversible ? 1 : Math.pow(2, precision + gainLog2 - epsilon) * (1 + mu / 2048);\n                    var mb = guardBits + epsilon - 1;\n                    copyCoefficients(coefficients, width, height, subband, delta, mb, reversible, segmentationSymbolUsed);\n                }\n                subbandCoefficients.push({\n                    width: width,\n                    height: height,\n                    items: coefficients\n                });\n            }\n            var result = transform.calculate(subbandCoefficients, component.tcx0, component.tcy0);\n            return {\n                left: component.tcx0,\n                top: component.tcy0,\n                width: result.width,\n                height: result.height,\n                items: result.items\n            };\n        }\n        function transformComponents(context) {\n            var siz = context.SIZ;\n            var components = context.components;\n            var componentsCount = siz.Csiz;\n            var resultImages = [];\n            for (var i = 0, ii = context.tiles.length; i < ii; i++) {\n                var tile = context.tiles[i];\n                var transformedTiles = [];\n                var c;\n                for (c = 0; c < componentsCount; c++) {\n                    transformedTiles[c] = transformTile(context, tile, c);\n                }\n                var tile0 = transformedTiles[0];\n                var out = new Uint8Array(tile0.items.length * componentsCount);\n                var result = {\n                    left: tile0.left,\n                    top: tile0.top,\n                    width: tile0.width,\n                    height: tile0.height,\n                    items: out\n                };\n                var shift, offset, max, min, maxK;\n                var pos = 0, j, jj, y0, y1, y2, r, g, b, k, val;\n                if (tile.codingStyleDefaultParameters.multipleComponentTransform) {\n                    var fourComponents = componentsCount === 4;\n                    var y0items = transformedTiles[0].items;\n                    var y1items = transformedTiles[1].items;\n                    var y2items = transformedTiles[2].items;\n                    var y3items = fourComponents ? transformedTiles[3].items : null;\n                    shift = components[0].precision - 8;\n                    offset = (128 << shift) + .5;\n                    max = 255 * (1 << shift);\n                    maxK = max * .5;\n                    min = -maxK;\n                    var component0 = tile.components[0];\n                    var alpha01 = componentsCount - 3;\n                    jj = y0items.length;\n                    if (!component0.codingStyleParameters.reversibleTransformation) {\n                        for (j = 0; j < jj; j++, pos += alpha01) {\n                            y0 = y0items[j] + offset;\n                            y1 = y1items[j];\n                            y2 = y2items[j];\n                            r = y0 + 1.402 * y2;\n                            g = y0 - .34413 * y1 - .71414 * y2;\n                            b = y0 + 1.772 * y1;\n                            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;\n                            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;\n                            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;\n                        }\n                    } else {\n                        for (j = 0; j < jj; j++, pos += alpha01) {\n                            y0 = y0items[j] + offset;\n                            y1 = y1items[j];\n                            y2 = y2items[j];\n                            g = y0 - (y2 + y1 >> 2);\n                            r = g + y2;\n                            b = g + y1;\n                            out[pos++] = r <= 0 ? 0 : r >= max ? 255 : r >> shift;\n                            out[pos++] = g <= 0 ? 0 : g >= max ? 255 : g >> shift;\n                            out[pos++] = b <= 0 ? 0 : b >= max ? 255 : b >> shift;\n                        }\n                    }\n                    if (fourComponents) {\n                        for (j = 0, pos = 3; j < jj; j++, pos += 4) {\n                            k = y3items[j];\n                            out[pos] = k <= min ? 0 : k >= maxK ? 255 : k + offset >> shift;\n                        }\n                    }\n                } else {\n                    for (c = 0; c < componentsCount; c++) {\n                        var items = transformedTiles[c].items;\n                        shift = components[c].precision - 8;\n                        offset = (128 << shift) + .5;\n                        max = 127.5 * (1 << shift);\n                        min = -max;\n                        for (pos = c, j = 0, jj = items.length; j < jj; j++) {\n                            val = items[j];\n                            out[pos] = val <= min ? 0 : val >= max ? 255 : val + offset >> shift;\n                            pos += componentsCount;\n                        }\n                    }\n                }\n                resultImages.push(result);\n            }\n            return resultImages;\n        }\n        function initializeTile(context, tileIndex) {\n            var siz = context.SIZ;\n            var componentsCount = siz.Csiz;\n            var tile = context.tiles[tileIndex];\n            for (var c = 0; c < componentsCount; c++) {\n                var component = tile.components[c];\n                var qcdOrQcc = context.currentTile.QCC[c] !== undefined ? context.currentTile.QCC[c] : context.currentTile.QCD;\n                component.quantizationParameters = qcdOrQcc;\n                var codOrCoc = context.currentTile.COC[c] !== undefined ? context.currentTile.COC[c] : context.currentTile.COD;\n                component.codingStyleParameters = codOrCoc;\n            }\n            tile.codingStyleDefaultParameters = context.currentTile.COD;\n        }\n        var TagTree = function TagTreeClosure() {\n            function TagTree(width, height) {\n                var levelsLength = log2(Math.max(width, height)) + 1;\n                this.levels = [];\n                for (var i = 0; i < levelsLength; i++) {\n                    var level = {\n                        width: width,\n                        height: height,\n                        items: []\n                    };\n                    this.levels.push(level);\n                    width = Math.ceil(width / 2);\n                    height = Math.ceil(height / 2);\n                }\n            }\n            TagTree.prototype = {\n                reset: function TagTree_reset(i, j) {\n                    var currentLevel = 0, value = 0, level;\n                    while (currentLevel < this.levels.length) {\n                        level = this.levels[currentLevel];\n                        var index = i + j * level.width;\n                        if (level.items[index] !== undefined) {\n                            value = level.items[index];\n                            break;\n                        }\n                        level.index = index;\n                        i >>= 1;\n                        j >>= 1;\n                        currentLevel++;\n                    }\n                    currentLevel--;\n                    level = this.levels[currentLevel];\n                    level.items[level.index] = value;\n                    this.currentLevel = currentLevel;\n                    delete this.value;\n                },\n                incrementValue: function TagTree_incrementValue() {\n                    var level = this.levels[this.currentLevel];\n                    level.items[level.index]++;\n                },\n                nextLevel: function TagTree_nextLevel() {\n                    var currentLevel = this.currentLevel;\n                    var level = this.levels[currentLevel];\n                    var value = level.items[level.index];\n                    currentLevel--;\n                    if (currentLevel < 0) {\n                        this.value = value;\n                        return false;\n                    }\n                    this.currentLevel = currentLevel;\n                    level = this.levels[currentLevel];\n                    level.items[level.index] = value;\n                    return true;\n                }\n            };\n            return TagTree;\n        }();\n        var InclusionTree = function InclusionTreeClosure() {\n            function InclusionTree(width, height, defaultValue) {\n                var levelsLength = log2(Math.max(width, height)) + 1;\n                this.levels = [];\n                for (var i = 0; i < levelsLength; i++) {\n                    var items = new Uint8Array(width * height);\n                    for (var j = 0, jj = items.length; j < jj; j++) {\n                        items[j] = defaultValue;\n                    }\n                    var level = {\n                        width: width,\n                        height: height,\n                        items: items\n                    };\n                    this.levels.push(level);\n                    width = Math.ceil(width / 2);\n                    height = Math.ceil(height / 2);\n                }\n            }\n            InclusionTree.prototype = {\n                reset: function InclusionTree_reset(i, j, stopValue) {\n                    var currentLevel = 0;\n                    while (currentLevel < this.levels.length) {\n                        var level = this.levels[currentLevel];\n                        var index = i + j * level.width;\n                        level.index = index;\n                        var value = level.items[index];\n                        if (value === 255) {\n                            break;\n                        }\n                        if (value > stopValue) {\n                            this.currentLevel = currentLevel;\n                            this.propagateValues();\n                            return false;\n                        }\n                        i >>= 1;\n                        j >>= 1;\n                        currentLevel++;\n                    }\n                    this.currentLevel = currentLevel - 1;\n                    return true;\n                },\n                incrementValue: function InclusionTree_incrementValue(stopValue) {\n                    var level = this.levels[this.currentLevel];\n                    level.items[level.index] = stopValue + 1;\n                    this.propagateValues();\n                },\n                propagateValues: function InclusionTree_propagateValues() {\n                    var levelIndex = this.currentLevel;\n                    var level = this.levels[levelIndex];\n                    var currentValue = level.items[level.index];\n                    while (--levelIndex >= 0) {\n                        level = this.levels[levelIndex];\n                        level.items[level.index] = currentValue;\n                    }\n                },\n                nextLevel: function InclusionTree_nextLevel() {\n                    var currentLevel = this.currentLevel;\n                    var level = this.levels[currentLevel];\n                    var value = level.items[level.index];\n                    level.items[level.index] = 255;\n                    currentLevel--;\n                    if (currentLevel < 0) {\n                        return false;\n                    }\n                    this.currentLevel = currentLevel;\n                    level = this.levels[currentLevel];\n                    level.items[level.index] = value;\n                    return true;\n                }\n            };\n            return InclusionTree;\n        }();\n        var BitModel = function BitModelClosure() {\n            var UNIFORM_CONTEXT = 17;\n            var RUNLENGTH_CONTEXT = 18;\n            var LLAndLHContextsLabel = new Uint8Array([ 0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8 ]);\n            var HLContextLabel = new Uint8Array([ 0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8 ]);\n            var HHContextLabel = new Uint8Array([ 0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8 ]);\n            function BitModel(width, height, subband, zeroBitPlanes, mb) {\n                this.width = width;\n                this.height = height;\n                this.contextLabelTable = subband === \"HH\" ? HHContextLabel : subband === \"HL\" ? HLContextLabel : LLAndLHContextsLabel;\n                var coefficientCount = width * height;\n                this.neighborsSignificance = new Uint8Array(coefficientCount);\n                this.coefficentsSign = new Uint8Array(coefficientCount);\n                this.coefficentsMagnitude = mb > 14 ? new Uint32Array(coefficientCount) : mb > 6 ? new Uint16Array(coefficientCount) : new Uint8Array(coefficientCount);\n                this.processingFlags = new Uint8Array(coefficientCount);\n                var bitsDecoded = new Uint8Array(coefficientCount);\n                if (zeroBitPlanes !== 0) {\n                    for (var i = 0; i < coefficientCount; i++) {\n                        bitsDecoded[i] = zeroBitPlanes;\n                    }\n                }\n                this.bitsDecoded = bitsDecoded;\n                this.reset();\n            }\n            BitModel.prototype = {\n                setDecoder: function BitModel_setDecoder(decoder) {\n                    this.decoder = decoder;\n                },\n                reset: function BitModel_reset() {\n                    this.contexts = new Int8Array(19);\n                    this.contexts[0] = 4 << 1 | 0;\n                    this.contexts[UNIFORM_CONTEXT] = 46 << 1 | 0;\n                    this.contexts[RUNLENGTH_CONTEXT] = 3 << 1 | 0;\n                },\n                setNeighborsSignificance: function BitModel_setNeighborsSignificance(row, column, index) {\n                    var neighborsSignificance = this.neighborsSignificance;\n                    var width = this.width, height = this.height;\n                    var left = column > 0;\n                    var right = column + 1 < width;\n                    var i;\n                    if (row > 0) {\n                        i = index - width;\n                        if (left) {\n                            neighborsSignificance[i - 1] += 16;\n                        }\n                        if (right) {\n                            neighborsSignificance[i + 1] += 16;\n                        }\n                        neighborsSignificance[i] += 4;\n                    }\n                    if (row + 1 < height) {\n                        i = index + width;\n                        if (left) {\n                            neighborsSignificance[i - 1] += 16;\n                        }\n                        if (right) {\n                            neighborsSignificance[i + 1] += 16;\n                        }\n                        neighborsSignificance[i] += 4;\n                    }\n                    if (left) {\n                        neighborsSignificance[index - 1] += 1;\n                    }\n                    if (right) {\n                        neighborsSignificance[index + 1] += 1;\n                    }\n                    neighborsSignificance[index] |= 128;\n                },\n                runSignificancePropogationPass: function BitModel_runSignificancePropogationPass() {\n                    var decoder = this.decoder;\n                    var width = this.width, height = this.height;\n                    var coefficentsMagnitude = this.coefficentsMagnitude;\n                    var coefficentsSign = this.coefficentsSign;\n                    var neighborsSignificance = this.neighborsSignificance;\n                    var processingFlags = this.processingFlags;\n                    var contexts = this.contexts;\n                    var labels = this.contextLabelTable;\n                    var bitsDecoded = this.bitsDecoded;\n                    var processedInverseMask = ~1;\n                    var processedMask = 1;\n                    var firstMagnitudeBitMask = 2;\n                    for (var i0 = 0; i0 < height; i0 += 4) {\n                        for (var j = 0; j < width; j++) {\n                            var index = i0 * width + j;\n                            for (var i1 = 0; i1 < 4; i1++, index += width) {\n                                var i = i0 + i1;\n                                if (i >= height) {\n                                    break;\n                                }\n                                processingFlags[index] &= processedInverseMask;\n                                if (coefficentsMagnitude[index] || !neighborsSignificance[index]) {\n                                    continue;\n                                }\n                                var contextLabel = labels[neighborsSignificance[index]];\n                                var decision = decoder.readBit(contexts, contextLabel);\n                                if (decision) {\n                                    var sign = this.decodeSignBit(i, j, index);\n                                    coefficentsSign[index] = sign;\n                                    coefficentsMagnitude[index] = 1;\n                                    this.setNeighborsSignificance(i, j, index);\n                                    processingFlags[index] |= firstMagnitudeBitMask;\n                                }\n                                bitsDecoded[index]++;\n                                processingFlags[index] |= processedMask;\n                            }\n                        }\n                    }\n                },\n                decodeSignBit: function BitModel_decodeSignBit(row, column, index) {\n                    var width = this.width, height = this.height;\n                    var coefficentsMagnitude = this.coefficentsMagnitude;\n                    var coefficentsSign = this.coefficentsSign;\n                    var contribution, sign0, sign1, significance1;\n                    var contextLabel, decoded;\n                    significance1 = column > 0 && coefficentsMagnitude[index - 1] !== 0;\n                    if (column + 1 < width && coefficentsMagnitude[index + 1] !== 0) {\n                        sign1 = coefficentsSign[index + 1];\n                        if (significance1) {\n                            sign0 = coefficentsSign[index - 1];\n                            contribution = 1 - sign1 - sign0;\n                        } else {\n                            contribution = 1 - sign1 - sign1;\n                        }\n                    } else if (significance1) {\n                        sign0 = coefficentsSign[index - 1];\n                        contribution = 1 - sign0 - sign0;\n                    } else {\n                        contribution = 0;\n                    }\n                    var horizontalContribution = 3 * contribution;\n                    significance1 = row > 0 && coefficentsMagnitude[index - width] !== 0;\n                    if (row + 1 < height && coefficentsMagnitude[index + width] !== 0) {\n                        sign1 = coefficentsSign[index + width];\n                        if (significance1) {\n                            sign0 = coefficentsSign[index - width];\n                            contribution = 1 - sign1 - sign0 + horizontalContribution;\n                        } else {\n                            contribution = 1 - sign1 - sign1 + horizontalContribution;\n                        }\n                    } else if (significance1) {\n                        sign0 = coefficentsSign[index - width];\n                        contribution = 1 - sign0 - sign0 + horizontalContribution;\n                    } else {\n                        contribution = horizontalContribution;\n                    }\n                    if (contribution >= 0) {\n                        contextLabel = 9 + contribution;\n                        decoded = this.decoder.readBit(this.contexts, contextLabel);\n                    } else {\n                        contextLabel = 9 - contribution;\n                        decoded = this.decoder.readBit(this.contexts, contextLabel) ^ 1;\n                    }\n                    return decoded;\n                },\n                runMagnitudeRefinementPass: function BitModel_runMagnitudeRefinementPass() {\n                    var decoder = this.decoder;\n                    var width = this.width, height = this.height;\n                    var coefficentsMagnitude = this.coefficentsMagnitude;\n                    var neighborsSignificance = this.neighborsSignificance;\n                    var contexts = this.contexts;\n                    var bitsDecoded = this.bitsDecoded;\n                    var processingFlags = this.processingFlags;\n                    var processedMask = 1;\n                    var firstMagnitudeBitMask = 2;\n                    var length = width * height;\n                    var width4 = width * 4;\n                    for (var index0 = 0, indexNext; index0 < length; index0 = indexNext) {\n                        indexNext = Math.min(length, index0 + width4);\n                        for (var j = 0; j < width; j++) {\n                            for (var index = index0 + j; index < indexNext; index += width) {\n                                if (!coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                                    continue;\n                                }\n                                var contextLabel = 16;\n                                if ((processingFlags[index] & firstMagnitudeBitMask) !== 0) {\n                                    processingFlags[index] ^= firstMagnitudeBitMask;\n                                    var significance = neighborsSignificance[index] & 127;\n                                    contextLabel = significance === 0 ? 15 : 14;\n                                }\n                                var bit = decoder.readBit(contexts, contextLabel);\n                                coefficentsMagnitude[index] = coefficentsMagnitude[index] << 1 | bit;\n                                bitsDecoded[index]++;\n                                processingFlags[index] |= processedMask;\n                            }\n                        }\n                    }\n                },\n                runCleanupPass: function BitModel_runCleanupPass() {\n                    var decoder = this.decoder;\n                    var width = this.width, height = this.height;\n                    var neighborsSignificance = this.neighborsSignificance;\n                    var coefficentsMagnitude = this.coefficentsMagnitude;\n                    var coefficentsSign = this.coefficentsSign;\n                    var contexts = this.contexts;\n                    var labels = this.contextLabelTable;\n                    var bitsDecoded = this.bitsDecoded;\n                    var processingFlags = this.processingFlags;\n                    var processedMask = 1;\n                    var firstMagnitudeBitMask = 2;\n                    var oneRowDown = width;\n                    var twoRowsDown = width * 2;\n                    var threeRowsDown = width * 3;\n                    var iNext;\n                    for (var i0 = 0; i0 < height; i0 = iNext) {\n                        iNext = Math.min(i0 + 4, height);\n                        var indexBase = i0 * width;\n                        var checkAllEmpty = i0 + 3 < height;\n                        for (var j = 0; j < width; j++) {\n                            var index0 = indexBase + j;\n                            var allEmpty = checkAllEmpty && processingFlags[index0] === 0 && processingFlags[index0 + oneRowDown] === 0 && processingFlags[index0 + twoRowsDown] === 0 && processingFlags[index0 + threeRowsDown] === 0 && neighborsSignificance[index0] === 0 && neighborsSignificance[index0 + oneRowDown] === 0 && neighborsSignificance[index0 + twoRowsDown] === 0 && neighborsSignificance[index0 + threeRowsDown] === 0;\n                            var i1 = 0, index = index0;\n                            var i = i0, sign;\n                            if (allEmpty) {\n                                var hasSignificantCoefficent = decoder.readBit(contexts, RUNLENGTH_CONTEXT);\n                                if (!hasSignificantCoefficent) {\n                                    bitsDecoded[index0]++;\n                                    bitsDecoded[index0 + oneRowDown]++;\n                                    bitsDecoded[index0 + twoRowsDown]++;\n                                    bitsDecoded[index0 + threeRowsDown]++;\n                                    continue;\n                                }\n                                i1 = decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n                                if (i1 !== 0) {\n                                    i = i0 + i1;\n                                    index += i1 * width;\n                                }\n                                sign = this.decodeSignBit(i, j, index);\n                                coefficentsSign[index] = sign;\n                                coefficentsMagnitude[index] = 1;\n                                this.setNeighborsSignificance(i, j, index);\n                                processingFlags[index] |= firstMagnitudeBitMask;\n                                index = index0;\n                                for (var i2 = i0; i2 <= i; i2++, index += width) {\n                                    bitsDecoded[index]++;\n                                }\n                                i1++;\n                            }\n                            for (i = i0 + i1; i < iNext; i++, index += width) {\n                                if (coefficentsMagnitude[index] || (processingFlags[index] & processedMask) !== 0) {\n                                    continue;\n                                }\n                                var contextLabel = labels[neighborsSignificance[index]];\n                                var decision = decoder.readBit(contexts, contextLabel);\n                                if (decision === 1) {\n                                    sign = this.decodeSignBit(i, j, index);\n                                    coefficentsSign[index] = sign;\n                                    coefficentsMagnitude[index] = 1;\n                                    this.setNeighborsSignificance(i, j, index);\n                                    processingFlags[index] |= firstMagnitudeBitMask;\n                                }\n                                bitsDecoded[index]++;\n                            }\n                        }\n                    }\n                },\n                checkSegmentationSymbol: function BitModel_checkSegmentationSymbol() {\n                    var decoder = this.decoder;\n                    var contexts = this.contexts;\n                    var symbol = decoder.readBit(contexts, UNIFORM_CONTEXT) << 3 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 2 | decoder.readBit(contexts, UNIFORM_CONTEXT) << 1 | decoder.readBit(contexts, UNIFORM_CONTEXT);\n                    if (symbol !== 10) {\n                        throw new Error(\"JPX Error: Invalid segmentation symbol\");\n                    }\n                }\n            };\n            return BitModel;\n        }();\n        var Transform = function TransformClosure() {\n            function Transform() {}\n            Transform.prototype.calculate = function transformCalculate(subbands, u0, v0) {\n                var ll = subbands[0];\n                for (var i = 1, ii = subbands.length; i < ii; i++) {\n                    ll = this.iterate(ll, subbands[i], u0, v0);\n                }\n                return ll;\n            };\n            Transform.prototype.extend = function extend(buffer, offset, size) {\n                var i1 = offset - 1, j1 = offset + 1;\n                var i2 = offset + size - 2, j2 = offset + size;\n                buffer[i1--] = buffer[j1++];\n                buffer[j2++] = buffer[i2--];\n                buffer[i1--] = buffer[j1++];\n                buffer[j2++] = buffer[i2--];\n                buffer[i1--] = buffer[j1++];\n                buffer[j2++] = buffer[i2--];\n                buffer[i1] = buffer[j1];\n                buffer[j2] = buffer[i2];\n            };\n            Transform.prototype.iterate = function Transform_iterate(ll, hl_lh_hh, u0, v0) {\n                var llWidth = ll.width, llHeight = ll.height, llItems = ll.items;\n                var width = hl_lh_hh.width;\n                var height = hl_lh_hh.height;\n                var items = hl_lh_hh.items;\n                var i, j, k, l, u, v;\n                for (k = 0, i = 0; i < llHeight; i++) {\n                    l = i * 2 * width;\n                    for (j = 0; j < llWidth; j++, k++, l += 2) {\n                        items[l] = llItems[k];\n                    }\n                }\n                llItems = ll.items = null;\n                var bufferPadding = 4;\n                var rowBuffer = new Float32Array(width + 2 * bufferPadding);\n                if (width === 1) {\n                    if ((u0 & 1) !== 0) {\n                        for (v = 0, k = 0; v < height; v++, k += width) {\n                            items[k] *= .5;\n                        }\n                    }\n                } else {\n                    for (v = 0, k = 0; v < height; v++, k += width) {\n                        rowBuffer.set(items.subarray(k, k + width), bufferPadding);\n                        this.extend(rowBuffer, bufferPadding, width);\n                        this.filter(rowBuffer, bufferPadding, width);\n                        items.set(rowBuffer.subarray(bufferPadding, bufferPadding + width), k);\n                    }\n                }\n                var numBuffers = 16;\n                var colBuffers = [];\n                for (i = 0; i < numBuffers; i++) {\n                    colBuffers.push(new Float32Array(height + 2 * bufferPadding));\n                }\n                var b, currentBuffer = 0;\n                ll = bufferPadding + height;\n                if (height === 1) {\n                    if ((v0 & 1) !== 0) {\n                        for (u = 0; u < width; u++) {\n                            items[u] *= .5;\n                        }\n                    }\n                } else {\n                    for (u = 0; u < width; u++) {\n                        if (currentBuffer === 0) {\n                            numBuffers = Math.min(width - u, numBuffers);\n                            for (k = u, l = bufferPadding; l < ll; k += width, l++) {\n                                for (b = 0; b < numBuffers; b++) {\n                                    colBuffers[b][l] = items[k + b];\n                                }\n                            }\n                            currentBuffer = numBuffers;\n                        }\n                        currentBuffer--;\n                        var buffer = colBuffers[currentBuffer];\n                        this.extend(buffer, bufferPadding, height);\n                        this.filter(buffer, bufferPadding, height);\n                        if (currentBuffer === 0) {\n                            k = u - numBuffers + 1;\n                            for (l = bufferPadding; l < ll; k += width, l++) {\n                                for (b = 0; b < numBuffers; b++) {\n                                    items[k + b] = colBuffers[b][l];\n                                }\n                            }\n                        }\n                    }\n                }\n                return {\n                    width: width,\n                    height: height,\n                    items: items\n                };\n            };\n            return Transform;\n        }();\n        var IrreversibleTransform = function IrreversibleTransformClosure() {\n            function IrreversibleTransform() {\n                Transform.call(this);\n            }\n            IrreversibleTransform.prototype = Object.create(Transform.prototype);\n            IrreversibleTransform.prototype.filter = function irreversibleTransformFilter(x, offset, length) {\n                var len = length >> 1;\n                offset = offset | 0;\n                var j, n, current, next;\n                var alpha = -1.586134342059924;\n                var beta = -.052980118572961;\n                var gamma = .882911075530934;\n                var delta = .443506852043971;\n                var K = 1.230174104914001;\n                var K_ = 1 / K;\n                j = offset - 3;\n                for (n = len + 4; n--; j += 2) {\n                    x[j] *= K_;\n                }\n                j = offset - 2;\n                current = delta * x[j - 1];\n                for (n = len + 3; n--; j += 2) {\n                    next = delta * x[j + 1];\n                    x[j] = K * x[j] - current - next;\n                    if (n--) {\n                        j += 2;\n                        current = delta * x[j + 1];\n                        x[j] = K * x[j] - current - next;\n                    } else {\n                        break;\n                    }\n                }\n                j = offset - 1;\n                current = gamma * x[j - 1];\n                for (n = len + 2; n--; j += 2) {\n                    next = gamma * x[j + 1];\n                    x[j] -= current + next;\n                    if (n--) {\n                        j += 2;\n                        current = gamma * x[j + 1];\n                        x[j] -= current + next;\n                    } else {\n                        break;\n                    }\n                }\n                j = offset;\n                current = beta * x[j - 1];\n                for (n = len + 1; n--; j += 2) {\n                    next = beta * x[j + 1];\n                    x[j] -= current + next;\n                    if (n--) {\n                        j += 2;\n                        current = beta * x[j + 1];\n                        x[j] -= current + next;\n                    } else {\n                        break;\n                    }\n                }\n                if (len !== 0) {\n                    j = offset + 1;\n                    current = alpha * x[j - 1];\n                    for (n = len; n--; j += 2) {\n                        next = alpha * x[j + 1];\n                        x[j] -= current + next;\n                        if (n--) {\n                            j += 2;\n                            current = alpha * x[j + 1];\n                            x[j] -= current + next;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n            };\n            return IrreversibleTransform;\n        }();\n        var ReversibleTransform = function ReversibleTransformClosure() {\n            function ReversibleTransform() {\n                Transform.call(this);\n            }\n            ReversibleTransform.prototype = Object.create(Transform.prototype);\n            ReversibleTransform.prototype.filter = function reversibleTransformFilter(x, offset, length) {\n                var len = length >> 1;\n                offset = offset | 0;\n                var j, n;\n                for (j = offset, n = len + 1; n--; j += 2) {\n                    x[j] -= x[j - 1] + x[j + 1] + 2 >> 2;\n                }\n                for (j = offset + 1, n = len; n--; j += 2) {\n                    x[j] += x[j - 1] + x[j + 1] >> 1;\n                }\n            };\n            return ReversibleTransform;\n        }();\n        return JpxImage;\n    }();\n    \"use strict\";\n    var Jbig2Image = function Jbig2ImageClosure() {\n        function ContextCache() {}\n        ContextCache.prototype = {\n            getContexts: function(id) {\n                if (id in this) {\n                    return this[id];\n                }\n                return this[id] = new Int8Array(1 << 16);\n            }\n        };\n        function DecodingContext(data, start, end) {\n            this.data = data;\n            this.start = start;\n            this.end = end;\n        }\n        DecodingContext.prototype = {\n            get decoder() {\n                var decoder = new ArithmeticDecoder(this.data, this.start, this.end);\n                return shadow(this, \"decoder\", decoder);\n            },\n            get contextCache() {\n                var cache = new ContextCache();\n                return shadow(this, \"contextCache\", cache);\n            }\n        };\n        function decodeInteger(contextCache, procedure, decoder) {\n            var contexts = contextCache.getContexts(procedure);\n            var prev = 1;\n            function readBits(length) {\n                var v = 0;\n                for (var i = 0; i < length; i++) {\n                    var bit = decoder.readBit(contexts, prev);\n                    prev = prev < 256 ? prev << 1 | bit : (prev << 1 | bit) & 511 | 256;\n                    v = v << 1 | bit;\n                }\n                return v >>> 0;\n            }\n            var sign = readBits(1);\n            var value = readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(1) ? readBits(32) + 4436 : readBits(12) + 340 : readBits(8) + 84 : readBits(6) + 20 : readBits(4) + 4 : readBits(2);\n            return sign === 0 ? value : value > 0 ? -value : null;\n        }\n        function decodeIAID(contextCache, decoder, codeLength) {\n            var contexts = contextCache.getContexts(\"IAID\");\n            var prev = 1;\n            for (var i = 0; i < codeLength; i++) {\n                var bit = decoder.readBit(contexts, prev);\n                prev = prev << 1 | bit;\n            }\n            if (codeLength < 31) {\n                return prev & (1 << codeLength) - 1;\n            }\n            return prev & 2147483647;\n        }\n        var SegmentTypes = [ \"SymbolDictionary\", null, null, null, \"IntermediateTextRegion\", null, \"ImmediateTextRegion\", \"ImmediateLosslessTextRegion\", null, null, null, null, null, null, null, null, \"patternDictionary\", null, null, null, \"IntermediateHalftoneRegion\", null, \"ImmediateHalftoneRegion\", \"ImmediateLosslessHalftoneRegion\", null, null, null, null, null, null, null, null, null, null, null, null, \"IntermediateGenericRegion\", null, \"ImmediateGenericRegion\", \"ImmediateLosslessGenericRegion\", \"IntermediateGenericRefinementRegion\", null, \"ImmediateGenericRefinementRegion\", \"ImmediateLosslessGenericRefinementRegion\", null, null, null, null, \"PageInformation\", \"EndOfPage\", \"EndOfStripe\", \"EndOfFile\", \"Profiles\", \"Tables\", null, null, null, null, null, null, null, null, \"Extension\" ];\n        var CodingTemplates = [ [ {\n            x: -1,\n            y: -2\n        }, {\n            x: 0,\n            y: -2\n        }, {\n            x: 1,\n            y: -2\n        }, {\n            x: -2,\n            y: -1\n        }, {\n            x: -1,\n            y: -1\n        }, {\n            x: 0,\n            y: -1\n        }, {\n            x: 1,\n            y: -1\n        }, {\n            x: 2,\n            y: -1\n        }, {\n            x: -4,\n            y: 0\n        }, {\n            x: -3,\n            y: 0\n        }, {\n            x: -2,\n            y: 0\n        }, {\n            x: -1,\n            y: 0\n        } ], [ {\n            x: -1,\n            y: -2\n        }, {\n            x: 0,\n            y: -2\n        }, {\n            x: 1,\n            y: -2\n        }, {\n            x: 2,\n            y: -2\n        }, {\n            x: -2,\n            y: -1\n        }, {\n            x: -1,\n            y: -1\n        }, {\n            x: 0,\n            y: -1\n        }, {\n            x: 1,\n            y: -1\n        }, {\n            x: 2,\n            y: -1\n        }, {\n            x: -3,\n            y: 0\n        }, {\n            x: -2,\n            y: 0\n        }, {\n            x: -1,\n            y: 0\n        } ], [ {\n            x: -1,\n            y: -2\n        }, {\n            x: 0,\n            y: -2\n        }, {\n            x: 1,\n            y: -2\n        }, {\n            x: -2,\n            y: -1\n        }, {\n            x: -1,\n            y: -1\n        }, {\n            x: 0,\n            y: -1\n        }, {\n            x: 1,\n            y: -1\n        }, {\n            x: -2,\n            y: 0\n        }, {\n            x: -1,\n            y: 0\n        } ], [ {\n            x: -3,\n            y: -1\n        }, {\n            x: -2,\n            y: -1\n        }, {\n            x: -1,\n            y: -1\n        }, {\n            x: 0,\n            y: -1\n        }, {\n            x: 1,\n            y: -1\n        }, {\n            x: -4,\n            y: 0\n        }, {\n            x: -3,\n            y: 0\n        }, {\n            x: -2,\n            y: 0\n        }, {\n            x: -1,\n            y: 0\n        } ] ];\n        var RefinementTemplates = [ {\n            coding: [ {\n                x: 0,\n                y: -1\n            }, {\n                x: 1,\n                y: -1\n            }, {\n                x: -1,\n                y: 0\n            } ],\n            reference: [ {\n                x: 0,\n                y: -1\n            }, {\n                x: 1,\n                y: -1\n            }, {\n                x: -1,\n                y: 0\n            }, {\n                x: 0,\n                y: 0\n            }, {\n                x: 1,\n                y: 0\n            }, {\n                x: -1,\n                y: 1\n            }, {\n                x: 0,\n                y: 1\n            }, {\n                x: 1,\n                y: 1\n            } ]\n        }, {\n            coding: [ {\n                x: -1,\n                y: -1\n            }, {\n                x: 0,\n                y: -1\n            }, {\n                x: 1,\n                y: -1\n            }, {\n                x: -1,\n                y: 0\n            } ],\n            reference: [ {\n                x: 0,\n                y: -1\n            }, {\n                x: -1,\n                y: 0\n            }, {\n                x: 0,\n                y: 0\n            }, {\n                x: 1,\n                y: 0\n            }, {\n                x: 0,\n                y: 1\n            }, {\n                x: 1,\n                y: 1\n            } ]\n        } ];\n        var ReusedContexts = [ 39717, 1941, 229, 405 ];\n        var RefinementReusedContexts = [ 32, 8 ];\n        function decodeBitmapTemplate0(width, height, decodingContext) {\n            var decoder = decodingContext.decoder;\n            var contexts = decodingContext.contextCache.getContexts(\"GB\");\n            var contextLabel, i, j, pixel, row, row1, row2, bitmap = [];\n            var OLD_PIXEL_MASK = 31735;\n            for (i = 0; i < height; i++) {\n                row = bitmap[i] = new Uint8Array(width);\n                row1 = i < 1 ? row : bitmap[i - 1];\n                row2 = i < 2 ? row : bitmap[i - 2];\n                contextLabel = row2[0] << 13 | row2[1] << 12 | row2[2] << 11 | row1[0] << 7 | row1[1] << 6 | row1[2] << 5 | row1[3] << 4;\n                for (j = 0; j < width; j++) {\n                    row[j] = pixel = decoder.readBit(contexts, contextLabel);\n                    contextLabel = (contextLabel & OLD_PIXEL_MASK) << 1 | (j + 3 < width ? row2[j + 3] << 11 : 0) | (j + 4 < width ? row1[j + 4] << 4 : 0) | pixel;\n                }\n            }\n            return bitmap;\n        }\n        function decodeBitmap(mmr, width, height, templateIndex, prediction, skip, at, decodingContext) {\n            if (mmr) {\n                error(\"JBIG2 error: MMR encoding is not supported\");\n            }\n            if (templateIndex === 0 && !skip && !prediction && at.length === 4 && at[0].x === 3 && at[0].y === -1 && at[1].x === -3 && at[1].y === -1 && at[2].x === 2 && at[2].y === -2 && at[3].x === -2 && at[3].y === -2) {\n                return decodeBitmapTemplate0(width, height, decodingContext);\n            }\n            var useskip = !!skip;\n            var template = CodingTemplates[templateIndex].concat(at);\n            template.sort(function(a, b) {\n                return a.y - b.y || a.x - b.x;\n            });\n            var templateLength = template.length;\n            var templateX = new Int8Array(templateLength);\n            var templateY = new Int8Array(templateLength);\n            var changingTemplateEntries = [];\n            var reuseMask = 0, minX = 0, maxX = 0, minY = 0;\n            var c, k;\n            for (k = 0; k < templateLength; k++) {\n                templateX[k] = template[k].x;\n                templateY[k] = template[k].y;\n                minX = Math.min(minX, template[k].x);\n                maxX = Math.max(maxX, template[k].x);\n                minY = Math.min(minY, template[k].y);\n                if (k < templateLength - 1 && template[k].y === template[k + 1].y && template[k].x === template[k + 1].x - 1) {\n                    reuseMask |= 1 << templateLength - 1 - k;\n                } else {\n                    changingTemplateEntries.push(k);\n                }\n            }\n            var changingEntriesLength = changingTemplateEntries.length;\n            var changingTemplateX = new Int8Array(changingEntriesLength);\n            var changingTemplateY = new Int8Array(changingEntriesLength);\n            var changingTemplateBit = new Uint16Array(changingEntriesLength);\n            for (c = 0; c < changingEntriesLength; c++) {\n                k = changingTemplateEntries[c];\n                changingTemplateX[c] = template[k].x;\n                changingTemplateY[c] = template[k].y;\n                changingTemplateBit[c] = 1 << templateLength - 1 - k;\n            }\n            var sbb_left = -minX;\n            var sbb_top = -minY;\n            var sbb_right = width - maxX;\n            var pseudoPixelContext = ReusedContexts[templateIndex];\n            var row = new Uint8Array(width);\n            var bitmap = [];\n            var decoder = decodingContext.decoder;\n            var contexts = decodingContext.contextCache.getContexts(\"GB\");\n            var ltp = 0, j, i0, j0, contextLabel = 0, bit, shift;\n            for (var i = 0; i < height; i++) {\n                if (prediction) {\n                    var sltp = decoder.readBit(contexts, pseudoPixelContext);\n                    ltp ^= sltp;\n                    if (ltp) {\n                        bitmap.push(row);\n                        continue;\n                    }\n                }\n                row = new Uint8Array(row);\n                bitmap.push(row);\n                for (j = 0; j < width; j++) {\n                    if (useskip && skip[i][j]) {\n                        row[j] = 0;\n                        continue;\n                    }\n                    if (j >= sbb_left && j < sbb_right && i >= sbb_top) {\n                        contextLabel = contextLabel << 1 & reuseMask;\n                        for (k = 0; k < changingEntriesLength; k++) {\n                            i0 = i + changingTemplateY[k];\n                            j0 = j + changingTemplateX[k];\n                            bit = bitmap[i0][j0];\n                            if (bit) {\n                                bit = changingTemplateBit[k];\n                                contextLabel |= bit;\n                            }\n                        }\n                    } else {\n                        contextLabel = 0;\n                        shift = templateLength - 1;\n                        for (k = 0; k < templateLength; k++, shift--) {\n                            j0 = j + templateX[k];\n                            if (j0 >= 0 && j0 < width) {\n                                i0 = i + templateY[k];\n                                if (i0 >= 0) {\n                                    bit = bitmap[i0][j0];\n                                    if (bit) {\n                                        contextLabel |= bit << shift;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    var pixel = decoder.readBit(contexts, contextLabel);\n                    row[j] = pixel;\n                }\n            }\n            return bitmap;\n        }\n        function decodeRefinement(width, height, templateIndex, referenceBitmap, offsetX, offsetY, prediction, at, decodingContext) {\n            var codingTemplate = RefinementTemplates[templateIndex].coding;\n            if (templateIndex === 0) {\n                codingTemplate = codingTemplate.concat([ at[0] ]);\n            }\n            var codingTemplateLength = codingTemplate.length;\n            var codingTemplateX = new Int32Array(codingTemplateLength);\n            var codingTemplateY = new Int32Array(codingTemplateLength);\n            var k;\n            for (k = 0; k < codingTemplateLength; k++) {\n                codingTemplateX[k] = codingTemplate[k].x;\n                codingTemplateY[k] = codingTemplate[k].y;\n            }\n            var referenceTemplate = RefinementTemplates[templateIndex].reference;\n            if (templateIndex === 0) {\n                referenceTemplate = referenceTemplate.concat([ at[1] ]);\n            }\n            var referenceTemplateLength = referenceTemplate.length;\n            var referenceTemplateX = new Int32Array(referenceTemplateLength);\n            var referenceTemplateY = new Int32Array(referenceTemplateLength);\n            for (k = 0; k < referenceTemplateLength; k++) {\n                referenceTemplateX[k] = referenceTemplate[k].x;\n                referenceTemplateY[k] = referenceTemplate[k].y;\n            }\n            var referenceWidth = referenceBitmap[0].length;\n            var referenceHeight = referenceBitmap.length;\n            var pseudoPixelContext = RefinementReusedContexts[templateIndex];\n            var bitmap = [];\n            var decoder = decodingContext.decoder;\n            var contexts = decodingContext.contextCache.getContexts(\"GR\");\n            var ltp = 0;\n            for (var i = 0; i < height; i++) {\n                if (prediction) {\n                    var sltp = decoder.readBit(contexts, pseudoPixelContext);\n                    ltp ^= sltp;\n                    if (ltp) {\n                        error(\"JBIG2 error: prediction is not supported\");\n                    }\n                }\n                var row = new Uint8Array(width);\n                bitmap.push(row);\n                for (var j = 0; j < width; j++) {\n                    var i0, j0;\n                    var contextLabel = 0;\n                    for (k = 0; k < codingTemplateLength; k++) {\n                        i0 = i + codingTemplateY[k];\n                        j0 = j + codingTemplateX[k];\n                        if (i0 < 0 || j0 < 0 || j0 >= width) {\n                            contextLabel <<= 1;\n                        } else {\n                            contextLabel = contextLabel << 1 | bitmap[i0][j0];\n                        }\n                    }\n                    for (k = 0; k < referenceTemplateLength; k++) {\n                        i0 = i + referenceTemplateY[k] + offsetY;\n                        j0 = j + referenceTemplateX[k] + offsetX;\n                        if (i0 < 0 || i0 >= referenceHeight || j0 < 0 || j0 >= referenceWidth) {\n                            contextLabel <<= 1;\n                        } else {\n                            contextLabel = contextLabel << 1 | referenceBitmap[i0][j0];\n                        }\n                    }\n                    var pixel = decoder.readBit(contexts, contextLabel);\n                    row[j] = pixel;\n                }\n            }\n            return bitmap;\n        }\n        function decodeSymbolDictionary(huffman, refinement, symbols, numberOfNewSymbols, numberOfExportedSymbols, huffmanTables, templateIndex, at, refinementTemplateIndex, refinementAt, decodingContext) {\n            if (huffman) {\n                error(\"JBIG2 error: huffman is not supported\");\n            }\n            var newSymbols = [];\n            var currentHeight = 0;\n            var symbolCodeLength = log2(symbols.length + numberOfNewSymbols);\n            var decoder = decodingContext.decoder;\n            var contextCache = decodingContext.contextCache;\n            while (newSymbols.length < numberOfNewSymbols) {\n                var deltaHeight = decodeInteger(contextCache, \"IADH\", decoder);\n                currentHeight += deltaHeight;\n                var currentWidth = 0;\n                var totalWidth = 0;\n                while (true) {\n                    var deltaWidth = decodeInteger(contextCache, \"IADW\", decoder);\n                    if (deltaWidth === null) {\n                        break;\n                    }\n                    currentWidth += deltaWidth;\n                    totalWidth += currentWidth;\n                    var bitmap;\n                    if (refinement) {\n                        var numberOfInstances = decodeInteger(contextCache, \"IAAI\", decoder);\n                        if (numberOfInstances > 1) {\n                            bitmap = decodeTextRegion(huffman, refinement, currentWidth, currentHeight, 0, numberOfInstances, 1, symbols.concat(newSymbols), symbolCodeLength, 0, 0, 1, 0, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext);\n                        } else {\n                            var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\n                            var rdx = decodeInteger(contextCache, \"IARDX\", decoder);\n                            var rdy = decodeInteger(contextCache, \"IARDY\", decoder);\n                            var symbol = symbolId < symbols.length ? symbols[symbolId] : newSymbols[symbolId - symbols.length];\n                            bitmap = decodeRefinement(currentWidth, currentHeight, refinementTemplateIndex, symbol, rdx, rdy, false, refinementAt, decodingContext);\n                        }\n                    } else {\n                        bitmap = decodeBitmap(false, currentWidth, currentHeight, templateIndex, false, null, at, decodingContext);\n                    }\n                    newSymbols.push(bitmap);\n                }\n            }\n            var exportedSymbols = [];\n            var flags = [], currentFlag = false;\n            var totalSymbolsLength = symbols.length + numberOfNewSymbols;\n            while (flags.length < totalSymbolsLength) {\n                var runLength = decodeInteger(contextCache, \"IAEX\", decoder);\n                while (runLength--) {\n                    flags.push(currentFlag);\n                }\n                currentFlag = !currentFlag;\n            }\n            for (var i = 0, ii = symbols.length; i < ii; i++) {\n                if (flags[i]) {\n                    exportedSymbols.push(symbols[i]);\n                }\n            }\n            for (var j = 0; j < numberOfNewSymbols; i++, j++) {\n                if (flags[i]) {\n                    exportedSymbols.push(newSymbols[j]);\n                }\n            }\n            return exportedSymbols;\n        }\n        function decodeTextRegion(huffman, refinement, width, height, defaultPixelValue, numberOfSymbolInstances, stripSize, inputSymbols, symbolCodeLength, transposed, dsOffset, referenceCorner, combinationOperator, huffmanTables, refinementTemplateIndex, refinementAt, decodingContext) {\n            if (huffman) {\n                error(\"JBIG2 error: huffman is not supported\");\n            }\n            var bitmap = [];\n            var i, row;\n            for (i = 0; i < height; i++) {\n                row = new Uint8Array(width);\n                if (defaultPixelValue) {\n                    for (var j = 0; j < width; j++) {\n                        row[j] = defaultPixelValue;\n                    }\n                }\n                bitmap.push(row);\n            }\n            var decoder = decodingContext.decoder;\n            var contextCache = decodingContext.contextCache;\n            var stripT = -decodeInteger(contextCache, \"IADT\", decoder);\n            var firstS = 0;\n            i = 0;\n            while (i < numberOfSymbolInstances) {\n                var deltaT = decodeInteger(contextCache, \"IADT\", decoder);\n                stripT += deltaT;\n                var deltaFirstS = decodeInteger(contextCache, \"IAFS\", decoder);\n                firstS += deltaFirstS;\n                var currentS = firstS;\n                do {\n                    var currentT = stripSize === 1 ? 0 : decodeInteger(contextCache, \"IAIT\", decoder);\n                    var t = stripSize * stripT + currentT;\n                    var symbolId = decodeIAID(contextCache, decoder, symbolCodeLength);\n                    var applyRefinement = refinement && decodeInteger(contextCache, \"IARI\", decoder);\n                    var symbolBitmap = inputSymbols[symbolId];\n                    var symbolWidth = symbolBitmap[0].length;\n                    var symbolHeight = symbolBitmap.length;\n                    if (applyRefinement) {\n                        var rdw = decodeInteger(contextCache, \"IARDW\", decoder);\n                        var rdh = decodeInteger(contextCache, \"IARDH\", decoder);\n                        var rdx = decodeInteger(contextCache, \"IARDX\", decoder);\n                        var rdy = decodeInteger(contextCache, \"IARDY\", decoder);\n                        symbolWidth += rdw;\n                        symbolHeight += rdh;\n                        symbolBitmap = decodeRefinement(symbolWidth, symbolHeight, refinementTemplateIndex, symbolBitmap, (rdw >> 1) + rdx, (rdh >> 1) + rdy, false, refinementAt, decodingContext);\n                    }\n                    var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight);\n                    var offsetS = currentS - (referenceCorner & 2 ? symbolWidth : 0);\n                    var s2, t2, symbolRow;\n                    if (transposed) {\n                        for (s2 = 0; s2 < symbolHeight; s2++) {\n                            row = bitmap[offsetS + s2];\n                            if (!row) {\n                                continue;\n                            }\n                            symbolRow = symbolBitmap[s2];\n                            var maxWidth = Math.min(width - offsetT, symbolWidth);\n                            switch (combinationOperator) {\n                              case 0:\n                                for (t2 = 0; t2 < maxWidth; t2++) {\n                                    row[offsetT + t2] |= symbolRow[t2];\n                                }\n                                break;\n\n                              case 2:\n                                for (t2 = 0; t2 < maxWidth; t2++) {\n                                    row[offsetT + t2] ^= symbolRow[t2];\n                                }\n                                break;\n\n                              default:\n                                error(\"JBIG2 error: operator \" + combinationOperator + \" is not supported\");\n                            }\n                        }\n                        currentS += symbolHeight - 1;\n                    } else {\n                        for (t2 = 0; t2 < symbolHeight; t2++) {\n                            row = bitmap[offsetT + t2];\n                            if (!row) {\n                                continue;\n                            }\n                            symbolRow = symbolBitmap[t2];\n                            switch (combinationOperator) {\n                              case 0:\n                                for (s2 = 0; s2 < symbolWidth; s2++) {\n                                    row[offsetS + s2] |= symbolRow[s2];\n                                }\n                                break;\n\n                              case 2:\n                                for (s2 = 0; s2 < symbolWidth; s2++) {\n                                    row[offsetS + s2] ^= symbolRow[s2];\n                                }\n                                break;\n\n                              default:\n                                error(\"JBIG2 error: operator \" + combinationOperator + \" is not supported\");\n                            }\n                        }\n                        currentS += symbolWidth - 1;\n                    }\n                    i++;\n                    var deltaS = decodeInteger(contextCache, \"IADS\", decoder);\n                    if (deltaS === null) {\n                        break;\n                    }\n                    currentS += deltaS + dsOffset;\n                } while (true);\n            }\n            return bitmap;\n        }\n        function readSegmentHeader(data, start) {\n            var segmentHeader = {};\n            segmentHeader.number = readUint32(data, start);\n            var flags = data[start + 4];\n            var segmentType = flags & 63;\n            if (!SegmentTypes[segmentType]) {\n                error(\"JBIG2 error: invalid segment type: \" + segmentType);\n            }\n            segmentHeader.type = segmentType;\n            segmentHeader.typeName = SegmentTypes[segmentType];\n            segmentHeader.deferredNonRetain = !!(flags & 128);\n            var pageAssociationFieldSize = !!(flags & 64);\n            var referredFlags = data[start + 5];\n            var referredToCount = referredFlags >> 5 & 7;\n            var retainBits = [ referredFlags & 31 ];\n            var position = start + 6;\n            if (referredFlags === 7) {\n                referredToCount = readUint32(data, position - 1) & 536870911;\n                position += 3;\n                var bytes = referredToCount + 7 >> 3;\n                retainBits[0] = data[position++];\n                while (--bytes > 0) {\n                    retainBits.push(data[position++]);\n                }\n            } else if (referredFlags === 5 || referredFlags === 6) {\n                error(\"JBIG2 error: invalid referred-to flags\");\n            }\n            segmentHeader.retainBits = retainBits;\n            var referredToSegmentNumberSize = segmentHeader.number <= 256 ? 1 : segmentHeader.number <= 65536 ? 2 : 4;\n            var referredTo = [];\n            var i, ii;\n            for (i = 0; i < referredToCount; i++) {\n                var number = referredToSegmentNumberSize === 1 ? data[position] : referredToSegmentNumberSize === 2 ? readUint16(data, position) : readUint32(data, position);\n                referredTo.push(number);\n                position += referredToSegmentNumberSize;\n            }\n            segmentHeader.referredTo = referredTo;\n            if (!pageAssociationFieldSize) {\n                segmentHeader.pageAssociation = data[position++];\n            } else {\n                segmentHeader.pageAssociation = readUint32(data, position);\n                position += 4;\n            }\n            segmentHeader.length = readUint32(data, position);\n            position += 4;\n            if (segmentHeader.length === 4294967295) {\n                if (segmentType === 38) {\n                    var genericRegionInfo = readRegionSegmentInformation(data, position);\n                    var genericRegionSegmentFlags = data[position + RegionSegmentInformationFieldLength];\n                    var genericRegionMmr = !!(genericRegionSegmentFlags & 1);\n                    var searchPatternLength = 6;\n                    var searchPattern = new Uint8Array(searchPatternLength);\n                    if (!genericRegionMmr) {\n                        searchPattern[0] = 255;\n                        searchPattern[1] = 172;\n                    }\n                    searchPattern[2] = genericRegionInfo.height >>> 24 & 255;\n                    searchPattern[3] = genericRegionInfo.height >> 16 & 255;\n                    searchPattern[4] = genericRegionInfo.height >> 8 & 255;\n                    searchPattern[5] = genericRegionInfo.height & 255;\n                    for (i = position, ii = data.length; i < ii; i++) {\n                        var j = 0;\n                        while (j < searchPatternLength && searchPattern[j] === data[i + j]) {\n                            j++;\n                        }\n                        if (j === searchPatternLength) {\n                            segmentHeader.length = i + searchPatternLength;\n                            break;\n                        }\n                    }\n                    if (segmentHeader.length === 4294967295) {\n                        error(\"JBIG2 error: segment end was not found\");\n                    }\n                } else {\n                    error(\"JBIG2 error: invalid unknown segment length\");\n                }\n            }\n            segmentHeader.headerEnd = position;\n            return segmentHeader;\n        }\n        function readSegments(header, data, start, end) {\n            var segments = [];\n            var position = start;\n            while (position < end) {\n                var segmentHeader = readSegmentHeader(data, position);\n                position = segmentHeader.headerEnd;\n                var segment = {\n                    header: segmentHeader,\n                    data: data\n                };\n                if (!header.randomAccess) {\n                    segment.start = position;\n                    position += segmentHeader.length;\n                    segment.end = position;\n                }\n                segments.push(segment);\n                if (segmentHeader.type === 51) {\n                    break;\n                }\n            }\n            if (header.randomAccess) {\n                for (var i = 0, ii = segments.length; i < ii; i++) {\n                    segments[i].start = position;\n                    position += segments[i].header.length;\n                    segments[i].end = position;\n                }\n            }\n            return segments;\n        }\n        function readRegionSegmentInformation(data, start) {\n            return {\n                width: readUint32(data, start),\n                height: readUint32(data, start + 4),\n                x: readUint32(data, start + 8),\n                y: readUint32(data, start + 12),\n                combinationOperator: data[start + 16] & 7\n            };\n        }\n        var RegionSegmentInformationFieldLength = 17;\n        function processSegment(segment, visitor) {\n            var header = segment.header;\n            var data = segment.data, position = segment.start, end = segment.end;\n            var args, at, i, atLength;\n            switch (header.type) {\n              case 0:\n                var dictionary = {};\n                var dictionaryFlags = readUint16(data, position);\n                dictionary.huffman = !!(dictionaryFlags & 1);\n                dictionary.refinement = !!(dictionaryFlags & 2);\n                dictionary.huffmanDHSelector = dictionaryFlags >> 2 & 3;\n                dictionary.huffmanDWSelector = dictionaryFlags >> 4 & 3;\n                dictionary.bitmapSizeSelector = dictionaryFlags >> 6 & 1;\n                dictionary.aggregationInstancesSelector = dictionaryFlags >> 7 & 1;\n                dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);\n                dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);\n                dictionary.template = dictionaryFlags >> 10 & 3;\n                dictionary.refinementTemplate = dictionaryFlags >> 12 & 1;\n                position += 2;\n                if (!dictionary.huffman) {\n                    atLength = dictionary.template === 0 ? 4 : 1;\n                    at = [];\n                    for (i = 0; i < atLength; i++) {\n                        at.push({\n                            x: readInt8(data, position),\n                            y: readInt8(data, position + 1)\n                        });\n                        position += 2;\n                    }\n                    dictionary.at = at;\n                }\n                if (dictionary.refinement && !dictionary.refinementTemplate) {\n                    at = [];\n                    for (i = 0; i < 2; i++) {\n                        at.push({\n                            x: readInt8(data, position),\n                            y: readInt8(data, position + 1)\n                        });\n                        position += 2;\n                    }\n                    dictionary.refinementAt = at;\n                }\n                dictionary.numberOfExportedSymbols = readUint32(data, position);\n                position += 4;\n                dictionary.numberOfNewSymbols = readUint32(data, position);\n                position += 4;\n                args = [ dictionary, header.number, header.referredTo, data, position, end ];\n                break;\n\n              case 6:\n              case 7:\n                var textRegion = {};\n                textRegion.info = readRegionSegmentInformation(data, position);\n                position += RegionSegmentInformationFieldLength;\n                var textRegionSegmentFlags = readUint16(data, position);\n                position += 2;\n                textRegion.huffman = !!(textRegionSegmentFlags & 1);\n                textRegion.refinement = !!(textRegionSegmentFlags & 2);\n                textRegion.stripSize = 1 << (textRegionSegmentFlags >> 2 & 3);\n                textRegion.referenceCorner = textRegionSegmentFlags >> 4 & 3;\n                textRegion.transposed = !!(textRegionSegmentFlags & 64);\n                textRegion.combinationOperator = textRegionSegmentFlags >> 7 & 3;\n                textRegion.defaultPixelValue = textRegionSegmentFlags >> 9 & 1;\n                textRegion.dsOffset = textRegionSegmentFlags << 17 >> 27;\n                textRegion.refinementTemplate = textRegionSegmentFlags >> 15 & 1;\n                if (textRegion.huffman) {\n                    var textRegionHuffmanFlags = readUint16(data, position);\n                    position += 2;\n                    textRegion.huffmanFS = textRegionHuffmanFlags & 3;\n                    textRegion.huffmanDS = textRegionHuffmanFlags >> 2 & 3;\n                    textRegion.huffmanDT = textRegionHuffmanFlags >> 4 & 3;\n                    textRegion.huffmanRefinementDW = textRegionHuffmanFlags >> 6 & 3;\n                    textRegion.huffmanRefinementDH = textRegionHuffmanFlags >> 8 & 3;\n                    textRegion.huffmanRefinementDX = textRegionHuffmanFlags >> 10 & 3;\n                    textRegion.huffmanRefinementDY = textRegionHuffmanFlags >> 12 & 3;\n                    textRegion.huffmanRefinementSizeSelector = !!(textRegionHuffmanFlags & 14);\n                }\n                if (textRegion.refinement && !textRegion.refinementTemplate) {\n                    at = [];\n                    for (i = 0; i < 2; i++) {\n                        at.push({\n                            x: readInt8(data, position),\n                            y: readInt8(data, position + 1)\n                        });\n                        position += 2;\n                    }\n                    textRegion.refinementAt = at;\n                }\n                textRegion.numberOfSymbolInstances = readUint32(data, position);\n                position += 4;\n                if (textRegion.huffman) {\n                    error(\"JBIG2 error: huffman is not supported\");\n                }\n                args = [ textRegion, header.referredTo, data, position, end ];\n                break;\n\n              case 38:\n              case 39:\n                var genericRegion = {};\n                genericRegion.info = readRegionSegmentInformation(data, position);\n                position += RegionSegmentInformationFieldLength;\n                var genericRegionSegmentFlags = data[position++];\n                genericRegion.mmr = !!(genericRegionSegmentFlags & 1);\n                genericRegion.template = genericRegionSegmentFlags >> 1 & 3;\n                genericRegion.prediction = !!(genericRegionSegmentFlags & 8);\n                if (!genericRegion.mmr) {\n                    atLength = genericRegion.template === 0 ? 4 : 1;\n                    at = [];\n                    for (i = 0; i < atLength; i++) {\n                        at.push({\n                            x: readInt8(data, position),\n                            y: readInt8(data, position + 1)\n                        });\n                        position += 2;\n                    }\n                    genericRegion.at = at;\n                }\n                args = [ genericRegion, data, position, end ];\n                break;\n\n              case 48:\n                var pageInfo = {\n                    width: readUint32(data, position),\n                    height: readUint32(data, position + 4),\n                    resolutionX: readUint32(data, position + 8),\n                    resolutionY: readUint32(data, position + 12)\n                };\n                if (pageInfo.height === 4294967295) {\n                    delete pageInfo.height;\n                }\n                var pageSegmentFlags = data[position + 16];\n                var pageStripingInformatiom = readUint16(data, position + 17);\n                pageInfo.lossless = !!(pageSegmentFlags & 1);\n                pageInfo.refinement = !!(pageSegmentFlags & 2);\n                pageInfo.defaultPixelValue = pageSegmentFlags >> 2 & 1;\n                pageInfo.combinationOperator = pageSegmentFlags >> 3 & 3;\n                pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);\n                pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);\n                args = [ pageInfo ];\n                break;\n\n              case 49:\n                break;\n\n              case 50:\n                break;\n\n              case 51:\n                break;\n\n              case 62:\n                break;\n\n              default:\n                error(\"JBIG2 error: segment type \" + header.typeName + \"(\" + header.type + \") is not implemented\");\n            }\n            var callbackName = \"on\" + header.typeName;\n            if (callbackName in visitor) {\n                visitor[callbackName].apply(visitor, args);\n            }\n        }\n        function processSegments(segments, visitor) {\n            for (var i = 0, ii = segments.length; i < ii; i++) {\n                processSegment(segments[i], visitor);\n            }\n        }\n        function parseJbig2(data, start, end) {\n            var position = start;\n            if (data[position] !== 151 || data[position + 1] !== 74 || data[position + 2] !== 66 || data[position + 3] !== 50 || data[position + 4] !== 13 || data[position + 5] !== 10 || data[position + 6] !== 26 || data[position + 7] !== 10) {\n                error(\"JBIG2 error: invalid header\");\n            }\n            var header = {};\n            position += 8;\n            var flags = data[position++];\n            header.randomAccess = !(flags & 1);\n            if (!(flags & 2)) {\n                header.numberOfPages = readUint32(data, position);\n                position += 4;\n            }\n            var segments = readSegments(header, data, position, end);\n            error(\"Not implemented\");\n        }\n        function parseJbig2Chunks(chunks) {\n            var visitor = new SimpleSegmentVisitor();\n            for (var i = 0, ii = chunks.length; i < ii; i++) {\n                var chunk = chunks[i];\n                var segments = readSegments({}, chunk.data, chunk.start, chunk.end);\n                processSegments(segments, visitor);\n            }\n            return visitor;\n        }\n        function SimpleSegmentVisitor() {}\n        SimpleSegmentVisitor.prototype = {\n            onPageInformation: function SimpleSegmentVisitor_onPageInformation(info) {\n                this.currentPageInfo = info;\n                var rowSize = info.width + 7 >> 3;\n                var buffer = new Uint8Array(rowSize * info.height);\n                if (info.defaultPixelValue) {\n                    for (var i = 0, ii = buffer.length; i < ii; i++) {\n                        buffer[i] = 255;\n                    }\n                }\n                this.buffer = buffer;\n            },\n            drawBitmap: function SimpleSegmentVisitor_drawBitmap(regionInfo, bitmap) {\n                var pageInfo = this.currentPageInfo;\n                var width = regionInfo.width, height = regionInfo.height;\n                var rowSize = pageInfo.width + 7 >> 3;\n                var combinationOperator = pageInfo.combinationOperatorOverride ? regionInfo.combinationOperator : pageInfo.combinationOperator;\n                var buffer = this.buffer;\n                var mask0 = 128 >> (regionInfo.x & 7);\n                var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);\n                var i, j, mask, offset;\n                switch (combinationOperator) {\n                  case 0:\n                    for (i = 0; i < height; i++) {\n                        mask = mask0;\n                        offset = offset0;\n                        for (j = 0; j < width; j++) {\n                            if (bitmap[i][j]) {\n                                buffer[offset] |= mask;\n                            }\n                            mask >>= 1;\n                            if (!mask) {\n                                mask = 128;\n                                offset++;\n                            }\n                        }\n                        offset0 += rowSize;\n                    }\n                    break;\n\n                  case 2:\n                    for (i = 0; i < height; i++) {\n                        mask = mask0;\n                        offset = offset0;\n                        for (j = 0; j < width; j++) {\n                            if (bitmap[i][j]) {\n                                buffer[offset] ^= mask;\n                            }\n                            mask >>= 1;\n                            if (!mask) {\n                                mask = 128;\n                                offset++;\n                            }\n                        }\n                        offset0 += rowSize;\n                    }\n                    break;\n\n                  default:\n                    error(\"JBIG2 error: operator \" + combinationOperator + \" is not supported\");\n                }\n            },\n            onImmediateGenericRegion: function SimpleSegmentVisitor_onImmediateGenericRegion(region, data, start, end) {\n                var regionInfo = region.info;\n                var decodingContext = new DecodingContext(data, start, end);\n                var bitmap = decodeBitmap(region.mmr, regionInfo.width, regionInfo.height, region.template, region.prediction, null, region.at, decodingContext);\n                this.drawBitmap(regionInfo, bitmap);\n            },\n            onImmediateLosslessGenericRegion: function SimpleSegmentVisitor_onImmediateLosslessGenericRegion() {\n                this.onImmediateGenericRegion.apply(this, arguments);\n            },\n            onSymbolDictionary: function SimpleSegmentVisitor_onSymbolDictionary(dictionary, currentSegment, referredSegments, data, start, end) {\n                var huffmanTables;\n                if (dictionary.huffman) {\n                    error(\"JBIG2 error: huffman is not supported\");\n                }\n                var symbols = this.symbols;\n                if (!symbols) {\n                    this.symbols = symbols = {};\n                }\n                var inputSymbols = [];\n                for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n                    inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);\n                }\n                var decodingContext = new DecodingContext(data, start, end);\n                symbols[currentSegment] = decodeSymbolDictionary(dictionary.huffman, dictionary.refinement, inputSymbols, dictionary.numberOfNewSymbols, dictionary.numberOfExportedSymbols, huffmanTables, dictionary.template, dictionary.at, dictionary.refinementTemplate, dictionary.refinementAt, decodingContext);\n            },\n            onImmediateTextRegion: function SimpleSegmentVisitor_onImmediateTextRegion(region, referredSegments, data, start, end) {\n                var regionInfo = region.info;\n                var huffmanTables;\n                var symbols = this.symbols;\n                var inputSymbols = [];\n                for (var i = 0, ii = referredSegments.length; i < ii; i++) {\n                    inputSymbols = inputSymbols.concat(symbols[referredSegments[i]]);\n                }\n                var symbolCodeLength = log2(inputSymbols.length);\n                var decodingContext = new DecodingContext(data, start, end);\n                var bitmap = decodeTextRegion(region.huffman, region.refinement, regionInfo.width, regionInfo.height, region.defaultPixelValue, region.numberOfSymbolInstances, region.stripSize, inputSymbols, symbolCodeLength, region.transposed, region.dsOffset, region.referenceCorner, region.combinationOperator, huffmanTables, region.refinementTemplate, region.refinementAt, decodingContext);\n                this.drawBitmap(regionInfo, bitmap);\n            },\n            onImmediateLosslessTextRegion: function SimpleSegmentVisitor_onImmediateLosslessTextRegion() {\n                this.onImmediateTextRegion.apply(this, arguments);\n            }\n        };\n        function Jbig2Image() {}\n        Jbig2Image.prototype = {\n            parseChunks: function Jbig2Image_parseChunks(chunks) {\n                return parseJbig2Chunks(chunks);\n            }\n        };\n        return Jbig2Image;\n    }();\n    function log2(x) {\n        var n = 1, i = 0;\n        while (x > n) {\n            n <<= 1;\n            i++;\n        }\n        return i;\n    }\n    function readInt8(data, start) {\n        return data[start] << 24 >> 24;\n    }\n    function readUint16(data, offset) {\n        return data[offset] << 8 | data[offset + 1];\n    }\n    function readUint32(data, offset) {\n        return (data[offset] << 24 | data[offset + 1] << 16 | data[offset + 2] << 8 | data[offset + 3]) >>> 0;\n    }\n    function shadow(obj, prop, value) {\n        Object.defineProperty(obj, prop, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: false\n        });\n        return value;\n    }\n    var error = function() {\n        console.error.apply(console, arguments);\n        throw new Error(\"PDFJS error: \" + arguments[0]);\n    };\n    var warn = function() {\n        console.warn.apply(console, arguments);\n    };\n    var info = function() {\n        console.info.apply(console, arguments);\n    };\n    Jbig2Image.prototype.parse = function parseJbig2(data) {\n        var position = 0, end = data.length;\n        if (data[position] !== 151 || data[position + 1] !== 74 || data[position + 2] !== 66 || data[position + 3] !== 50 || data[position + 4] !== 13 || data[position + 5] !== 10 || data[position + 6] !== 26 || data[position + 7] !== 10) {\n            error(\"JBIG2 error: invalid header\");\n        }\n        var header = {};\n        position += 8;\n        var flags = data[position++];\n        header.randomAccess = !(flags & 1);\n        if (!(flags & 2)) {\n            header.numberOfPages = readUint32(data, position);\n            position += 4;\n        }\n        var visitor = this.parseChunks([ {\n            data: data,\n            start: position,\n            end: end\n        } ]);\n        var width = visitor.currentPageInfo.width;\n        var height = visitor.currentPageInfo.height;\n        var bitPacked = visitor.buffer;\n        var data = new Uint8Array(width * height);\n        var q = 0, k = 0;\n        for (var i = 0; i < height; i++) {\n            var mask = 0, buffer;\n            for (var j = 0; j < width; j++) {\n                if (!mask) {\n                    mask = 128;\n                    buffer = bitPacked[k++];\n                }\n                data[q++] = buffer & mask ? 0 : 255;\n                mask >>= 1;\n            }\n        }\n        this.width = width;\n        this.height = height;\n        this.data = data;\n    };\n    PDFJS.JpegImage = JpegImage;\n    PDFJS.JpxImage = JpxImage;\n    PDFJS.Jbig2Image = Jbig2Image;\n})(PDFJS || (PDFJS = {}));\n\nvar JpegDecoder = PDFJS.JpegImage;\n\nvar JpxDecoder = PDFJS.JpxImage;\n\nvar Jbig2Decoder = PDFJS.Jbig2Image;\n\nif (typeof exports !== \"undefined\") {\n    module.exports = {\n        JpegImage: JpegImage,\n        JpegDecoder: JpegDecoder,\n        JpxDecoder: JpxDecoder,\n        Jbig2Decoder: Jbig2Decoder\n    };\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./third_party/jpgjs/jpg.js\n ** module id = 45\n ** module chunks = 0\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts raw data volumes to the appropriate format required by the frontend.\n */\n\nimport {DataType} from 'neuroglancer/sliceview/base';\nimport {VolumeChunk} from 'neuroglancer/sliceview/backend';\nimport {Uint32ArrayBuilder} from 'neuroglancer/util/uint32array_builder.ts';\nimport {encodeChannel as encodeChannelUint32} from 'neuroglancer/sliceview/compressed_segmentation/encode_uint32';\nimport {encodeChannel as encodeChannelUint64} from 'neuroglancer/sliceview/compressed_segmentation/encode_uint64';\n\nconst tempBuffer = new Uint32ArrayBuilder(20000);\n\nexport function postProcessRawData(chunk: VolumeChunk, data: ArrayBufferView) {\n  const {spec} = chunk.source;\n  if (spec.compressedSegmentationBlockSize) {\n    const {dataType} = spec;\n    tempBuffer.clear();\n    switch (dataType) {\n    case DataType.UINT32:\n      encodeChannelUint32(tempBuffer, spec.compressedSegmentationBlockSize, <Uint32Array>data, chunk.chunkDataSize);\n      break;\n    case DataType.UINT64:\n      encodeChannelUint64(tempBuffer, spec.compressedSegmentationBlockSize, <Uint32Array>data, chunk.chunkDataSize);\n      break;\n    default:\n      throw new Error(`Unsupported data type for compressed segmentation: ${DataType[dataType]}`);\n    }\n    chunk.data = new Uint32Array(tempBuffer.view);\n  } else {\n    chunk.data = data;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/backend_chunk_decoders/postprocess.ts\n **/","// DO NOT EDIT.  Generated from templates/neuroglancer/util/typedarray_builder.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport class Uint32ArrayBuilder {\n  length = 0;\n  data: Uint32Array;\n\n  constructor (initialCapacity: number = 16) {\n    this.data = new Uint32Array(initialCapacity);\n  }\n\n  resize(newLength: number) {\n    let {data} = this;\n    if (newLength > data.length) {\n      let newData = new Uint32Array(Math.max(newLength, data.length * 2));\n      newData.set(data.subarray(0, this.length));\n      this.data = newData;\n    }\n    this.length = newLength;\n  }\n\n  get view () {\n    let {data} = this;\n    return new Uint32Array(data.buffer, data.byteOffset, this.length);\n  }\n\n  shrinkToFit () {\n    this.data = new Uint32Array(this.view);\n  }\n\n  clear () {\n    this.length = 0;\n  }\n\n  appendArray (other: ArrayLike<number>) {\n    let {length} = this;\n    this.resize(length + other.length);\n    this.data.set(other, length);\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/uint32array_builder.ts\n **/","// DO NOT EDIT.  Generated from templates/neuroglancer/sliceview/compressed_segmentation/encode.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file\n * Support for compressing uint32/uint64 segment label chunks.\n */\n\nimport {writeBlock, newCache, encodeChannel as encodeChannelCommon, encodeChannels as encodeChannelsCommon} from 'neuroglancer/sliceview/compressed_segmentation/encode_common.ts';\nimport {getFortranOrderStrides} from 'neuroglancer/util/array';\nimport {Uint32ArrayBuilder} from 'neuroglancer/util/uint32array_builder.ts';\n\nexport {newCache} from 'neuroglancer/sliceview/compressed_segmentation/encode_common.ts';\n\nlet tempEncodingBuffer: Uint32Array;\nlet tempValuesBuffer1: Uint32Array;\nlet tempValuesBuffer2: Uint32Array;\nlet tempIndexBuffer1: Uint32Array;\nlet tempIndexBuffer2: Uint32Array;\n\nconst uint32sPerElement = 1;\n\nexport function encodeBlock(\n    rawData: Uint32Array, inputOffset: number, inputStrides: ArrayLike<number>,\n    blockSize: ArrayLike<number>, actualSize: ArrayLike<number>, baseOffset: number,\n    cache: Map<string, number>, output: Uint32ArrayBuilder): [number, number] {\n  const ax = actualSize[0], ay = actualSize[1], az = actualSize[2];\n  const bx = blockSize[0], by = blockSize[1], bz = blockSize[2];\n  let sx = inputStrides[0], sy = inputStrides[1], sz = inputStrides[2];\n  sz -= sy * ay;\n  sy -= sx * ax;\n  if (ax * ay * az === 0) {\n    return [0, 0];\n  }\n\n  let numBlockElements = bx * by * bz + 31; // Add padding elements.\n  if (tempEncodingBuffer === undefined || tempEncodingBuffer.length < numBlockElements) {\n    tempEncodingBuffer = new Uint32Array(numBlockElements);\n    tempValuesBuffer1 = new Uint32Array(numBlockElements * uint32sPerElement);\n    tempValuesBuffer2 = new Uint32Array(numBlockElements * uint32sPerElement);\n    tempIndexBuffer1 = new Uint32Array(numBlockElements);\n    tempIndexBuffer2 = new Uint32Array(numBlockElements);\n  }\n\n  const encodingBuffer = tempEncodingBuffer.subarray(0, numBlockElements);\n  encodingBuffer.fill(0);\n  const valuesBuffer1 = tempValuesBuffer1;\n  const valuesBuffer2 = tempValuesBuffer2;\n  const indexBuffer1 = tempIndexBuffer1;\n  const indexBuffer2 = tempIndexBuffer2;\n\n  let noAdjacentDuplicateIndex = 0;\n  {\n    let prevLow = ((rawData[inputOffset] + 1) >>> 0);\n    \n    let curInputOff = inputOffset;\n    let blockElementIndex = 0;\n    let bsy = bx - ax;\n    let bsz = bx * by - bx * ay;\n    for (let z = 0; z < az; ++z, curInputOff += sz, blockElementIndex += bsz) {\n      for (let y = 0; y < ay; ++y, curInputOff += sy, blockElementIndex += bsy) {\n        for (let x = 0; x < ax; ++x, curInputOff += sx) {\n          let valueLow = rawData[curInputOff];\n          \n          if (valueLow !== prevLow\n              \n             ) {\n            prevLow = valuesBuffer1[noAdjacentDuplicateIndex * 1] = valueLow;\n            \n            indexBuffer1[noAdjacentDuplicateIndex] = noAdjacentDuplicateIndex++;\n          }\n          encodingBuffer[blockElementIndex++] = noAdjacentDuplicateIndex;\n        }\n      }\n    }\n  }\n\n  indexBuffer1.subarray(0, noAdjacentDuplicateIndex).sort((a, b) => {\n    \n    return valuesBuffer1[a] - valuesBuffer1[b];\n    \n  });\n\n  let numUniqueValues = -1;\n  {\n    let prevLow = (valuesBuffer1[indexBuffer1[0] * uint32sPerElement] + 1) >>> 0;\n    \n    for (let i = 0; i < noAdjacentDuplicateIndex; ++i) {\n      let index = indexBuffer1[i];\n      let valueIndex = index * uint32sPerElement;\n      let valueLow = valuesBuffer1[valueIndex];\n      \n      if (valueLow !== prevLow\n          \n         ) {\n        ++numUniqueValues;\n        let outputIndex2 = numUniqueValues * uint32sPerElement;\n        prevLow = valuesBuffer2[outputIndex2] = valueLow;\n        \n      }\n      indexBuffer2[index + 1] = numUniqueValues;\n    }\n    ++numUniqueValues;\n  }\n\n  return writeBlock(output, baseOffset, cache, bx * by * bz, numUniqueValues, valuesBuffer2, encodingBuffer,\n                    indexBuffer2, uint32sPerElement);\n}\n\nexport function encodeChannel(\n  output: Uint32ArrayBuilder, blockSize: ArrayLike<number>,\n  rawData: Uint32Array, volumeSize: ArrayLike<number>,\n  baseInputOffset: number = 0, inputStrides = getFortranOrderStrides(volumeSize, 1)) {\n  return encodeChannelCommon(output, blockSize, rawData, volumeSize, baseInputOffset, inputStrides, encodeBlock);\n}\n\nexport function encodeChannels(\n    output: Uint32ArrayBuilder, blockSize: ArrayLike<number>, rawData: Uint32Array,\n    volumeSize: ArrayLike<number>, baseInputOffset: number = 0,\n    inputStrides = getFortranOrderStrides(volumeSize, 1)) {\n  return encodeChannelsCommon(\n      output, blockSize, rawData, volumeSize, baseInputOffset, inputStrides, encodeBlock);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/compressed_segmentation/encode_uint32.ts\n **/","// DO NOT EDIT.  Generated from templates/neuroglancer/sliceview/compressed_segmentation/encode_common.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Uint32ArrayBuilder} from 'neuroglancer/util/uint32array_builder.ts';\n\nexport const BLOCK_HEADER_SIZE = 2;\n\nexport function newCache () {\n  return new Map<string, number>();\n}\n\nfunction writeEncodedRepresentation(\n    outputData: Uint32Array, outputOffset: number, encodingBuffer: Uint32Array,\n    indexBuffer: Uint32Array, encodedBits: number, encodedSize32Bits: number) {\n  // Write encoded representation.\n  if (encodedBits > 0) {\n    switch (encodedBits) {\n      \n      case 1: {\n        for (let wordIndex = 0, elementIndex = 0; wordIndex < encodedSize32Bits; ++wordIndex) {\n          let word = 0;\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 0]] << 0);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 1]] << 1);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 2]] << 2);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 3]] << 3);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 4]] << 4);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 5]] << 5);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 6]] << 6);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 7]] << 7);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 8]] << 8);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 9]] << 9);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 10]] << 10);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 11]] << 11);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 12]] << 12);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 13]] << 13);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 14]] << 14);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 15]] << 15);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 16]] << 16);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 17]] << 17);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 18]] << 18);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 19]] << 19);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 20]] << 20);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 21]] << 21);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 22]] << 22);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 23]] << 23);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 24]] << 24);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 25]] << 25);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 26]] << 26);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 27]] << 27);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 28]] << 28);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 29]] << 29);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 30]] << 30);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 31]] << 31);\n          \n          outputData[outputOffset + wordIndex] = word;\n          elementIndex += 32;\n        }\n      } break;\n      \n      case 2: {\n        for (let wordIndex = 0, elementIndex = 0; wordIndex < encodedSize32Bits; ++wordIndex) {\n          let word = 0;\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 0]] << 0);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 1]] << 2);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 2]] << 4);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 3]] << 6);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 4]] << 8);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 5]] << 10);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 6]] << 12);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 7]] << 14);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 8]] << 16);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 9]] << 18);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 10]] << 20);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 11]] << 22);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 12]] << 24);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 13]] << 26);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 14]] << 28);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 15]] << 30);\n          \n          outputData[outputOffset + wordIndex] = word;\n          elementIndex += 16;\n        }\n      } break;\n      \n      case 4: {\n        for (let wordIndex = 0, elementIndex = 0; wordIndex < encodedSize32Bits; ++wordIndex) {\n          let word = 0;\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 0]] << 0);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 1]] << 4);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 2]] << 8);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 3]] << 12);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 4]] << 16);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 5]] << 20);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 6]] << 24);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 7]] << 28);\n          \n          outputData[outputOffset + wordIndex] = word;\n          elementIndex += 8;\n        }\n      } break;\n      \n      case 8: {\n        for (let wordIndex = 0, elementIndex = 0; wordIndex < encodedSize32Bits; ++wordIndex) {\n          let word = 0;\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 0]] << 0);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 1]] << 8);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 2]] << 16);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 3]] << 24);\n          \n          outputData[outputOffset + wordIndex] = word;\n          elementIndex += 4;\n        }\n      } break;\n      \n      case 16: {\n        for (let wordIndex = 0, elementIndex = 0; wordIndex < encodedSize32Bits; ++wordIndex) {\n          let word = 0;\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 0]] << 0);\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 1]] << 16);\n          \n          outputData[outputOffset + wordIndex] = word;\n          elementIndex += 2;\n        }\n      } break;\n      \n      case 32: {\n        for (let wordIndex = 0, elementIndex = 0; wordIndex < encodedSize32Bits; ++wordIndex) {\n          let word = 0;\n          \n          word |= (indexBuffer[encodingBuffer[elementIndex + 0]] << 0);\n          \n          outputData[outputOffset + wordIndex] = word;\n          elementIndex += 1;\n        }\n      } break;\n      \n    }\n  }\n}\n\ntype ValueTableCache = Map<string, number>;\n\nexport function writeBlock(\n    output: Uint32ArrayBuilder, baseOffset: number, cache: ValueTableCache,\n    numBlockElements: number, numUniqueValues: number, valuesBuffer2: Uint32Array,\n    encodingBuffer: Uint32Array, indexBuffer2: Uint32Array,\n    uint32sPerElement: number): [number, number] {\n  let encodedBits: number;\n  if (numUniqueValues === 1) {\n    encodedBits = 0;\n  } else {\n    encodedBits = 1;\n    while ((1 << encodedBits) < numUniqueValues) {\n      encodedBits *= 2;\n    }\n  }\n\n  let encodedSize32bits = Math.ceil(encodedBits * numBlockElements / 32);\n\n  let encodedValueBaseOffset = output.length;\n  let elementsToWrite = encodedSize32bits;\n\n  let writeTable = false;\n  let key = Array.prototype.join.call(\n      valuesBuffer2.subarray(0, numUniqueValues * uint32sPerElement), ',');\n  let tableOffset = cache.get(key);\n\n  if (tableOffset === undefined) {\n    writeTable = true;\n    elementsToWrite += numUniqueValues * uint32sPerElement;\n    tableOffset = encodedValueBaseOffset + encodedSize32bits - baseOffset;\n    cache.set(key, tableOffset);\n  }\n\n  output.resize(encodedValueBaseOffset + elementsToWrite);\n  let outputData = output.data;\n\n  writeEncodedRepresentation(\n      outputData, encodedValueBaseOffset, encodingBuffer, indexBuffer2, encodedBits,\n      encodedSize32bits);\n\n  // Write table\n  if (writeTable) {\n    let curOutputOff = encodedValueBaseOffset + encodedSize32bits;\n    for (let i = 0, length = numUniqueValues * uint32sPerElement; i < length; ++i) {\n      outputData[curOutputOff++] = valuesBuffer2[i];\n    }\n  }\n  return [encodedBits, tableOffset];\n}\n\ntype EncodeBlockFunction =\n    (rawData: Uint32Array, inputOffset: number, inputStrides: ArrayLike<number>, blockSize: ArrayLike<number>,\n     actualSize: ArrayLike<number>, baseOffset: number, cache: ValueTableCache,\n     output: Uint32ArrayBuilder) => [number, number];\n\nexport function encodeChannel(\n    output: Uint32ArrayBuilder, blockSize: ArrayLike<number>, rawData: Uint32Array,\n    volumeSize: ArrayLike<number>, baseInputOffset: number, inputStrides: ArrayLike<number>,\n    encodeBlock: EncodeBlockFunction) {\n  // Maps a sorted list of table entries in the form <low>,<high>,<low>,<high>,... to the table\n  // offset relative to baseOffset.\n  let cache = newCache();\n  let gridSize = new Array<number>(3);\n  let blockIndexSize = BLOCK_HEADER_SIZE;\n  for (let i = 0; i < 3; ++i) {\n    let curGridSize = gridSize[i] = Math.ceil(volumeSize[i] / blockSize[i]);\n    blockIndexSize *= curGridSize;\n  }\n  const gx = gridSize[0], gy = gridSize[1], gz = gridSize[2];\n  const xSize = volumeSize[0], ySize = volumeSize[1], zSize = volumeSize[2];\n  const xBlockSize = blockSize[0], yBlockSize = blockSize[1], zBlockSize = blockSize[2];\n  const baseOffset = output.length;\n  let headerOffset = baseOffset;\n  const actualSize = [0, 0, 0];\n  output.resize(baseOffset + blockIndexSize);\n  let sx = inputStrides[0], sy = inputStrides[1], sz = inputStrides[2];\n  for (let bz = 0; bz < gz; ++bz) {\n    actualSize[2] = Math.min(zBlockSize, zSize - bz * zBlockSize);\n    for (let by = 0; by < gy; ++by) {\n      actualSize[1] = Math.min(yBlockSize, ySize - by * yBlockSize);\n      for (let bx = 0; bx < gx; ++bx) {\n        actualSize[0] = Math.min(xBlockSize, xSize - bx * xBlockSize);\n        let inputOffset = bz * zBlockSize * sz + by * yBlockSize * sy + bx * xBlockSize * sx;\n        let encodedValueBaseOffset = output.length - baseOffset;\n        let [encodedBits, tableOffset] = encodeBlock(\n          rawData, baseInputOffset + inputOffset, inputStrides, blockSize, actualSize, baseOffset, cache, output);\n        let outputData = output.data;\n        outputData[headerOffset++] = tableOffset | (encodedBits << 24);\n        outputData[headerOffset++] = encodedValueBaseOffset;\n      }\n    }\n  }\n}\n\nexport function encodeChannels(\n    output: Uint32ArrayBuilder, blockSize: ArrayLike<number>, rawData: Uint32Array,\n    volumeSize: ArrayLike<number>, baseInputOffset: number, inputStrides: ArrayLike<number>,\n    encodeBlock: EncodeBlockFunction) {\n  let channelOffsetOutputBase = output.length;\n  const numChannels = volumeSize[3];\n  output.resize(channelOffsetOutputBase + numChannels);\n  for (let channel = 0; channel < numChannels; ++channel) {\n    output.data[channelOffsetOutputBase + channel] = output.length;\n    encodeChannel(output, blockSize, rawData, volumeSize, baseInputOffset + inputStrides[3] * channel, inputStrides, encodeBlock);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/compressed_segmentation/encode_common.ts\n **/","// DO NOT EDIT.  Generated from templates/neuroglancer/sliceview/compressed_segmentation/encode.template.ts.\n/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file\n * Support for compressing uint32/uint64 segment label chunks.\n */\n\nimport {writeBlock, newCache, encodeChannel as encodeChannelCommon, encodeChannels as encodeChannelsCommon} from 'neuroglancer/sliceview/compressed_segmentation/encode_common.ts';\nimport {getFortranOrderStrides} from 'neuroglancer/util/array';\nimport {Uint32ArrayBuilder} from 'neuroglancer/util/uint32array_builder.ts';\n\nexport {newCache} from 'neuroglancer/sliceview/compressed_segmentation/encode_common.ts';\n\nlet tempEncodingBuffer: Uint32Array;\nlet tempValuesBuffer1: Uint32Array;\nlet tempValuesBuffer2: Uint32Array;\nlet tempIndexBuffer1: Uint32Array;\nlet tempIndexBuffer2: Uint32Array;\n\nconst uint32sPerElement = 2;\n\nexport function encodeBlock(\n    rawData: Uint32Array, inputOffset: number, inputStrides: ArrayLike<number>,\n    blockSize: ArrayLike<number>, actualSize: ArrayLike<number>, baseOffset: number,\n    cache: Map<string, number>, output: Uint32ArrayBuilder): [number, number] {\n  const ax = actualSize[0], ay = actualSize[1], az = actualSize[2];\n  const bx = blockSize[0], by = blockSize[1], bz = blockSize[2];\n  let sx = inputStrides[0], sy = inputStrides[1], sz = inputStrides[2];\n  sz -= sy * ay;\n  sy -= sx * ax;\n  if (ax * ay * az === 0) {\n    return [0, 0];\n  }\n\n  let numBlockElements = bx * by * bz + 31; // Add padding elements.\n  if (tempEncodingBuffer === undefined || tempEncodingBuffer.length < numBlockElements) {\n    tempEncodingBuffer = new Uint32Array(numBlockElements);\n    tempValuesBuffer1 = new Uint32Array(numBlockElements * uint32sPerElement);\n    tempValuesBuffer2 = new Uint32Array(numBlockElements * uint32sPerElement);\n    tempIndexBuffer1 = new Uint32Array(numBlockElements);\n    tempIndexBuffer2 = new Uint32Array(numBlockElements);\n  }\n\n  const encodingBuffer = tempEncodingBuffer.subarray(0, numBlockElements);\n  encodingBuffer.fill(0);\n  const valuesBuffer1 = tempValuesBuffer1;\n  const valuesBuffer2 = tempValuesBuffer2;\n  const indexBuffer1 = tempIndexBuffer1;\n  const indexBuffer2 = tempIndexBuffer2;\n\n  let noAdjacentDuplicateIndex = 0;\n  {\n    let prevLow = ((rawData[inputOffset] + 1) >>> 0);\n    \n    let prevHigh = 0;\n    \n    let curInputOff = inputOffset;\n    let blockElementIndex = 0;\n    let bsy = bx - ax;\n    let bsz = bx * by - bx * ay;\n    for (let z = 0; z < az; ++z, curInputOff += sz, blockElementIndex += bsz) {\n      for (let y = 0; y < ay; ++y, curInputOff += sy, blockElementIndex += bsy) {\n        for (let x = 0; x < ax; ++x, curInputOff += sx) {\n          let valueLow = rawData[curInputOff];\n          \n          let valueHigh = rawData[curInputOff + 1];\n          \n          if (valueLow !== prevLow\n              \n              || valueHigh !== prevHigh\n              \n             ) {\n            prevLow = valuesBuffer1[noAdjacentDuplicateIndex * 2] = valueLow;\n            \n            prevHigh = valuesBuffer1[noAdjacentDuplicateIndex * 2 + 1] = valueHigh;\n            \n            indexBuffer1[noAdjacentDuplicateIndex] = noAdjacentDuplicateIndex++;\n          }\n          encodingBuffer[blockElementIndex++] = noAdjacentDuplicateIndex;\n        }\n      }\n    }\n  }\n\n  indexBuffer1.subarray(0, noAdjacentDuplicateIndex).sort((a, b) => {\n    \n    let aHigh = valuesBuffer1[2 * a + 1];\n    let bHigh = valuesBuffer1[2 * b + 1];\n    let aLow = valuesBuffer1[2 * a];\n    let bLow = valuesBuffer1[2 * b];\n    return (aHigh - bHigh) || (aLow - bLow);\n    \n  });\n\n  let numUniqueValues = -1;\n  {\n    let prevLow = (valuesBuffer1[indexBuffer1[0] * uint32sPerElement] + 1) >>> 0;\n    \n    let prevHigh = 0;\n    \n    for (let i = 0; i < noAdjacentDuplicateIndex; ++i) {\n      let index = indexBuffer1[i];\n      let valueIndex = index * uint32sPerElement;\n      let valueLow = valuesBuffer1[valueIndex];\n      \n      let valueHigh = valuesBuffer1[valueIndex + 1];\n      \n      if (valueLow !== prevLow\n          \n          || valueHigh !== prevHigh\n          \n         ) {\n        ++numUniqueValues;\n        let outputIndex2 = numUniqueValues * uint32sPerElement;\n        prevLow = valuesBuffer2[outputIndex2] = valueLow;\n        \n        prevHigh = valuesBuffer2[outputIndex2 + 1] = valueHigh;\n        \n      }\n      indexBuffer2[index + 1] = numUniqueValues;\n    }\n    ++numUniqueValues;\n  }\n\n  return writeBlock(output, baseOffset, cache, bx * by * bz, numUniqueValues, valuesBuffer2, encodingBuffer,\n                    indexBuffer2, uint32sPerElement);\n}\n\nexport function encodeChannel(\n  output: Uint32ArrayBuilder, blockSize: ArrayLike<number>,\n  rawData: Uint32Array, volumeSize: ArrayLike<number>,\n  baseInputOffset: number = 0, inputStrides = getFortranOrderStrides(volumeSize, 2)) {\n  return encodeChannelCommon(output, blockSize, rawData, volumeSize, baseInputOffset, inputStrides, encodeBlock);\n}\n\nexport function encodeChannels(\n    output: Uint32ArrayBuilder, blockSize: ArrayLike<number>, rawData: Uint32Array,\n    volumeSize: ArrayLike<number>, baseInputOffset: number = 0,\n    inputStrides = getFortranOrderStrides(volumeSize, 2)) {\n  return encodeChannelsCommon(\n      output, blockSize, rawData, volumeSize, baseInputOffset, inputStrides, encodeBlock);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/compressed_segmentation/encode_uint64.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {VolumeChunk} from 'neuroglancer/sliceview/backend';\nimport {DataType, DATA_TYPE_BYTES} from 'neuroglancer/sliceview/base';\nimport {prod3} from 'neuroglancer/util/geom';\nimport {postProcessRawData} from 'neuroglancer/sliceview/backend_chunk_decoders/postprocess';\n\nexport function decodeRawChunk(chunk: VolumeChunk, response: ArrayBuffer) {\n  let {spec} = chunk.source;\n  let {dataType} = spec;\n  let numElements = prod3(chunk.chunkDataSize);\n  let bytesPerElement = DATA_TYPE_BYTES[dataType];\n  let expectedBytes = numElements * bytesPerElement * spec.numChannels;\n  if (expectedBytes !== response.byteLength) {\n    throw new Error(`Raw-format chunk is ${response.byteLength} bytes, but ${numElements} * ${bytesPerElement} = ${expectedBytes} bytes are expected.`);\n  }\n  let data: ArrayBufferView;\n  switch (dataType) {\n  case DataType.UINT8:\n    data = new Uint8Array(response);\n    break;\n  case DataType.UINT16:\n    data = new Uint16Array(response);\n    break;\n  case DataType.UINT32:\n  case DataType.UINT64:\n    data = new Uint32Array(response);\n    break;\n  case DataType.FLOAT32:\n    data = new Float32Array(response);\n    break;\n  }\n  postProcessRawData(chunk, data);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/backend_chunk_decoders/raw.ts\n **/","// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = require('./lib/utils/common').assign;\n\nvar deflate   = require('./lib/deflate');\nvar inflate   = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/index.js\n ** module id = 52\n ** module chunks = 0\n **/","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (source.hasOwnProperty(p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/utils/common.js\n ** module id = 53\n ** module chunks = 0\n **/","'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overriden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/deflate.js\n ** module id = 54\n ** module chunks = 0\n **/","'use strict';\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  s.d_buf = s.lit_bufsize >> 1;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n                );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/deflate.js\n ** module id = 55\n ** module chunks = 0\n **/","'use strict';\n\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array insdead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/trees.js\n ** module id = 56\n ** module chunks = 0\n **/","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It doesn't worth to make additional optimizationa as in original.\n// Small size is preferable.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/adler32.js\n ** module id = 57\n ** module chunks = 0\n **/","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/crc32.js\n ** module id = 58\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/messages.js\n ** module id = 59\n ** module chunks = 0\n **/","// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safary\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // use fallback for big arrays to avoid stack overflow\n  if (len < 65537) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Fuckup - very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means vuffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/utils/strings.js\n ** module id = 60\n ** module chunks = 0\n **/","'use strict';\n\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/zstream.js\n ** module id = 61\n ** module chunks = 0\n **/","'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overriden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n  var dict;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      // Convert data if needed\n      if (typeof dictionary === 'string') {\n        dict = strings.string2buf(dictionary);\n      } else if (toString.call(dictionary) === '[object ArrayBuffer]') {\n        dict = new Uint8Array(dictionary);\n      } else {\n        dict = dictionary;\n      }\n\n      status = zlib_inflate.inflateSetDictionary(this.strm, dict);\n\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): ouput data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 alligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/inflate.js\n ** module id = 62\n ** module chunks = 0\n **/","'use strict';\n\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n    case HEAD:\n      if (state.wrap === 0) {\n        state.mode = TYPEDO;\n        break;\n      }\n      //=== NEEDBITS(16);\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n        state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = FLAGS;\n        break;\n      }\n      state.flags = 0;           /* expect zlib header */\n      if (state.head) {\n        state.head.done = false;\n      }\n      if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n        (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n        strm.msg = 'incorrect header check';\n        state.mode = BAD;\n        break;\n      }\n      if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n      len = (hold & 0x0f)/*BITS(4)*/ + 8;\n      if (state.wbits === 0) {\n        state.wbits = len;\n      }\n      else if (len > state.wbits) {\n        strm.msg = 'invalid window size';\n        state.mode = BAD;\n        break;\n      }\n      state.dmax = 1 << len;\n      //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = hold & 0x200 ? DICTID : TYPE;\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      break;\n    case FLAGS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.flags = hold;\n      if ((state.flags & 0xff) !== Z_DEFLATED) {\n        strm.msg = 'unknown compression method';\n        state.mode = BAD;\n        break;\n      }\n      if (state.flags & 0xe000) {\n        strm.msg = 'unknown header flags set';\n        state.mode = BAD;\n        break;\n      }\n      if (state.head) {\n        state.head.text = ((hold >> 8) & 1);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = TIME;\n      /* falls through */\n    case TIME:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.time = hold;\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC4(state.check, hold)\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        hbuf[2] = (hold >>> 16) & 0xff;\n        hbuf[3] = (hold >>> 24) & 0xff;\n        state.check = crc32(state.check, hbuf, 4, 0);\n        //===\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = OS;\n      /* falls through */\n    case OS:\n      //=== NEEDBITS(16); */\n      while (bits < 16) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if (state.head) {\n        state.head.xflags = (hold & 0xff);\n        state.head.os = (hold >> 8);\n      }\n      if (state.flags & 0x0200) {\n        //=== CRC2(state.check, hold);\n        hbuf[0] = hold & 0xff;\n        hbuf[1] = (hold >>> 8) & 0xff;\n        state.check = crc32(state.check, hbuf, 2, 0);\n        //===//\n      }\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = EXLEN;\n      /* falls through */\n    case EXLEN:\n      if (state.flags & 0x0400) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length = hold;\n        if (state.head) {\n          state.head.extra_len = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      else if (state.head) {\n        state.head.extra = null/*Z_NULL*/;\n      }\n      state.mode = EXTRA;\n      /* falls through */\n    case EXTRA:\n      if (state.flags & 0x0400) {\n        copy = state.length;\n        if (copy > have) { copy = have; }\n        if (copy) {\n          if (state.head) {\n            len = state.head.extra_len - state.length;\n            if (!state.head.extra) {\n              // Use untyped array for more conveniend processing later\n              state.head.extra = new Array(state.head.extra_len);\n            }\n            utils.arraySet(\n              state.head.extra,\n              input,\n              next,\n              // extra field is limited to 65536 bytes\n              // - no need for additional size check\n              copy,\n              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n              len\n            );\n            //zmemcpy(state.head.extra + len, next,\n            //        len + copy > state.head.extra_max ?\n            //        state.head.extra_max - len : copy);\n          }\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          state.length -= copy;\n        }\n        if (state.length) { break inf_leave; }\n      }\n      state.length = 0;\n      state.mode = NAME;\n      /* falls through */\n    case NAME:\n      if (state.flags & 0x0800) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          // TODO: 2 or 1 bytes?\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.name_max*/)) {\n            state.head.name += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.name = null;\n      }\n      state.length = 0;\n      state.mode = COMMENT;\n      /* falls through */\n    case COMMENT:\n      if (state.flags & 0x1000) {\n        if (have === 0) { break inf_leave; }\n        copy = 0;\n        do {\n          len = input[next + copy++];\n          /* use constant limit because in js we should not preallocate memory */\n          if (state.head && len &&\n              (state.length < 65536 /*state.head.comm_max*/)) {\n            state.head.comment += String.fromCharCode(len);\n          }\n        } while (len && copy < have);\n        if (state.flags & 0x0200) {\n          state.check = crc32(state.check, input, copy, next);\n        }\n        have -= copy;\n        next += copy;\n        if (len) { break inf_leave; }\n      }\n      else if (state.head) {\n        state.head.comment = null;\n      }\n      state.mode = HCRC;\n      /* falls through */\n    case HCRC:\n      if (state.flags & 0x0200) {\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.check & 0xffff)) {\n          strm.msg = 'header crc mismatch';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n      }\n      if (state.head) {\n        state.head.hcrc = ((state.flags >> 9) & 1);\n        state.head.done = true;\n      }\n      strm.adler = state.check = 0;\n      state.mode = TYPE;\n      break;\n    case DICTID:\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      strm.adler = state.check = zswap32(hold);\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = DICT;\n      /* falls through */\n    case DICT:\n      if (state.havedict === 0) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        return Z_NEED_DICT;\n      }\n      strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n      state.mode = TYPE;\n      /* falls through */\n    case TYPE:\n      if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case TYPEDO:\n      if (state.last) {\n        //--- BYTEBITS() ---//\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        state.mode = CHECK;\n        break;\n      }\n      //=== NEEDBITS(3); */\n      while (bits < 3) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.last = (hold & 0x01)/*BITS(1)*/;\n      //--- DROPBITS(1) ---//\n      hold >>>= 1;\n      bits -= 1;\n      //---//\n\n      switch ((hold & 0x03)/*BITS(2)*/) {\n      case 0:                             /* stored block */\n        //Tracev((stderr, \"inflate:     stored block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = STORED;\n        break;\n      case 1:                             /* fixed block */\n        fixedtables(state);\n        //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = LEN_;             /* decode codes */\n        if (flush === Z_TREES) {\n          //--- DROPBITS(2) ---//\n          hold >>>= 2;\n          bits -= 2;\n          //---//\n          break inf_leave;\n        }\n        break;\n      case 2:                             /* dynamic block */\n        //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n        //        state.last ? \" (last)\" : \"\"));\n        state.mode = TABLE;\n        break;\n      case 3:\n        strm.msg = 'invalid block type';\n        state.mode = BAD;\n      }\n      //--- DROPBITS(2) ---//\n      hold >>>= 2;\n      bits -= 2;\n      //---//\n      break;\n    case STORED:\n      //--- BYTEBITS() ---// /* go to byte boundary */\n      hold >>>= bits & 7;\n      bits -= bits & 7;\n      //---//\n      //=== NEEDBITS(32); */\n      while (bits < 32) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n        strm.msg = 'invalid stored block lengths';\n        state.mode = BAD;\n        break;\n      }\n      state.length = hold & 0xffff;\n      //Tracev((stderr, \"inflate:       stored length %u\\n\",\n      //        state.length));\n      //=== INITBITS();\n      hold = 0;\n      bits = 0;\n      //===//\n      state.mode = COPY_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case COPY_:\n      state.mode = COPY;\n      /* falls through */\n    case COPY:\n      copy = state.length;\n      if (copy) {\n        if (copy > have) { copy = have; }\n        if (copy > left) { copy = left; }\n        if (copy === 0) { break inf_leave; }\n        //--- zmemcpy(put, next, copy); ---\n        utils.arraySet(output, input, next, copy, put);\n        //---//\n        have -= copy;\n        next += copy;\n        left -= copy;\n        put += copy;\n        state.length -= copy;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       stored end\\n\"));\n      state.mode = TYPE;\n      break;\n    case TABLE:\n      //=== NEEDBITS(14); */\n      while (bits < 14) {\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n      }\n      //===//\n      state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n      //--- DROPBITS(5) ---//\n      hold >>>= 5;\n      bits -= 5;\n      //---//\n      state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n      //--- DROPBITS(4) ---//\n      hold >>>= 4;\n      bits -= 4;\n      //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n      if (state.nlen > 286 || state.ndist > 30) {\n        strm.msg = 'too many length or distance symbols';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n      state.have = 0;\n      state.mode = LENLENS;\n      /* falls through */\n    case LENLENS:\n      while (state.have < state.ncode) {\n        //=== NEEDBITS(3);\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n        //--- DROPBITS(3) ---//\n        hold >>>= 3;\n        bits -= 3;\n        //---//\n      }\n      while (state.have < 19) {\n        state.lens[order[state.have++]] = 0;\n      }\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      //state.next = state.codes;\n      //state.lencode = state.next;\n      // Switch to use dynamic table\n      state.lencode = state.lendyn;\n      state.lenbits = 7;\n\n      opts = { bits: state.lenbits };\n      ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n      state.lenbits = opts.bits;\n\n      if (ret) {\n        strm.msg = 'invalid code lengths set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n      state.have = 0;\n      state.mode = CODELENS;\n      /* falls through */\n    case CODELENS:\n      while (state.have < state.nlen + state.ndist) {\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_val < 16) {\n          //--- DROPBITS(here.bits) ---//\n          hold >>>= here_bits;\n          bits -= here_bits;\n          //---//\n          state.lens[state.have++] = here_val;\n        }\n        else {\n          if (here_val === 16) {\n            //=== NEEDBITS(here.bits + 2);\n            n = here_bits + 2;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            if (state.have === 0) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            len = state.lens[state.have - 1];\n            copy = 3 + (hold & 0x03);//BITS(2);\n            //--- DROPBITS(2) ---//\n            hold >>>= 2;\n            bits -= 2;\n            //---//\n          }\n          else if (here_val === 17) {\n            //=== NEEDBITS(here.bits + 3);\n            n = here_bits + 3;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 3 + (hold & 0x07);//BITS(3);\n            //--- DROPBITS(3) ---//\n            hold >>>= 3;\n            bits -= 3;\n            //---//\n          }\n          else {\n            //=== NEEDBITS(here.bits + 7);\n            n = here_bits + 7;\n            while (bits < n) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            len = 0;\n            copy = 11 + (hold & 0x7f);//BITS(7);\n            //--- DROPBITS(7) ---//\n            hold >>>= 7;\n            bits -= 7;\n            //---//\n          }\n          if (state.have + copy > state.nlen + state.ndist) {\n            strm.msg = 'invalid bit length repeat';\n            state.mode = BAD;\n            break;\n          }\n          while (copy--) {\n            state.lens[state.have++] = len;\n          }\n        }\n      }\n\n      /* handle error breaks in while */\n      if (state.mode === BAD) { break; }\n\n      /* check for end-of-block code (better have one) */\n      if (state.lens[256] === 0) {\n        strm.msg = 'invalid code -- missing end-of-block';\n        state.mode = BAD;\n        break;\n      }\n\n      /* build code tables -- note: do not change the lenbits or distbits\n         values here (9 and 6) without reading the comments in inftrees.h\n         concerning the ENOUGH constants, which depend on those values */\n      state.lenbits = 9;\n\n      opts = { bits: state.lenbits };\n      ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.lenbits = opts.bits;\n      // state.lencode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid literal/lengths set';\n        state.mode = BAD;\n        break;\n      }\n\n      state.distbits = 6;\n      //state.distcode.copy(state.codes);\n      // Switch to use dynamic table\n      state.distcode = state.distdyn;\n      opts = { bits: state.distbits };\n      ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n      // We have separate tables & no pointers. 2 commented lines below not needed.\n      // state.next_index = opts.table_index;\n      state.distbits = opts.bits;\n      // state.distcode = state.next;\n\n      if (ret) {\n        strm.msg = 'invalid distances set';\n        state.mode = BAD;\n        break;\n      }\n      //Tracev((stderr, 'inflate:       codes ok\\n'));\n      state.mode = LEN_;\n      if (flush === Z_TREES) { break inf_leave; }\n      /* falls through */\n    case LEN_:\n      state.mode = LEN;\n      /* falls through */\n    case LEN:\n      if (have >= 6 && left >= 258) {\n        //--- RESTORE() ---\n        strm.next_out = put;\n        strm.avail_out = left;\n        strm.next_in = next;\n        strm.avail_in = have;\n        state.hold = hold;\n        state.bits = bits;\n        //---\n        inflate_fast(strm, _out);\n        //--- LOAD() ---\n        put = strm.next_out;\n        output = strm.output;\n        left = strm.avail_out;\n        next = strm.next_in;\n        input = strm.input;\n        have = strm.avail_in;\n        hold = state.hold;\n        bits = state.bits;\n        //---\n\n        if (state.mode === TYPE) {\n          state.back = -1;\n        }\n        break;\n      }\n      state.back = 0;\n      for (;;) {\n        here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if (here_bits <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if (here_op && (here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.lencode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      state.length = here_val;\n      if (here_op === 0) {\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        state.mode = LIT;\n        break;\n      }\n      if (here_op & 32) {\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.back = -1;\n        state.mode = TYPE;\n        break;\n      }\n      if (here_op & 64) {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break;\n      }\n      state.extra = here_op & 15;\n      state.mode = LENEXT;\n      /* falls through */\n    case LENEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n      //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n      state.was = state.length;\n      state.mode = DIST;\n      /* falls through */\n    case DIST:\n      for (;;) {\n        here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n        here_bits = here >>> 24;\n        here_op = (here >>> 16) & 0xff;\n        here_val = here & 0xffff;\n\n        if ((here_bits) <= bits) { break; }\n        //--- PULLBYTE() ---//\n        if (have === 0) { break inf_leave; }\n        have--;\n        hold += input[next++] << bits;\n        bits += 8;\n        //---//\n      }\n      if ((here_op & 0xf0) === 0) {\n        last_bits = here_bits;\n        last_op = here_op;\n        last_val = here_val;\n        for (;;) {\n          here = state.distcode[last_val +\n                  ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((last_bits + here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        //--- DROPBITS(last.bits) ---//\n        hold >>>= last_bits;\n        bits -= last_bits;\n        //---//\n        state.back += last_bits;\n      }\n      //--- DROPBITS(here.bits) ---//\n      hold >>>= here_bits;\n      bits -= here_bits;\n      //---//\n      state.back += here_bits;\n      if (here_op & 64) {\n        strm.msg = 'invalid distance code';\n        state.mode = BAD;\n        break;\n      }\n      state.offset = here_val;\n      state.extra = (here_op) & 15;\n      state.mode = DISTEXT;\n      /* falls through */\n    case DISTEXT:\n      if (state.extra) {\n        //=== NEEDBITS(state.extra);\n        n = state.extra;\n        while (bits < n) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n        //--- DROPBITS(state.extra) ---//\n        hold >>>= state.extra;\n        bits -= state.extra;\n        //---//\n        state.back += state.extra;\n      }\n//#ifdef INFLATE_STRICT\n      if (state.offset > state.dmax) {\n        strm.msg = 'invalid distance too far back';\n        state.mode = BAD;\n        break;\n      }\n//#endif\n      //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n      state.mode = MATCH;\n      /* falls through */\n    case MATCH:\n      if (left === 0) { break inf_leave; }\n      copy = _out - left;\n      if (state.offset > copy) {         /* copy from window */\n        copy = state.offset - copy;\n        if (copy > state.whave) {\n          if (state.sane) {\n            strm.msg = 'invalid distance too far back';\n            state.mode = BAD;\n            break;\n          }\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n        }\n        if (copy > state.wnext) {\n          copy -= state.wnext;\n          from = state.wsize - copy;\n        }\n        else {\n          from = state.wnext - copy;\n        }\n        if (copy > state.length) { copy = state.length; }\n        from_source = state.window;\n      }\n      else {                              /* copy from output */\n        from_source = output;\n        from = put - state.offset;\n        copy = state.length;\n      }\n      if (copy > left) { copy = left; }\n      left -= copy;\n      state.length -= copy;\n      do {\n        output[put++] = from_source[from++];\n      } while (--copy);\n      if (state.length === 0) { state.mode = LEN; }\n      break;\n    case LIT:\n      if (left === 0) { break inf_leave; }\n      output[put++] = state.length;\n      left--;\n      state.mode = LEN;\n      break;\n    case CHECK:\n      if (state.wrap) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          // Use '|' insdead of '+' to make sure that result is signed\n          hold |= input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        _out -= left;\n        strm.total_out += _out;\n        state.total += _out;\n        if (_out) {\n          strm.adler = state.check =\n              /*UPDATE(state.check, put - _out, _out);*/\n              (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n        }\n        _out = left;\n        // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n        if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n          strm.msg = 'incorrect data check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n      }\n      state.mode = LENGTH;\n      /* falls through */\n    case LENGTH:\n      if (state.wrap && state.flags) {\n        //=== NEEDBITS(32);\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (hold !== (state.total & 0xffffffff)) {\n          strm.msg = 'incorrect length check';\n          state.mode = BAD;\n          break;\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n      }\n      state.mode = DONE;\n      /* falls through */\n    case DONE:\n      ret = Z_STREAM_END;\n      break inf_leave;\n    case BAD:\n      ret = Z_DATA_ERROR;\n      break inf_leave;\n    case MEM:\n      return Z_MEM_ERROR;\n    case SYNC:\n      /* falls through */\n    default:\n      return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/inflate.js\n ** module id = 63\n ** module chunks = 0\n **/","'use strict';\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defailts,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/inffast.js\n ** module id = 64\n ** module chunks = 0\n **/","'use strict';\n\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  var i = 0;\n  /* process all codes and make table entries */\n  for (;;) {\n    i++;\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/inftrees.js\n ** module id = 65\n ** module chunks = 0\n **/","'use strict';\n\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/constants.js\n ** module id = 66\n ** module chunks = 0\n **/","'use strict';\n\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pako/lib/zlib/gzheader.js\n ** module id = 67\n ** module chunks = 0\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {handleChunkDownloadPromise} from 'neuroglancer/chunk_manager/backend';\nimport {VolumeChunk, VolumeChunkSource as GenericVolumeChunkSource} from 'neuroglancer/sliceview/backend';\nimport {ChunkDecoder} from 'neuroglancer/sliceview/backend_chunk_decoders';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {decodeNdstoreNpzChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/ndstoreNpz';\nimport {openShardedHttpRequest, sendHttpRequest} from 'neuroglancer/util/http_request';\nimport {RPC, registerSharedObject} from 'neuroglancer/worker_rpc';\n\nlet chunkDecoders = new Map<string, ChunkDecoder>();\nchunkDecoders.set('npz', decodeNdstoreNpzChunk);\nchunkDecoders.set('jpeg', decodeJpegChunk);\nchunkDecoders.set('raw', decodeRawChunk);\n\nclass VolumeChunkSource extends GenericVolumeChunkSource {\n  hostnames: string[];\n  key: string;\n  resolution: string;\n  channel: string;\n  encoding: string;\n  chunkDecoder: ChunkDecoder;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.hostnames = options['hostnames'];\n    this.key = options['key'];\n    this.channel = options['channel'];\n    this.resolution = options['resolution'];\n    this.encoding = options['encoding'];\n\n    this.chunkDecoder = chunkDecoders.get(this.encoding);\n  }\n\n  download(chunk: VolumeChunk) {\n    let path = `/ocp/ca/${this.key}/${this.channel}/${this.encoding}/${this.resolution}`;\n    {\n      // chunkPosition must not be captured, since it will be invalidated by the next call to\n      // computeChunkBounds.\n      let chunkPosition = this.computeChunkBounds(chunk);\n      let {chunkDataSize} = chunk;\n      for (let i = 0; i < 3; ++i) {\n        path += `/${chunkPosition[i]},${chunkPosition[i] + chunkDataSize[i]}`;\n      }\n    }\n    path += `/neariso/`;\n    handleChunkDownloadPromise(\n        chunk, sendHttpRequest(openShardedHttpRequest(this.hostnames, path), 'arraybuffer'),\n        this.chunkDecoder);\n  }\n\n  toString() {\n    return `ndstore:volume:${this.hostnames[0]}/${this.key}/${this.channel}/${this.resolution}/${this.encoding}`;\n  }\n};\nregisterSharedObject('ndstore/VolumeChunkSource', VolumeChunkSource);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/datasource/ndstore/backend.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * This decodes the NDStore (https://github.com/neurodata/ndstore) NPZ format, which is the Python\n * NPY binary format with zlib encoding.\n *\n * This is NOT the same as the Python NPZ format, which is a ZIP file containing multiple files\n * (each corresponding to a different variable) in NPY binary format.\n */\n\nimport {DataType} from 'neuroglancer/sliceview/base';\nimport {VolumeChunk} from 'neuroglancer/sliceview/backend';\nimport {parseNpy} from 'neuroglancer/util/npy';\nimport {inflate} from 'pako';\nimport {vec3Key} from 'neuroglancer/util/geom';\nimport {postProcessRawData} from 'neuroglancer/sliceview/backend_chunk_decoders/postprocess';\n\nexport function decodeNdstoreNpzChunk(chunk: VolumeChunk, response: ArrayBuffer) {\n  let parseResult = parseNpy(inflate(new Uint8Array(response)));\n  let {chunkDataSize} = chunk;\n  let {source} = chunk;\n  let {shape} = parseResult;\n  if (shape.length !== 4 || shape[0] !== 1 || shape[1] !== chunkDataSize[2] ||\n      shape[2] !== chunkDataSize[1] || shape[3] !== chunkDataSize[0]) {\n    throw new Error(\n        `Shape ${JSON.stringify(shape)} does not match chunkDataSize ${vec3Key(chunkDataSize)}`);\n  }\n  let parsedDataType = parseResult.dataType.dataType;\n  let {spec} = source;\n  if (parsedDataType !== spec.dataType) {\n    throw new Error(\n        `Data type ${DataType[parsedDataType]} does not match expected data type ${DataType[spec.dataType]}`);\n  }\n  postProcessRawData(chunk, parseResult.data);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/sliceview/backend_chunk_decoders/ndstoreNpz.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Basic support for parsing the Python Numpy 'npy' serialization format.\n *\n * See http://docs.scipy.org/doc/numpy-dev/neps/npy-format.html\n */\n\nimport {pythonLiteralParse} from 'neuroglancer/util/json';\nimport {DataType} from 'neuroglancer/sliceview/base';\nimport {TypedArrayConstructor} from 'neuroglancer/util/array';\nimport {Endianness, convertEndian16, convertEndian32} from 'neuroglancer/util/endian';\n\ninterface SupportedDataType {\n  arrayConstructor: TypedArrayConstructor;\n  dataType: DataType;\n  fixEndianness: (array: ArrayBufferView) => void;\n  elementBytes: number;\n  javascriptElementsPerArrayElement: number;\n}\n\nconst supportedDataTypes = new Map<string, SupportedDataType>();\nsupportedDataTypes.set('|u1', {\n  arrayConstructor: Uint8Array,\n  fixEndianness: array => {},\n  javascriptElementsPerArrayElement: 1,\n  elementBytes: 1,\n  dataType: DataType.UINT8,\n});\nfor (let [endiannessChar, endianness] of <[string, Endianness][]>[\n         ['<', Endianness.LITTLE], ['>', Endianness.BIG]]) {\n  supportedDataTypes.set(`${endiannessChar}u2`, {\n    arrayConstructor: Uint16Array,\n    elementBytes: 2,\n    fixEndianness: array => { convertEndian16(array, endianness); },\n    javascriptElementsPerArrayElement: 1,\n    dataType: DataType.UINT16,\n  });\n  supportedDataTypes.set(`${endiannessChar}u4`, {\n    arrayConstructor: Uint32Array,\n    elementBytes: 4,\n    fixEndianness: array => { convertEndian32(array, endianness); },\n    javascriptElementsPerArrayElement: 1,\n    dataType: DataType.UINT32,\n  });\n  supportedDataTypes.set(`${endiannessChar}u8`, {\n    arrayConstructor: Uint32Array,\n    elementBytes: 8,\n    // We still maintain the low 32-bit value first.\n    fixEndianness: array => { convertEndian32(array, endianness); },\n    javascriptElementsPerArrayElement: 1,\n    dataType: DataType.UINT64,\n  });\n  supportedDataTypes.set(`${endiannessChar}f4`, {\n    arrayConstructor: Float32Array,\n    elementBytes: 4,\n    fixEndianness: array => { convertEndian32(array, endianness); },\n    javascriptElementsPerArrayElement: 1,\n    dataType: DataType.FLOAT32,\n  });\n}\n\nexport class NumpyArray {\n  constructor(public data: ArrayBufferView, public shape: number[], public dataType: SupportedDataType, public fortranOrder: boolean) {}\n};\n\nexport function parseNpy(x: Uint8Array) {\n  // Verify 6-byte magic sequence: 147, 78, 85, 77, 80, 89\n  if (x[0] !== 147 || x[1] !== 78 || x[2] !== 85 || x[3] !== 77 || x[4] !== 80 || x[5] !== 89) {\n    throw new Error('Data does not match npy format.');\n  }\n  const majorVersion = x[6], minorVersion = x[7];\n  if (majorVersion !== 1 || minorVersion !== 0) {\n    throw new Error(`Unsupported npy version ${majorVersion}.${minorVersion}`);\n  }\n  const dv = new DataView(x.buffer, x.byteOffset, x.byteLength);\n  const headerLength = dv.getUint16(8, /*littleEndian=*/true);\n  const header = new TextDecoder('utf-8').decode(x.subarray(10, headerLength + 10));\n  let headerObject: any;\n  const dataOffset = headerLength + 10;\n  try {\n    headerObject = pythonLiteralParse(header);\n  } catch (e) {\n    throw new Error(`Failed to parse npy header: ${e}`);\n  }\n  const dtype = headerObject['descr'];\n  let shape = headerObject['shape'];\n  let numElements = 1;\n  if (!Array.isArray(shape)) {\n    throw new Error('Invalid shape ${JSON.stringify(shape)}');\n  }\n  for (let dim of shape) {\n    if (typeof dim !== 'number') {\n      throw new Error('Invalid shape ${JSON.stringify(shape)}');\n    }\n    numElements *= dim;\n  }\n  const supportedDataType = supportedDataTypes.get(dtype);\n  if (supportedDataType === undefined) {\n    throw new Error(`Unsupported numpy data type ${JSON.stringify(dtype)}`);\n  }\n  const totalDataBytes = supportedDataType.elementBytes * numElements;\n  if (totalDataBytes + dataOffset !== x.byteLength) {\n    throw new Error('Expected length does not match length of data');\n  }\n  const data = new (supportedDataType.arrayConstructor)(\n      x.buffer, x.byteOffset + dataOffset,\n      numElements * supportedDataType.javascriptElementsPerArrayElement);\n  supportedDataType.fixEndianness(data);\n  return new NumpyArray(data, shape, supportedDataType, headerObject['fortran_order'] === true);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/util/npy.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {handleChunkDownloadPromise} from 'neuroglancer/chunk_manager/backend';\nimport {VolumeChunkSourceParameters, volumeSourceToString, TileChunkSourceParameters, tileSourceToString, TileEncoding} from 'neuroglancer/datasource/dvid/base';\nimport {VolumeChunk, VolumeChunkSource as GenericVolumeChunkSource} from 'neuroglancer/sliceview/backend';\nimport {ChunkDecoder} from 'neuroglancer/sliceview/backend_chunk_decoders';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {sendHttpRequest, openShardedHttpRequest} from 'neuroglancer/util/http_request';\nimport {RPC, registerSharedObject} from 'neuroglancer/worker_rpc';\n\nconst TILE_CHUNK_DECODERS = new Map<TileEncoding, ChunkDecoder>([\n  [TileEncoding.JPEG, decodeJpegChunk],\n]);\n\nclass VolumeChunkSource extends GenericVolumeChunkSource {\n  parameters: VolumeChunkSourceParameters;\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.parameters = options['parameters'];\n  }\n\n  download(chunk: VolumeChunk) {\n    let params = this.parameters;\n    let path: string;\n    {\n      // chunkPosition must not be captured, since it will be invalidated by the next call to\n      // computeChunkBounds.\n      let chunkPosition = this.computeChunkBounds(chunk);\n      let {chunkDataSize} = chunk;\n      \n      if (params['level2'] == \"0\") {\n        path = `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/raw/0_1_2/${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}/nd`;\n      } else {\n      path = `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}_${params['level2']}/raw/0_1_2/${chunkDataSize[0]}_${chunkDataSize[1]}_${chunkDataSize[2]}/${chunkPosition[0]}_${chunkPosition[1]}_${chunkPosition[2]}/nd`;\n      }\n    }\n    handleChunkDownloadPromise(\n        chunk, sendHttpRequest(openShardedHttpRequest(params.baseUrls, path), 'arraybuffer'),\n        decodeRawChunk);\n  }\n  toString() { return volumeSourceToString(this.parameters); }\n};\nregisterSharedObject('dvid/VolumeChunkSource', VolumeChunkSource);\n\nclass TileChunkSource extends GenericVolumeChunkSource {\n  parameters: TileChunkSourceParameters;\n  chunkDecoder: ChunkDecoder;\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.parameters = options['parameters'];\n    this.chunkDecoder = TILE_CHUNK_DECODERS.get(this.parameters['encoding']);\n  }\n\n  download(chunk: VolumeChunk) {\n    let params = this.parameters;\n    let {chunkGridPosition} = chunk;\n\n    // Needed by decoder.\n    chunk.chunkDataSize = this.spec.chunkDataSize;\n    let path = `/api/node/${params['nodeKey']}/${params['dataInstanceKey']}/tile/${params['dims']}/${params['level']}/${chunkGridPosition[0]}_${chunkGridPosition[1]}_${chunkGridPosition[2]}`;\n    handleChunkDownloadPromise(\n        chunk, sendHttpRequest(openShardedHttpRequest(params.baseUrls, path), 'arraybuffer'),\n      this.chunkDecoder);\n  }\n  toString() { return tileSourceToString(this.parameters); }\n};\nregisterSharedObject('dvid/TileChunkSource', TileChunkSource);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/datasource/dvid/backend.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport interface VolumeChunkSourceParameters {\n  baseUrls: string[];\n  nodeKey: string;\n  dataInstanceKey: string;\n  level2: string;\n};\n\nexport enum TileEncoding {\n  JPEG\n};\n\nexport interface TileChunkSourceParameters extends VolumeChunkSourceParameters {\n  dims: string;\n  level: string;\n  encoding: TileEncoding;\n};\n\nexport function volumeSourceToString(parameters: VolumeChunkSourceParameters) {\n  return `dvid:volume:${parameters['baseUrls'][0]}/${parameters['nodeKey']}/${parameters['dataInstanceKey']}/${parameters['level2']}`;\n}\n\nexport function tileSourceToString(parameters: TileChunkSourceParameters) {\n  return `dvid:volume:${parameters['baseUrls'][0]}/${parameters['nodeKey']}/${parameters['dataInstanceKey']}/${parameters['dims']}/${parameters['level']}/${TileEncoding[parameters['encoding']]}`;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/datasource/dvid/base.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'neuroglancer/datasource/ndstore/backend';\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/datasource/openconnectome/backend.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {handleChunkDownloadPromise} from 'neuroglancer/chunk_manager/backend';\nimport {VolumeChunkEncoding} from 'neuroglancer/datasource/precomputed/base';\nimport {ManifestChunk, FragmentChunk, MeshSource as GenericMeshSource, decodeJsonManifestChunk, decodeVertexPositionsAndIndices} from 'neuroglancer/mesh/backend';\nimport {VolumeChunk, VolumeChunkSource as GenericVolumeChunkSource} from 'neuroglancer/sliceview/backend';\nimport {ChunkDecoder} from 'neuroglancer/sliceview/backend_chunk_decoders';\nimport {decodeCompressedSegmentationChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/compressed_segmentation';\nimport {decodeJpegChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/jpeg';\nimport {decodeRawChunk} from 'neuroglancer/sliceview/backend_chunk_decoders/raw';\nimport {Endianness} from 'neuroglancer/util/endian';\nimport {openShardedHttpRequest, sendHttpRequest} from 'neuroglancer/util/http_request';\nimport {RPC, registerSharedObject} from 'neuroglancer/worker_rpc';\n\nconst chunkDecoders = new Map<VolumeChunkEncoding, ChunkDecoder>();\nchunkDecoders.set(VolumeChunkEncoding.RAW, decodeRawChunk);\nchunkDecoders.set(VolumeChunkEncoding.JPEG, decodeJpegChunk);\nchunkDecoders.set(VolumeChunkEncoding.COMPRESSED_SEGMENTATION, decodeCompressedSegmentationChunk);\n\nclass VolumeChunkSource extends GenericVolumeChunkSource {\n  baseUrls: string[];\n  path: string;\n  encoding: VolumeChunkEncoding;\n  chunkDecoder: ChunkDecoder;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.baseUrls = options['baseUrls'];\n    this.path = options['path'];\n    this.encoding = options['encoding'];\n    this.chunkDecoder = chunkDecoders.get(this.encoding);\n  }\n\n  download(chunk: VolumeChunk) {\n    let path: string;\n    {\n      // chunkPosition must not be captured, since it will be invalidated by the next call to\n      // computeChunkBounds.\n      let chunkPosition = this.computeChunkBounds(chunk);\n      let {chunkDataSize} = chunk;\n      path =\n          `${this.path}/${chunkPosition[0]}-${chunkPosition[0] + chunkDataSize[0]}_${chunkPosition[1]}-${chunkPosition[1] + chunkDataSize[1]}_${chunkPosition[2]}-${chunkPosition[2] + chunkDataSize[2]}`;\n    }\n    handleChunkDownloadPromise(\n        chunk, sendHttpRequest(openShardedHttpRequest(this.baseUrls, path), 'arraybuffer'),\n        this.chunkDecoder);\n  }\n  toString () {\n    return `precomputed:volume:${this.baseUrls[0]}/${this.path}`;\n  }\n};\nregisterSharedObject('precomputed/VolumeChunkSource', VolumeChunkSource);\n\nexport function decodeManifestChunk(chunk: ManifestChunk, response: any) {\n  return decodeJsonManifestChunk(chunk, response, 'fragments');\n}\n\nexport function decodeFragmentChunk(chunk: FragmentChunk, response: ArrayBuffer) {\n  let dv = new DataView(response);\n  let numVertices = dv.getUint32(0, true);\n  decodeVertexPositionsAndIndices(\n      chunk, response, Endianness.LITTLE, /*vertexByteOffset=*/4, numVertices);\n}\n\nexport class MeshSource extends GenericMeshSource {\n  baseUrls: string[];\n  path: string;\n  lod: number;\n\n  constructor(rpc: RPC, options: any) {\n    super(rpc, options);\n    this.baseUrls = options['baseUrls'];\n    this.path = options['path'];\n    this.lod = options['lod'];\n  }\n\n  download(chunk: ManifestChunk) {\n    let requestPath = `${this.path}/${chunk.objectId}:${this.lod}`;\n    handleChunkDownloadPromise(\n        chunk, sendHttpRequest(openShardedHttpRequest(this.baseUrls, requestPath), 'json'),\n        decodeManifestChunk);\n  }\n\n  downloadFragment(chunk: FragmentChunk) {\n    let requestPath = `${this.path}/${chunk.fragmentId}`;\n    handleChunkDownloadPromise(\n        chunk, sendHttpRequest(openShardedHttpRequest(this.baseUrls, requestPath), 'arraybuffer'),\n        decodeFragmentChunk);\n  }\n  toString () {\n    return `precomputed:mesh:${this.baseUrls[0]}/${this.path}`;\n  }\n};\nregisterSharedObject('precomputed/MeshSource', MeshSource);\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/datasource/precomputed/backend.ts\n **/","/**\n * @license\n * Copyright 2016 Google Inc.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport 'neuroglancer/util/http_request';\n\nexport enum VolumeChunkEncoding {\n  RAW,\n  JPEG,\n  COMPRESSED_SEGMENTATION\n}\n\n// Prevent this from being considered a typings file.\nlet x = 0;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/neuroglancer/datasource/precomputed/base.ts\n **/"],"sourceRoot":""}